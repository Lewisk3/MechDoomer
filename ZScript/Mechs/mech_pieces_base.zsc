// Camera Drone
class MechCamera : Actor
{
	MechWarriorBase mechowner;
	vector3 followpos;
	float followdist;
	float followdist_desired;
	float followdist_max;
	float rotangle;
	float rotspd;
	bool frontcam;
	
	Property FollowDistance : followdist;
	
	Default
	{
		+NOGRAVITY;
		Radius 1;
		Height 1;
		MechCamera.FollowDistance 50;
	}
		
	static MechCamera Create(MechWarriorBase torso, float dist, float rotation, bool frontfacing=false)
	{
		let cam = MechCamera(Spawn("MechCamera"));
		if(cam) 
		{
			cam.mechowner = torso;
			cam.followdist_desired = dist;
			cam.followdist_max = dist;
			cam.rotspd = rotation;
			cam.frontcam = frontfacing;
			torso.player.camera = cam;
		}
		return cam;
	}
	
	vector3 GetFollowPos()
	{
		float zoffs = (mechowner.viewheight);
		float trueangle = !rotangle ? mechowner.angle : rotangle;
		float dmul = followdist*(frontcam ? -1 : 1);
		FLineTraceData lndata;
		mechowner.LineTrace(angle+180,followdist_max,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,zoffs+sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			followdist_desired = lndata.Distance;
			if(followdist > followdist_desired) followdist = followdist_desired;
		}
		else
		{	
			followdist_desired = followdist_max;
		}
		
		// Backwards interpolate from player center to new pos.
		// This makes clipping out of walls a bit less noticable
		// because, instead of going from inside the wall in, we're going
		// from inside the player out to the wall.
		
		vector3 origpos = mechowner.Vec3Offset(
			-cos(trueangle),
			-sin(trueangle),
			zoffs+sin(mechowner.pitch)
		);
		vector3 newfollowpos = mechowner.Vec3Offset(
			-cos(trueangle)*dmul,
			-sin(trueangle)*dmul,
			zoffs+sin(mechowner.pitch)*dmul
		);
		if(!followpos.length()) followpos = newfollowpos;
		newfollowpos = MDMath.Lerp3D(origpos, newfollowpos, 0.6);
		return newfollowpos;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			if(followdist < followdist_desired && mechowner.dronecam_active) 
				followdist = MDMath.Lerp(followdist,followdist_desired,0.05);
				
			float lerpspd = 0.15;
			rotangle += rotspd;
			vector3 newfollowpos = GetFollowPos();
			
			if(!mechowner.dronecam_active)
			{
				if(Distance2D(mechowner) <= 24) Destroy();
				followdist = MDMath.Lerp(followdist,0,0.10);
				if(followdist <= 10) lerpspd=1;
			}
			followpos = MDMath.Lerp3D(followpos, newfollowpos, lerpspd);
			angle = AngleTo(mechowner);
			pitch = MDMath.getPitchBetween(pos,(mechowner.pos.x,mechowner.pos.y,mechowner.pos.z+mechowner.viewheight));
			SetOrigin(followpos,true);
		}
	}	
	
	States
	{
		Spawn:
			MCAM A 1;
		loop;
	}
}

// Parts base
class MechPartsBase : Actor
{
	MechwarriorBase mechowner;
	float zoffs;
	float cxoffs;
	float czoffs;
	Property ZOffset : zoffs;
	Property CockpitOffset : cxoffs, czoffs;
	
	Default
	{
		+NOGRAVITY;
		MechPartsBase.ZOffset 0;
		MechPartsBase.CockpitOffset 0, 60;
	}
	
	virtual vector3 getMechPos()
	{
		vector3 basepos = mechowner.Vec3Offset(0,0,zoffs);
		return basepos;
	}
	
	override void tick()
	{
		super.Tick();
		if(mechowner) SetOrigin(getMechPos(),true);
	}	
	
	static MechPartsBase Create(class<MechPartsBase> part, MechWarriorBase base)
	{
		let mwpart = MechPartsBase(Spawn(part));
		if(mwpart)
		{
			mwpart.mechowner = base;
			mwpart.frame = 0;
		}
		return mwpart;
	}
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

// Cockpit cameras
class MechCockpitCamera : MechPartsBase
{
	Default
	{
		+NOINTERACTION;
	}

	float defz;	
	float cur_viewz;
	override vector3 getMechPos()
	{
		float distoffs = cxoffs;
		FLineTraceData lndata;
		mechowner.LineTrace(angle,cxoffs,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,czoffs-sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			distoffs = lndata.Distance-20;
		}
		if(mechowner.pos.z+czoffs+20 > ceilingz) 
		{
			float diff = (mechowner.pos.z+czoffs+20)-ceilingz;
			czoffs -= diff;
		}
		vector3 basepos = mechowner.Vec3Offset(cos(mechowner.angle)*distoffs,sin(mechowner.angle)*distoffs,czoffs);
		return basepos;
	}

	override void tick()
	{
		if(!defz) defz = czoffs;
		if(mechowner && !mechowner.CheckVoodoo()) 
		{		
			float fovdiff = mechowner.player.FOV/mechowner.defaultfov*0.5;
			CameraFOV = mechowner.player.FOV;
			angle = MDMath.Lerp(angle,mechowner.angle,0.6*fovdiff);
			pitch = MDMath.Lerp(pitch,mechowner.pitch+(mechowner.viewzoffs*0.065),0.6*fovdiff);
			roll = mechowner.roll;
			czoffs = defz+(mechowner.viewzoffs);
		}
		super.tick();
	}
}
class MechCockpitModel : MechPartsBase
{
	float mxoffs;
	float mzoffs;
	Property Offset: mxoffs, mzoffs;
	MechPartsBase cockpitcam;	
	
	Default
	{
		+INTERPOLATEANGLES
		+NOINTERACTION
	}
	
	override vector3 getMechPos()
	{
		float fxoffs = cockpitcam.cxoffs+mxoffs;
		float fzoffs = cockpitcam.czoffs+mzoffs;
		FLineTraceData lndata;
		mechowner.LineTrace(angle,fxoffs,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,fzoffs-sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			fxoffs = lndata.Distance-20;
		}
		if(mechowner.pos.z+fzoffs+20 > ceilingz) 
		{
			float diff = (mechowner.pos.z+fzoffs+20)-ceilingz;
			fzoffs -= diff;
		}
		vector3 basepos = mechowner.Vec3Offset(cos(mechowner.angle)*fxoffs,sin(mechowner.angle)*fxoffs,fzoffs);
		return basepos;
	}
	
	override void tick()
	{
		if(!cockpitcam)
		{
			Destroy();
			return;
		}
			
		if(mechowner && !mechowner.CheckVoodoo()) 
		{
			if( (!mechowner.mech_shutdown && !mechowner.pilotlook) || mechowner.defaultmovement )
			{
				A_SetAngle(MDMath.Lerp(angle,mechowner.angle,0.1),SPF_INTERPOLATE);
				A_SetPitch(MDMath.Lerp(pitch,mechowner.pitch+(mechowner.viewzoffs*0.75),0.1),SPF_INTERPOLATE);
				A_SetRoll (mechowner.roll,SPF_INTERPOLATE);
			}
			mzoffs = mechowner.viewzoffs*0.12;
		}
		
		if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
			bInvisible = false;
		else 
			bInvisible = true;
		
		// bInvisible = false; // Debug
		super.Tick();
	}
}

// Torsos
class MechTorsoBase : MechPartsBase
{
	bool notwist;
	bool setup;
	MechPartsBase hips;
	MechPartsBase legs;
	MechPartsbase cockpit_camera;
	class<MechPartsBase> hips_type;
	class<MechPartsBase> legs_type;
	class<MechCockpitModel> cockpit_type;
	Property Pieces : hips_type, legs_type, cockpit_type;
	Property DoNotTwist : notwist;
		
	void SetupParts(class<MechPartsBase> phips, class<MechPartsBase> plegs, class<MechCockpitModel> cpit)
	{
		cockpit_camera = MechPartsBase.Create("MechCockpitCamera", mechowner);
		if(phips) hips = MechPartsBase.Create(phips, mechowner);
		if(plegs) legs = MechPartsBase.Create(plegs, mechowner);
		if(hips) hips.zoffs = zoffs;
		if(cockpit_camera) 
		{
			cockpit_camera.cxoffs = cxoffs;
			cockpit_camera.czoffs = czoffs;
		}
		if(cpit) 
		{
			let cockpitmdl = MechCockpitModel(MechPartsBase.Create(cpit, mechowner));
			if(cockpitmdl) 
			{
				cockpitmdl.cockpitcam = cockpit_camera;
				cockpitmdl.angle = mechowner.angle;
			}
		}
		setup = true;
	}
	
	override void tick()
	{
		if(mechowner && !mechowner.CheckVoodoo())
		{
			if( !mechowner.dronecam && !mechowner.dronecam_active &&
				 mechowner.player && mechowner.player.camera == mechowner ) 
				mechowner.player.camera = cockpit_camera;
			
			if(!setup) SetupParts(hips_type, legs_type, cockpit_type);
			if(!notwist)
			{
				pitch = mechowner.pitch*0.5;
				roll = mechowner.roll*0.3;
				angle = mechowner.angle;
			}
			else
			{
				angle = mechowner.LegAng;
			}
			if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
				bInvisible = true;
			else
				bInvisible = false;
		}
		super.tick();
	}
	override void OnDestroy()
	{
		if(hips) hips.Destroy();
		if(legs) legs.Destroy();
		if(cockpit_camera) cockpit_camera.Destroy();
	}
	States
	{
		Spawn:
			TRSO A 1;
		loop;
	}
}

// Hips
class MechHipsBase : MechPartsBase
{
	override void tick()
	{
		if(mechowner)
		{
			angle = mechowner.LegAng;
			if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
				bInvisible = true;
			else
				bInvisible = false;
		}
		super.tick();
	}
}

// Legs
class MechLegsBase : MechPartsBase
{
	float spdrating;
	float stompfriction;
	float runspeed;
	
	Property RunSpeed : runspeed;
	
	Default
	{
		MechLegsBase.RunSpeed 81;
	}
	
	override void tick()
	{
		if(mechowner && !mechowner.CheckVoodoo())
		{
			angle = mechowner.LegAng;
			if((!mechowner.dronecam && mechowner.nofirstpersonlegs) && !mechowner.CheckVoodoo()) 
				bInvisible = true;
			else
				bInvisible = false;
				
			if(!mechowner.CheckVoodoo())
			{
				float wrating = float(mechowner.inv_context.weapons_tonnage)/100.;
				stompfriction = clamp((0.65) + (wrating*(spdrating)), 0.75, 1.05);
				spdrating = abs(mechowner.LegVel*0.5)+(abs(mechowner.move_throttle) * mechowner.MoveSpeedKPH)/runspeed;
			}
		}
		super.tick();
	}
	bool isMoving()
	{
		return ( 
			 mechowner && !mechowner.checkVoodoo() && !mechowner.mech_shutdown && 
		    (mechowner.player && mechowner.player.onground) && 
			(mechowner.vel.xy.length() >= 0.08 || mechowner.LegVel) && 
			!mechowner.isdead
		);
	}
	virtual bool checkStepping(bool idle=false, int frameone=3, int frametwo=8)
	{
		if(!mechowner) return false;
		mechowner.stepping = idle ? false : (frame == frameone || frame == frametwo);
		if(mechowner.stepping) mechowner.A_AlertMonsters(1024);
		return true;
	}
	
	States
	{
		Spawn:
			TLEG A 1;
		SpawnIdle:
			"####" "#" 1 A_JumpIf(checkStepping(true) && isMoving(), "WalkCycle");
		loop;
		WalkCycle:
			TLEG BCDEFGHI 4 
			{	
				if( (frame == 2 || frame == 7) ) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping() && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 4, 10);
				return !isMoving() ? ResolveState("SpawnIdle") : (tics <= 5 && frame >= 7) ? ResolveState("RunCycle") : ResolveState(Null); 
			}
		loop;
		RunCycle:
			TLEG KLMNOPQRS 4 
			{	
				if( (frame == 10 || frame == 15) ) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 11, 16) && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 3, 10);
				return !isMoving() ? ResolveState("WalkCycle") : (tics > 5 && frame <= 10) ? ResolveState("WalkCycle") : ResolveState(Null); 
			}
		loop;
	}
}

class Legs_Smooth  : MechLegsBase 
{
	States
	{
		Spawn:
			TLE1 A 1;
		SpawnIdle:
			"####" "#" 1 A_JumpIf(checkStepping(true) && isMoving(), "WalkCycle");
		loop;
		WalkCycle:
			TLE1 BCDEFGHIJKLMNOPQRSTUVWXYZ 2 
			{	
				if(frame == 1 || frame == 15) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 2, 17) && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 2);
				return !isMoving() ? ResolveState("SpawnIdle") : ResolveState(Null);
			}
			TLE2 ABCDEFG 2
			{
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 2);
				return !isMoving() ? ResolveState("SpawnIdle") : (tics <= 1 && frame > 5) ? ResolveState("RunCycle") : ResolveState(Null);
			}
		loop;
		RunCycle:
			TLE3 BCDEFGHIJKLMNOPQRSTUVWXYZ 2 
			{	
				if(frame == 7 || frame == 22) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 8, 24) && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 3);
				return !isMoving() ? ResolveState("SpawnIdle") : (tics >= 3 && frame == 1) ? ResolveState("WalkCycle") : ResolveState(Null);
			}
			TLE4 ABCDEF 2
			{
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 3);
			}
		loop;
	}
}