// Camera Drone
class MechCamera : Actor
{
	MechWarriorBase mechowner;
	vector3 followpos;
	double followtilt;
	double followdist;
	double followdist_desired;
	double followdist_max;
	double rotangle;
	double rotspd;
	bool frontcam;
	
	Property FollowDistance : followdist;
	
	Default
	{
		+NOGRAVITY;
		+NOINTERACTION;
		+DONTTHRUST;
		Radius 1;
		Height 1;
		MechCamera.FollowDistance 5;
	}
		
	static MechCamera Create(MechWarriorBase torso, double dist, double angulardist, double rotation, bool frontfacing=false)
	{
		let cam = MechCamera(Spawn("MechCamera"));
		if(cam) 
		{
			cam.mechowner = torso;
			cam.followdist_desired = dist;
			cam.followdist_max = dist;
			cam.rotspd = rotation;
			cam.frontcam = frontfacing;
			cam.followtilt = angulardist;
			torso.player.camera = cam;
		}
		return cam;
	}
	
	vector3 GetFollowPos()
	{
		double zoffs = (mechowner.viewheight)+20;
		double trueangle = !rotangle ? mechowner.angle : rotangle;
		double truetilt = frontcam ? 0 : followtilt;
		
		double dmul = followdist*(frontcam ? -1 : 1);
		FLineTraceData lndata;
		mechowner.LineTrace(angle+truetilt+180,followdist_max,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,zoffs+sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			followdist_desired = lndata.Distance;
			if(followdist > followdist_desired) followdist = followdist_desired;
		}
		else
		{	
			followdist_desired = followdist_max;
		}
		
		// Backwards interpolate from player center to new pos.
		// This makes clipping out of walls a bit less noticable
		// because, instead of going from inside the wall in, we're going
		// from inside the player out to the wall.
			
		vector3 origpos = mechowner.Vec3Offset(
			-cos(trueangle+truetilt),
			-sin(trueangle+truetilt),
			zoffs+sin(mechowner.pitch)
		);
		vector3 newfollowpos = mechowner.Vec3Offset(
			-cos(trueangle+truetilt)*dmul,
			-sin(trueangle+truetilt)*dmul,
			zoffs+sin(mechowner.pitch)*dmul
		);
		if(!followpos.length()) followpos = newfollowpos;
		newfollowpos = MDMath.Lerp3D(origpos, newfollowpos, 0.6);
		return newfollowpos;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			if(followdist < followdist_desired && mechowner.dronecam_active) 
				followdist = MDMath.Lerp(followdist,followdist_desired,0.05);
				
			double lerpspd = 0.15;
			rotangle += rotspd;
			vector3 newfollowpos = GetFollowPos();
			
			if(!mechowner.dronecam_active)
			{
				if(Distance2D(mechowner) <= 24) Destroy();
				followdist = MDMath.Lerp(followdist,0,0.10);
				if(followdist <= 10) lerpspd=1;
			}
			followpos = MDMath.Lerp3D(followpos, newfollowpos, lerpspd);
			angle = AngleTo(mechowner)-(frontcam ? 0 : followtilt);
			pitch = MDMath.getPitchBetween(pos,(mechowner.pos.x,mechowner.pos.y,mechowner.pos.z+mechowner.viewheight+(frontcam ? 0 : 20)));
			SetOrigin(followpos,true);
		}
	}	
	
	States
	{
		Spawn:
			MCAM A 1;
		loop;
	}
}

// Parts base
class MechPartsBase : Actor
{
	MechwarriorBase mechowner;
	double zoffs;
	double cxoffs;
	double czoffs;
	Property ZOffset : zoffs;
	Property CockpitOffset : cxoffs, czoffs;
	
	Default
	{
		+INTERPOLATEANGLES
		+NOGRAVITY;
		+DONTTHRUST;
		MechPartsBase.ZOffset 0;
		MechPartsBase.CockpitOffset 0, 60;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other is "MechHitbox") return false;
		return super.CanCollideWith(other, passive);
	}
	
	bool CheckLocalObserver()
	{
		return mechowner == MechwarriorBase(players[consoleplayer].mo);
	}
	
	virtual vector3 getMechPos()
	{
		vector3 basepos = mechowner.Vec3Offset(0,0,zoffs);
		return basepos;
	}
	
	override void tick()
	{
		if(mechowner) SetOrigin(getMechPos(),true);
		super.Tick();
	}	
	
	static MechPartsBase Create(class<MechPartsBase> part, MechWarriorBase base)
	{
		let mwpart = MechPartsBase(Spawn(part));
		if(mwpart)
		{
			mwpart.mechowner = base;
			mwpart.frame = 0;
		}
		return mwpart;
	}
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

// Cockpit cameras
class MechCockpitCamera : MechPartsBase
{
	Default
	{
		+NOINTERACTION;
		+CLIENTSIDEONLY
	}

	double defz;	
	double cur_viewz;
	double rot_spd;
	
	override vector3 getMechPos()
	{
		double distoffs = cxoffs;
		FLineTraceData lndata;
		mechowner.LineTrace(angle,cxoffs+128,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,czoffs+sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			if(distoffs > lndata.Distance-50) distoffs = lndata.Distance-50;
		}
		if(mechowner.pos.z+czoffs+20 > ceilingz) 
		{
			double diff = (mechowner.pos.z+czoffs+20)-ceilingz;
			czoffs -= diff;
		}
		vector3 basepos = mechowner.Vec3Offset(cos(mechowner.angle)*distoffs,sin(mechowner.angle)*distoffs,czoffs);
		return basepos;
	}

	override void tick()
	{
		if(!defz) defz = czoffs;
		if(mechowner && !mechowner.CheckVoodoo() && mechowner.player) 
		{		
			double fovdiff = mechowner.player.FOV/mechowner.defaultfov*0.5;
			CameraFOV = mechowner.player.FOV;
			angle += mechowner.LegDelta;

			angle = MDMath.Lerp(angle,mechowner.angle,0.6*fovdiff);
			pitch = MDMath.Lerp(pitch,mechowner.pitch+(mechowner.viewzoffs*0.065),0.6*fovdiff);
			roll = mechowner.roll;
			czoffs = defz+(mechowner.viewzoffs);
		}
		super.tick();
	}
}
class MechCockpitModel : MechPartsBase
{
	double mxoffs;
	double mzoffs;
	double maxpitch;
	double maxangle;
	double rotatespeed;
	double bobrange;
	Property Offset: mxoffs, mzoffs;
	MechCockpitCamera cockpitcam;	
	
	Default
	{
		+NOINTERACTION
		+CLIENTSIDEONLY
	}
	
	override vector3 getMechPos()
	{
		double fxoffs = cockpitcam.cxoffs+mxoffs;
		double fzoffs = cockpitcam.czoffs+mzoffs;
		FLineTraceData lndata;
		mechowner.LineTrace(angle,fxoffs+128,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,fzoffs+sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			if(fxoffs > lndata.Distance-50) fxoffs = lndata.Distance-50;
		}
		if(mechowner.pos.z+fzoffs+20 > ceilingz) 
		{
			double diff = (mechowner.pos.z+fzoffs+20)-ceilingz;
			fzoffs -= diff;
		}
		vector3 basepos = mechowner.Vec3Offset(cos(mechowner.angle)*fxoffs,sin(mechowner.angle)*fxoffs,fzoffs);
		return basepos;
	}
	
	override void tick()
	{
		if(!cockpitcam)
		{
			Destroy();
			return;
		}
		cockpitcam.rot_spd = rotatespeed;	
		
		if(mechowner && !mechowner.CheckVoodoo(true)) 
		{	
			if( (!mechowner.mech_shutdown && !mechowner.pilotlook) || mechowner.defaultmovement )
			{
				if(!mechowner.defaultmovement && GetAge() > 2)
				{					
					double toangle = mechowner.angle;
					if(toangle - mechowner.LegAng >  maxangle) toangle = mechowner.LegAng + maxangle;
					if(toangle - mechowner.LegAng < -maxangle) toangle = mechowner.LegAng - maxangle;
					double topitch = clamp(mechowner.pitch, -maxpitch, maxpitch);
					angle += mechowner.LegDelta;
					
					// double rot_tic = rotatespeed/35.;
					// A_SetAngle(MDMath.Strp(angle,toangle, rot_tic),SPF_INTERPOLATE);
					double old_pitch = pitch;
					double old_angle = angle;
					A_SetAngle(MDMath.Lerp(angle,toangle, rotatespeed*0.6),SPF_INTERPOLATE);
					A_SetPitch(MDMath.Lerp(pitch,topitch+(mechowner.viewzoffs*0.75),0.1),SPF_INTERPOLATE);
					
					// Follow Roll
					if(!mechowner.models_reference.noroll)
						A_SetRoll (mechowner.roll,SPF_INTERPOLATE);
					
					// Torso rotation sounds.
					bool angle_move = abs(old_angle-angle) > 0.1;
					bool pitch_move = 
					(
						abs(old_pitch-pitch) > (rotatespeed*0.6) && 
						abs(mechowner.player.cmd.pitch) > 30
					);
					if(pitch_move || angle_move)
						A_StartSound("Mech/TorsoTwist",CHAN_BODY,0,1,3); 
					else 
						A_StopSound(CHAN_BODY); 					
				}
				else
				{
					pitch = mechowner.pitch;
					angle = mechowner.angle;
					roll = mechowner.roll;
				}
			}
			mzoffs = (mechowner.viewzoffs*0.12)*bobrange;
		}
		
		// Only visible for the local player.
		if(CheckLocalObserver())
		{
			if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
				bInvisible = false;
			else 
				bInvisible = true;
		}
		else
			bInvisible = true;
			
		super.Tick();
	}
}

// Arms
class MechArmsBase : MechPartsBase
{
	double mzoffs;
	
	Default
	{
		+NOINTERACTION
		+CLIENTSIDEONLY
	}
	
	bool IsThirdPerson()
	{
		return mechowner.dronecam || mechowner.CheckVoodoo();
	}
	
	override vector3 getMechPos()
	{
		if(!mechowner.models_reference || !mechowner.models_reference.cockpit) 
			return super.getMechPos();
		double cos_angle = cos(mechowner.angle);
		double sin_angle = sin(mechowner.angle);
		double pitchcorrect = -cos(pitch-90)*20;
		vector3 basepos;
		
		if(!IsThirdPerson())
		{
			double forward = mechowner.models_reference.cockpit.cockpitcam.cxoffs+
							 mechowner.models_reference.cockpit.mxoffs;
			basepos = mechowner.Vec3Offset(
					(cos_angle*pitchcorrect) + (cos_angle*forward),
					(sin_angle*pitchcorrect) + (sin_angle*forward),
					zoffs+mzoffs
			);
		}
		else
		{
			basepos = mechowner.Vec3Offset(cos_angle, sin_angle, zoffs+mzoffs);
		}
		return basepos;
	}
	
	override void tick()
	{
		if(!mechowner)
		{
			super.Tick();	
			return;
		}
		let base = mechowner.models_reference;
		let cockpit = base.cockpit;
		if(mechowner && base && CheckLocalObserver())
		{		
			// For now, the arms will be invisible in 3rd person but, i do want them to actually
			// function at some point, can't get the math just right atm.
			bInvisible = IsThirdPerson();
			
			if(!IsThirdPerson())
			{
				A_SetPitch(MDMath.Lerp(pitch,mechowner.pitch+(mechowner.viewzoffs*0.75),0.1),SPF_INTERPOLATE);
				A_SetAngle(cockpit.angle, SPF_INTERPOLATE);
				if(!base.noroll) A_SetRoll(MDMath.Lerp(roll, (base.roll*0.5), 0.5), SPF_INTERPOLATE);
				mzoffs = mechowner.viewzoffs;
			}
			else
			{
				A_SetPitch(MDMath.Lerp(pitch,mechowner.pitch+(mechowner.viewzoffs*0.75),0.1),SPF_INTERPOLATE);
				if(!base.noroll) roll = MDMath.Lerp(roll, cockpit.roll, 0.1);
				angle = cockpit.angle;
			}
		}
		else
			bInvisible = true;
		super.tick();
	}
}

// Torsos
class MechTorsoBase : MechPartsBase
{
	bool noroll;
	bool notwist;
	bool setup;
	double cockpitpitch_mod;
	double cockpitangle_mod;
	double cockpittwist_mod;
	double cockpitbob_mod;
	double arms_offs;
	MechPartsBase hips;
	MechPartsBase legs;
	MechPartsBase arms;
	MechPartsbase cockpit_camera;
	MechCockpitModel cockpit;
	class<MechPartsBase> arms_type;
	class<MechPartsBase> hips_type;
	class<MechPartsBase> legs_type;
	class<MechCockpitModel> cockpit_type;
	Property Pieces : hips_type, legs_type, cockpit_type, arms_type;
	Property CockpitRange : cockpitangle_mod, cockpitpitch_mod, cockpitbob_mod;
	Property ArmsHeight : arms_offs;
	Property TwistSpeed : cockpittwist_mod;
	Property DoNotTwist : notwist;
	Property DoNotRoll : noroll;
	
	Default
	{
		MechTorsoBase.CockpitRange 0.7, 0.7, 1.0;
		MechTorsoBase.TwistSpeed 0.1;
	}
		
	void SetupParts(class<MechPartsBase> phips, class<MechPartsBase> plegs, class<MechCockpitModel> cpit, class<MechPartsBase> parms)
	{
		cockpit_camera = MechPartsBase.Create("MechCockpitCamera", mechowner);
		if(phips) hips = MechPartsBase.Create(phips, mechowner);
		if(plegs) legs = MechPartsBase.Create(plegs, mechowner);
		if(parms) arms = MechPartsBase.Create(parms, mechowner);
		if(hips) hips.zoffs = zoffs;
		if(arms) arms.zoffs = arms_offs;
		if(cockpit_camera) 
		{
			cockpit_camera.cxoffs = cxoffs;
			cockpit_camera.czoffs = czoffs;
		}
		if(cpit) 
		{
			cockpit = MechCockpitModel(MechPartsBase.Create(cpit, mechowner));
			if(cockpit) 
			{
				cockpit.cockpitcam = MechCockpitCamera(cockpit_camera);
				cockpit.angle = mechowner.angle;
				cockpit.maxpitch = mechowner.maxPitch * cockpitpitch_mod;
				cockpit.maxangle = mechowner.MaxYaw * cockpitangle_mod;
				cockpit.rotatespeed = cockpittwist_mod;
				cockpit.bobrange = cockpitbob_mod;
			}
		}
		setup = true;
	}
	
	override void tick()
	{
		if(!setup) SetupParts(hips_type, legs_type, cockpit_type, arms_type);
		if(mechowner)
		{
			if( !mechowner.dronecam && !mechowner.dronecam_active &&
				 mechowner.player && mechowner.player.camera == mechowner ) 
				mechowner.player.camera = cockpit_camera;
			
			if(!notwist)
			{
				if(cockpit)
				{
					pitch = cockpit.pitch;
					if(!noroll) roll = MDMath.Lerp(roll, cockpit.roll, 0.1);
					angle = cockpit.angle;
				}
				else // Mainly for "MechCorpses".
				{
					pitch = mechowner.pitch*cockpitpitch_mod;
					roll = mechowner.roll;
					angle = mechowner.angle*cockpitangle_mod;
				}
			}
			else
			{
				angle = mechowner.LegAng;
			}
			if(CheckLocalObserver())
			{
				if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
					bInvisible = true;
				else
					bInvisible = false;
			}
			else
				bInvisible = false;
		}
		super.tick();
	}
	override void OnDestroy()
	{
		if(hips) hips.Destroy();
		if(legs) legs.Destroy();
		if(arms) arms.Destroy();
		if(cockpit_camera) cockpit_camera.Destroy();
	}
	States
	{
		Spawn:
			TRSO A 1;
		loop;
	}
}

// Hips
class MechHipsBase : MechPartsBase
{
	override void tick()
	{
		if(mechowner)
		{
			angle = mechowner.LegAng;
			pitch = mechowner.models_reference.pitch;
			
			if(CheckLocalObserver())
			{
				if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
					bInvisible = true;
				else
					bInvisible = false;
			}
			else
				bInvisible = false;
		}
		super.tick();
	}
}

// Legs
class MechLegsBase : MechPartsBase
{
	double spdrating;
	double stompfriction;
	double runspeed;
	
	Property RunSpeed : runspeed;
	
	Default
	{
		MechLegsBase.RunSpeed 0.5;
	}
	
	override void tick()
	{
		super.tick();
		if(!mechowner) return;
		angle = mechowner.LegAng;
		if(mechowner && !mechowner.CheckVoodoo())
		{
			if(CheckLocalObserver())
			{
				if((!mechowner.dronecam && mechowner.nofirstpersonlegs)) 
					bInvisible = true;
				else
					bInvisible = false;
			}
			else
				bInvisible = false;
				
			double truemove = !mechowner.MoveSpeedKPH ? 1 : mechowner.MoveSpeedKPH; 
			double curspd = abs(mechowner.LegVel*0.5)+(abs(mechowner.move_throttle) * truemove);
			double wrating = double(mechowner.inv_context.weapons_tonnage)/100.;
			double stomp_spdrating = (curspd / truemove)*0.3;
			double stomp_wrating = 1.0-(0.7*wrating);
			
			spdrating = curspd / (truemove*runspeed);
			stompfriction = stomp_wrating + stomp_spdrating;
		}
	}
	bool isMoving()
	{
		return ( 
			 mechowner && !mechowner.checkVoodoo() && !mechowner.mech_shutdown && 
		     mechowner.player && mechowner.player.onground && 
			(mechowner.vel.xy.length() >= 0.1 || mechowner.throttle != 0 || mechowner.LegVel) && 
			!mechowner.isdead
		);
	}
	virtual bool checkStepping(bool idle=false, int frameone=3, int frametwo=8)
	{
		if(!mechowner) return false;
		mechowner.stepping = idle ? false : (frame == frameone || frame == frametwo);
		if(mechowner.stepping) mechowner.A_AlertMonsters(1024);
		return true;
	}
	
	States
	{
		Spawn:
			TLEG A 1;
		SpawnIdle:
			"####" "#" 1 A_JumpIf(checkStepping(true) && isMoving(), "WalkCycle");
		loop;
		WalkCycle:
			TLEG BCDEFGHI 4 
			{	
				if(!mechowner) return ResolveState("Null"); // This occurs on disconnect while walking.
				if(checkStepping() && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 4, 10);
				if( (frame == 2 || frame == 7) && (spdrating > 0.3 || mechowner.LegVel)) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				return !isMoving() ? ResolveState("SpawnIdle") : (tics <= 5 && frame >= 7) ? ResolveState("RunCycle") : ResolveState(Null); 
			}
		loop;
		RunCycle:
			TLEG KLMNOPQRS 4 
			{	
				if(!mechowner) return ResolveState("Null"); // This occurs on disconnect while running.
				if( (frame == 10 || frame == 15) ) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 11, 16) && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 3, 10);
				return !isMoving() ? ResolveState("WalkCycle") : (tics > 5 && frame <= 10) ? ResolveState("WalkCycle") : ResolveState(Null); 
			}
		loop;
	}
}

class Legs_Smooth  : MechLegsBase 
{
	double mid_frame;
	
	States
	{
		Spawn:
			TLE1 A 1;
		SpawnIdle:
			"####" "#" 1 
			{
				if( checkStepping(true) && isMoving() ) return ResolveState("WalkCycle");
				mid_frame = MDMath.Lerp(frame, 0, 0.05);
				frame = floor(mid_frame);
				return ResolveState(Null);
			}
		loop;
		WalkCycle:
			TLE1 BCDEFGHIJKLMNOPQRSTUVWXYZ 2 
			{	
				if(!mechowner) return ResolveState("Null"); // This occurs on disconnect while walking.
				if( (frame == 1 || frame == 15) && (spdrating > 0.3 || mechowner.LegVel) ) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 2, 16) && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 2);
				return !isMoving() ? ResolveState("SpawnIdle") : ResolveState(Null);
			}
			TLE2 ABCDEFG 2
			{
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 2);
				return !isMoving() ? ResolveState("SpawnIdle") : (tics <= 1 && frame > 5) ? ResolveState("RunCycle") : ResolveState(Null);
			}
		loop;
		RunCycle:
			TLE3 BCDEFGHIJKLMNOPQRSTUVWXYZ 2 
			{	
				if(!mechowner) return ResolveState("Null"); // This occurs on disconnect while running.
				if(frame == 7 || frame == 22) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 8, 23) && mechowner.stepping) mechowner.vel.xy *= stompfriction;	
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 3);
				return !isMoving() ? ResolveState("WalkCycle") : (tics >= 2 && frame == 1) ? ResolveState("WalkCycle") : ResolveState(Null);
			}
			TLE4 ABCDEF 2
			{
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 2);
			}
		loop;
	}
}