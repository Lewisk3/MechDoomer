const statscr_base_width = 1920.0;
const statscr_base_height = 1080.0;

// All H_ function auto adjust to the screen resolution based on 1080p coords.	
mixin class HUDScaleFunctions
{
	void H_DrawImage(String img, vector2 pos, uint flags=0, vector2 scale=(1,1), double alpha=1, Color tint=Color(0,0,0,0))
	{
		MD_SBS.DrawImage(img,pos,flags,alpha,scale,tint);
	}
	void H_DrawTexture(TextureID texture, Vector2 pos, int flags = 0, Vector2 scale = (1, 1), double alpha=1)
	{
		MD_SBS.DrawTexture(texture,pos,flags,alpha,scale);
	}
	void H_DrawLine(int x0, int y0, int x1, int y1, Color color)
	{
		MD_SBS.DrawLine(x0,y0,x1,y1, color);
	}
	void H_Fill(Color col, double x, double y, double w, double h, int flags = 0)
	{
		MD_SBS.Fill(col,x,y,w,h,flags);
	}
	void H_SetClipRect(int x, int y, int width, int height, bool visualize=false)
	{
		if(visualize) MD_SBS.Fill(Color(255,0,255,0), x,y,width,height );			
		MD_SBS.SetClipRect(x,y,width,height);
	}
	void H_DrawStringBigFont(String str, vector2 pos, uint flags = 0, int translation = Font.CR_UNTRANSLATED, double alpha=1)
	{
		MD_SBS.DrawString("dbigfont", str, pos, flags, translation, alpha, font_scale);
	}
	void H_DrawString(String str, vector2 pos, uint flags = 0, int translation = Font.CR_UNTRANSLATED, vector2 scale=(1,1), double alpha=1, Font customfont=NULL)
	{
		Font fnt = "MechFont";
		if (customfont) fnt = customfont;
		
		double fontscale = CVar.GetCVar("mwd_fontscale", mechplr.player).getFloat();
		vector2 finalscale = (font_scale.x*scale.x, font_scale.y*scale.y);
		finalscale *= fontscale;
		MD_SBS.DrawString("MechFont",str,pos,flags,translation,alpha,finalscale);
	}
	void drawAngledLine(int x, int y, int distance, double angle, double fov, Color c)
	{
		MD_SBS.DrawThickLine(x,y,x+(cos(angle+fov)*distance),y-(sin(angle+fov)*distance),2,c);
	}
	vector2 H_AdjustCoord(vector2 coord)
	{
		return MD_SBS.GetRelativePos(coord);
	}
	void H_DrawCircle(String texture="YLWPXL", vector2 pos=(0,0), double radius=500, uint flags = MD_SBS.SS_SCREEN_CENTER)
	{
		double step = 1.0 / (radius/100);
		for(double i = 0; i < 360; i+=step)
		{
			double xpos = pos.x + (cos(i)*radius);
			double ypos = pos.y + (sin(i)*radius);
			H_DrawImage(texture, (xpos,ypos), flags);
		}
	}
}

// -= StatusBarScreen =- \\

class StatusColor Abstract 
{
	static clearscope double hue2rgb(double p, double q, double t)
	{
		if(t < 0) t += 1;
		if(t > 1) t -= 1;
		if(t < 1./6.) return p + (q - p) * 6 * t;
		if(t < 1./2.) return q;
		if(t < 2./3.) return p + (q - p) * (2./3. - t) * 6;
		return p;
	}
	static clearscope Color hslToRgb(double h,double s,double l, double alpha=1.0)
	{
		double r, g, b;
		if(s == 0)
		{
			r = g = b = l;
		} 
		else
		{
			double q = l < 0.5 ? l * (1 + s) : l + s - l * s;
			double p = 2 * l - q;
			r = hue2rgb(p, q, h + 1./3.);
			g = hue2rgb(p, q, h);
			b = hue2rgb(p, q, h - 1./3.);
		}
		return Color(int(255*alpha), int(r * 255), int(g * 255), int(b * 255));
	}
}


class MD_SBS Abstract ui
{
	enum AlignFlags
	{
		SS_SCREEN_CENTER		= 0x1,
		SS_SCREEN_TOP_CENTER	= 0x2,
		SS_SCREEN_BOTTOM_CENTER	= 0x4,
		SS_SCREEN_TOP_LEFT		= 0x8,
		SS_SCREEN_BOTTOM_LEFT	= 0x10,
		SS_SCREEN_TOP_RIGHT		= 0x20,
		SS_SCREEN_BOTTOM_RIGHT	= 0x40,
		SS_COORDS_TEXGRID		= 0x80,
		SS_TEXCOORDS_ABSOLUTE   = 0x100
	};

	static float GetBaseHeight()
	{
		return statscr_base_height;
	}
	
	static float GetBaseWidth()
	{
		return statscr_base_width;
	}
	
	// Determines the true bottom of viewspace, 
	// gets its ratio to the desired resolution.
	static float GetStatusBarHeightRatio()
	{	
		int widthOfs, heightOfs, width, height;
		[widthOfs, heightOfs, width, height] = Screen.GetViewWindow();

		int bottom = heightOfs + height;
		return float(bottom) / Screen.getHeight();
	}

	// Coord processing
	static vector2 _ProcessCoords(vector2 pos, uint flags)
	{
		float centery = (GetBaseHeight()*GetStatusBarHeightRatio())/2.;
		vector2 center			= (GetBaseWidth()/2., centery);
		vector2 top_center		= (GetBaseWidth()/2., 0);
		vector2 bottom_center	= (GetBaseWidth()/2., GetBaseHeight());
		vector2 top_right		= (GetBaseWidth(), 0);
		vector2 bottom_right	= (GetBaseWidth(), GetBaseHeight());
		vector2 bottom_left		= (0, GetBaseHeight());
		
		if(flags & SS_SCREEN_CENTER       ) return center		+pos;
		if(flags & SS_SCREEN_TOP_CENTER   ) return top_center	+pos;
		if(flags & SS_SCREEN_BOTTOM_CENTER) return bottom_center+pos;
		if(flags & SS_SCREEN_BOTTOM_LEFT  ) return bottom_left  +pos;
		if(flags & SS_SCREEN_TOP_RIGHT    ) return top_right	+pos;
		if(flags & SS_SCREEN_BOTTOM_RIGHT ) return bottom_right +pos;
		return pos;
	}

	static vector2 _ProcessTextureCoords(vector2 pos, vector2 texoffs, uint flags, TextureID texture, vector2 scale=(1,1))
	{
		vector2 texsize;
		[texsize.x, texsize.y] = TexMan.GetSize(texture);
		
		// Ugh, why can't i just multiply 2 vec2's together?
		texsize.x *= scale.x;
		texsize.y *= scale.y;
		
		if(flags & SS_COORDS_TEXGRID)
		{
			pos.x = pos.x*texsize.x;
			pos.y = pos.y*texsize.y;
		}
		if( !(flags & SS_TEXCOORDS_ABSOLUTE) )
		{
			pos.x -= (texsize.x*texoffs.x)/2.;
			pos.y -= (texsize.y*texoffs.y*GetStatusBarHeightRatio())/2.;
		}
		return _ProcessCoords(pos, flags);
	}
	
	static void DrawTexture(TextureID texture, Vector2 pos, int flags = 0, double Alpha = 1., Vector2 scale = (1, 1), Color tint=Color(0,0,0,0), vector2 texoffs = (1,1), bool absolute=false)
	{
		vector2 texsize;
		[texsize.x, texsize.y] = TexMan.GetSize(texture);


		if(!absolute)
		{
			vector2 npos = _ProcessTextureCoords(pos, texoffs, flags, texture, scale);
			Screen.DrawTexture(texture, false, npos.x, npos.y,
				DTA_VirtualWidthF, GetBaseWidth(),
				DTA_VirtualHeightF, GetBaseHeight(),
				DTA_KeepRatio, true,
				DTA_Alpha, alpha,
				DTA_DestWidth, int(texsize.x*scale.x),
				DTA_DestHeight, int(texsize.y*scale.y),
				DTA_ColorOverlay, tint
			);
		}
		else
		{
			vector2 resolution = (Screen.GetWidth(), Screen.GetHeight());
			vector2 scaleratio = (resolution.x/GetBaseWidth(), resolution.y/GetBaseHeight());
			vector2 nscale = (scale.x*scaleratio.x, scale.y*scaleratio.y);
			pos.y *= GetStatusBarHeightRatio();
			vector2 npos = _ProcessTextureCoords(pos, texoffs, flags, texture, nscale);
			
			Screen.DrawTexture(texture, false, npos.x, npos.y,
				DTA_KeepRatio, true,
				DTA_Alpha, alpha,
				DTA_DestWidth, int(texsize.x*scale.x*scaleratio.x),
				DTA_DestHeight, int(texsize.y*scale.y*scaleratio.y),
				DTA_ColorOverlay, tint
			);
		}
	}

	static void DrawImage(String graphic, Vector2 pos, int flags = 0, double Alpha = 1., Vector2 scale = (1, 1), Color tint=Color(0,0,0,0), vector2 texoffs = (1,1), bool absolute=false)
	{
		TextureID texture = TexMan.CheckForTexture(graphic, TexMan.Type_Any);
		DrawTexture(texture, pos, flags, alpha, scale, tint, texoffs, absolute);
	}
	
	static void DrawMugshot( int accuracy, vector2 pos, int drawflags = 0, int mugshotflags = 0, 
							 float alpha = 1.0, vector2 scale=(5.0,5.0), string default_face="STF",
							 Color tint=Color(0,0,0,0), bool absolute=false)
	{
		TextureID mugtex = statusbar.GetMugshot(accuracy, mugshotflags, default_face);
		DrawTexture(mugtex, pos, drawflags, alpha, scale, tint, (1,1), absolute);
	}
	
	static vector2 GetImageSize(String graphic)
	{
		vector2 texsize;
		TextureID texture = TexMan.CheckForTexture(graphic, TexMan.Type_Any);
		
		[texsize.x, texsize.y] = TexMan.GetSize(texture);
		return texsize;
	}
	
	static void DrawString( Font fnt, String str, Vector2 pos, int flags = 0, int translation = Font.CR_UNTRANSLATED, 
							double Alpha = 1., Vector2 scale = (1, 1), Color tint = Color(0,0,0,0), int linespacing = 20 )
	{
		Array<String> lines;
		str.Split(lines, "\n");
		
		vector2 npos = _ProcessCoords(pos, flags);
		npos.x *= (1./scale.x*0.5);
		npos.y *= (1./scale.y*0.5);
		
		for(int i = 0; i < lines.Size(); i++)
		{
			 float lineoffs = (linespacing*i);
			 Screen.DrawText(fnt, translation, npos.x, npos.y+lineoffs, 
				lines[i],
				DTA_VirtualWidthF,  int(GetBaseWidth()*(1./scale.x*0.5)),
				DTA_VirtualHeightF, int(GetBaseHeight()*(1./scale.y*0.5)),
				DTA_KeepRatio, true,
				DTA_Alpha, alpha,
				DTA_ColorOverlay, tint
			);
		}		
	}
	
	static void Fill(Color col, double x, double y, double w, double h, int flags = 0, bool absolute = false)
	{
		vector2 pos = (x, y);
		float sc_xres = Screen.getWidth()/GetBaseWidth();
		float sc_yres = Screen.getHeight()/GetBaseHeight();		
		vector2 npos = absolute ? pos : _ProcessCoords(pos, flags);
		if(!absolute)
		{
			npos.x *= sc_xres;
			npos.y *= sc_yres;
		}
		w *= sc_xres;
		h *= sc_yres;
		
		Screen.Dim(col, 1.0, npos.x, npos.y, w, h);
	}
	
	static void DrawBar(String ongfx, String offgfx, double curval, double maxval, Vector2 position, int border, int vertical,
						double Alpha = 1., Vector2 scale = (1, 1), Color tint=Color(0,0,0,0) )
	{
		let ontex = TexMan.CheckForTexture(ongfx, TexMan.TYPE_MiscPatch);
		if (!ontex.IsValid()) return;
		let offtex = TexMan.CheckForTexture(offgfx, TexMan.TYPE_MiscPatch);
		
		double value = (maxval != 0) ? clamp(curval / maxval, 0, 1) : 0;
		if(border != 0) value = 1. - value; //invert since the new drawing method requires drawing the bg on the fg.
		
		// {cx, cb, cr, cy}
		double Clip[4];
		Clip[0] = Clip[1] = Clip[2] = Clip[3] = 0;
		
		vector2 on_texsize;
		vector2 off_texsize;
		[on_texsize.x, on_texsize.y] = TexMan.GetSize(ontex);
		[off_texsize.x, off_texsize.y] = TexMan.GetSize(offtex);
		on_texsize.x *= scale.x;
		on_texsize.y *= scale.y;
		off_texsize.x *= scale.x;
		off_texsize.y *= scale.y;
		
		bool horizontal = !(vertical & BaseStatusBar.SHADER_VERT);
		bool reverse = !!(vertical & BaseStatusBar.SHADER_REVERSE);
		double sizeOfImage = (horizontal ? on_texsize.X - border*2 : on_texsize.Y - border*2);
		Clip[(!horizontal) | ((!reverse)<<1)] = sizeOfImage - sizeOfImage *value;
		
		// preserve the active clipping rectangle
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = screen.GetClipRect();

		if(border != 0)
		{
			for(int i = 0; i < 4; i++) Clip[i] += border;

			//Draw the whole foreground
			DrawTexture(ontex, position, 0, alpha, scale, tint, (0,0) );
			SetClipRect(position.X + Clip[0], position.Y + Clip[1], on_texsize.X - Clip[0] - Clip[2], on_texsize.Y - Clip[1] - Clip[3]);
		}
		
		if (offtex.IsValid() && off_texsize == on_texsize) DrawTexture(offtex, position, 0, alpha, scale, tint, (0,0) );
		else Fill(color(255,0,0,0), position.X + Clip[0], position.Y + Clip[1], on_texsize.X - Clip[0] - Clip[2], on_texsize.Y - Clip[1] - Clip[3]);
		
		if (border == 0) 
		{
			SetClipRect(position.X + Clip[0], position.Y + Clip[1], on_texsize.X - Clip[0] - Clip[2], on_texsize.Y - Clip[1] - Clip[3]);
			DrawTexture(ontex, position, 0, alpha, scale, tint, (0,0) );
		}
		// restore the previous clipping rectangle
		screen.SetClipRect(cx, cy, cw, ch);
	}
	
	static void SetClipRect(int x, int y, int w, int h)
	{
		float sc_xres = Screen.getWidth()/GetBaseWidth();
		float sc_yres = Screen.getHeight()/GetBaseHeight();		
		x *= sc_xres;
		y *= sc_yres;
		w *= sc_xres;
		h *= sc_yres;
		Screen.SetClipRect(x,y,w,h);
	}
	
	static void DrawLine(int x0, int y0, int x1, int y1, Color color, double alpha = 1.0, int flags = 0)
	{
		vector2 posFrom = (x0, y0);
		vector2 posTo = (x1, y1);
		double sc_xres = Screen.getWidth()/statscr_base_width;
		double sc_yres = Screen.getHeight()/statscr_base_height;		
		vector2 nposFrom = _ProcessCoords(posFrom, flags);
		vector2 nposTo = _ProcessCoords(posTo, flags);
		nposTo.x *= sc_xres;
		nposTo.y *= sc_yres;
		nposFrom.x *= sc_xres;
		nposFrom.y *= sc_yres;
		Screen.DrawLine(nposFrom.x, nposFrom.y, nposTo.x, nposTo.y, color, ceil(alpha*255.));
	}
	
	static void DrawThickLine(int x0, int y0, int x1, int y1, int thickness, Color color, double alpha = 1.0, int flags = 0)
	{
		vector2 posFrom = (x0, y0);
		vector2 posTo = (x1, y1);
		double sc_xres = Screen.getWidth()/statscr_base_width;
		double sc_yres = Screen.getHeight()/statscr_base_height;		
		vector2 nposFrom = _ProcessCoords(posFrom, flags);
		vector2 nposTo = _ProcessCoords(posTo, flags);
		nposTo.x *= sc_xres;
		nposTo.y *= sc_yres;
		nposFrom.x *= sc_xres;
		nposFrom.y *= sc_yres;
		Screen.DrawThickLine(nposFrom.x, nposFrom.y, nposTo.x, nposTo.y, thickness, color, ceil(alpha*255.));
	}
	
	
	static vector2 GetRelativePos(vector2 pos)
	{
		double sc_xres = Screen.getWidth()/statscr_base_width;
		double sc_yres = Screen.getHeight()/statscr_base_height;	
		return (pos.x*sc_xres, pos.y*sc_yres);
	}
	
	static void ClearClipRect() { Screen.ClearClipRect(); }
}	