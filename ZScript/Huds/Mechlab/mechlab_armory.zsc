extend class Mechlab_Menu;

// Variables
int autil_selected; 	// Selected armor utility
int astat_selected;		// Selected armor status (internal, armor)

// Process
bool ValidateHardpoint(int ind)
{
	if(ind == -1) return true; // No such hardpoint.
	MechHardpoint hp = valid_hardpoints.FindByIndex(ind);
	return (hp.internalhp > 0);
}

float GetHardpointVitalRatio(MechHardpoint hp)
{
	float hp_vitals    = hp.armor+hp.internalhp;
	float hp_maxvitals = hp.max_armor+hp.max_internal;
	if(hp.internalhp <= 0) hp_vitals = 0;
	if(hp_vitals == 0) return 1.0;
	float vres = 1.0 - (hp_vitals / hp_maxvitals);
	if(vres < 0.1) vres = 0;
	return vres;
}

Color getHealthyColor(float ratio, float tintalpha=1.0)
{
	if(ratio <= 0) return StatusColor.HSLtoRGB(0,1.0,0.0,1.0);
	return StatusColor.HSLtoRGB(0.28*(ratio-0.3),1.0,0.5, tintalpha);
}

double GetEntireRepairCost()
{
	double cost = 0;
	for(int i = 0; i <= 7; i++)
	{
		MechHardpoint hp = mechplr.hardpoints.FindByIndex(i);
		cost += mechplr.CalculateHardpointRepairCost(hp,0);
		cost += mechplr.CalculateHardpointRepairCost(hp,1);
	}
	return cost;
}

void RepairAllHardpoints()
{
	for(int i = 0; i <= 7; i++)
	{
		MechDoomerEvents.SendNetworkEvent("repair_hardpoint", i, 0);
		MechDoomerEvents.SendNetworkEvent("repair_hardpoint", i, 1);
	}
}

double, double GetHardpointHealthPerc(MechHardpoints hps)
{
	// This is surrounded in curly braces so it can be collapsed and temporarily
	// removed from view.
	float curarmor, maxarmor, curinternal, maxinternal;
	{
		curarmor += hps.hd.armor;
		curarmor += hps.ct.armor;
		curarmor += hps.lt.armor;
		curarmor += hps.rt.armor;
		curarmor += hps.la.armor;
		curarmor += hps.ra.armor;
		curarmor += hps.ll.armor;
		curarmor += hps.rl.armor;
		
		maxarmor += hps.hd.max_armor;
		maxarmor += hps.ct.max_armor;
		maxarmor += hps.lt.max_armor;
		maxarmor += hps.rt.max_armor;
		maxarmor += hps.la.max_armor;
		maxarmor += hps.ra.max_armor;
		maxarmor += hps.ll.max_armor;
		maxarmor += hps.rl.max_armor;
		
		curinternal += hps.hd.internalhp;
		curinternal += hps.ct.internalhp;
		curinternal += hps.lt.internalhp;
		curinternal += hps.rt.internalhp;
		curinternal += hps.la.internalhp;
		curinternal += hps.ra.internalhp;
		curinternal += hps.ll.internalhp;
		curinternal += hps.rl.internalhp;
		
		maxinternal += hps.hd.max_internal;
		maxinternal += hps.ct.max_internal;
		maxinternal += hps.lt.max_internal;
		maxinternal += hps.rt.max_internal;
		maxinternal += hps.la.max_internal;
		maxinternal += hps.ra.max_internal;
		maxinternal += hps.ll.max_internal;
		maxinternal += hps.rl.max_internal;
	}
	
	float armorp = maxarmor <= 0 ? 100 : (curarmor/maxarmor * 100);
	float internalp = (curinternal/maxinternal * 100);
	
	return armorp, internalp;
}


// Graphics
void DrawDamagedHardpoints(vector2 pos)
{
	uint flags = MD_SBS.SS_SCREEN_CENTER;
	vector2 scale = (0.94,0.94);
	float alpha = 0.69;

	for(int i = 0; i < 8; i++)
	{
		MechHardpoint hp = valid_hardpoints.FindByIndex(i);
		if(!hp) return;
		
		float ratio = 1.0-GetHardpointVitalRatio(hp);
		Color hpcolor = getHealthyColor(ratio,ratio<1.0 ? 0.5 : 0);
		if(ratio >= 1.0) continue;
		
		switch(i)
		{ 
			Case 0: // HD
				H_DrawImage(tMechInt_Head, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 1: // CT
				H_DrawImage(tMechInt_CTorso, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 2: // LT
				H_DrawImage(tMechInt_LTorso, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 3: // RT
				H_DrawImage(tMechInt_RTorso, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 4: // LA
				H_DrawImage(tMechInt_LArm, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 5: // RA
				H_DrawImage(tMechInt_RArm, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 6: // LL
				H_DrawImage(tMechInt_LLeg, pos, flags, scale, alpha, tint:hpcolor);
			break;
			Case 7: // RL
				H_DrawImage(tMechInt_RLeg, pos, flags, scale, alpha, tint:hpcolor);
			break;
			default:
			break;
		}
	}	
}
void DrawArmorUtilites(int sx, int sy)
{
	int offsy = 0;
	for(let w = mechplr.Inv; w; w = w.Inv)
	{
		let armorutil = ArmoryUtility(w);
		if(armorutil)
		{
			Rect checkmouse;
			string itemstr = armorutil.getTag() .. " x" .. mechplr.countinv(armorutil.getClassName());
			initRect(checkmouse,sx,sy+offsy-14,14*itemstr.length(),20);
			// drawRect(checkmouse, debug_color);
			if( checkCollision(mouse, checkmouse) && mstats.left_btn ) autil_item = armorutil;
			uint fcr = Font.CR_WHITE;
			if(armorutil == autil_item) fcr = Font.CR_GREEN;
			H_DrawString(itemstr, (sx,sy+offsy-15), 0, fcr);
			offsy += 15;
		}
	}
}
void drawArmoryInfo()
{
	// Draw Utils
	DrawArmorUtilites(1260,140);
	
	DrawDamagedHardpoints( (51,222) );
	
	string enginetype = mechplr.inv_context.engine ? mechplr.inv_context.engine.displayName : "INVALID ENGINE";
	String weapston = (mechplr.inv_context.weapons_tonnage .. "");
	String mechston = (mechplr.mech_tonnage .. "");
	String heateff = mechplr.HeatEfficiency*35 .. "";
	String maxspd = mechplr.MoveSpeedKPH .. "";
	maxspd.truncate(maxspd.Length()-4);
	heateff.truncate(heateff.Length()-3);
	weapston.truncate(weapston.length()-3);
	mechston.truncate(mechston.length()-3);
	enginetype.truncate(enginetype.Length()-7);
	vector2 detailpos = (280,300);
	vector2 cbillpos  = (290,105);
	vector2 statuspos = (777,160);
	
	string armorstr = "";
	string internalstr = "";
	string selectallstr = "";
	uint InternalsFont = Font.CR_PURPLE;
	uint ArmorFont = Font.CR_PURPLE;
	uint SelectFont = Font.CR_WHITE;
	int repair_cost = 0;
	MechHardpoint hp;
	
	if(hardpoint >= 0)
	{
		hp = mechplr.hardpoints.FindByIndex(hardpoint);
		armorstr = "ARMOR: ".. int(hp.armor) .. "/" .. int(hp.max_armor) .. " ("..int(hp.defmax_armor)..")";
		internalstr = "INTERNALS: ".. int(ceil(hp.internalhp)) .. "/" .. int(hp.max_internal);
		selectallstr = "Select All";
		ArmorFont = (hp.armor < hp.max_armor) ? Font.CR_DARKRED : Font.CR_WHITE;
		InternalsFont = (hp.internalhp < hp.max_internal) ? Font.CR_DARKRED : Font.CR_WHITE;
		if( astat_selected ==  0) ArmorFont = Font.CR_GREEN;
		if( astat_selected ==  1) InternalsFont = Font.CR_GREEN;
		if( astat_selected ==  2) SelectFont = Font.CR_GREEN;
		if( astat_selected != -1)
		{	
			if(astat_selected < 2)
				repair_cost = mechplr.CalculateHardpointRepairCost(hp,astat_selected);	
			else
				repair_cost = GetEntireRepairCost();
		}
	}
	
	float ap, ip;
	[ap, ip] = GetHardpointHealthPerc(mechplr.hardpoints);
	string armorpercent = ap.."";
	string internalpercent = ip.."";
	armorpercent.truncate(armorpercent.length()-6);
	internalpercent.truncate(internalpercent.length()-6);
	
	H_DrawString("Chassis: " .. mechplr.getChassisName(),detailpos);
	H_DrawString("Tonnage: " .. weapston .. "/" .. mechston,(detailpos.x,detailpos.y+25));
	H_DrawString("Engine: " .. enginetype,(detailpos.x,detailpos.y+50));
	H_DrawString("Heat Efficiency: " .. heateff,(detailpos.x,detailpos.y+75));
	H_DrawString("Max Speed: " .. maxspd .. "Kph",(detailpos.x,detailpos.y+100));
	H_DrawString("Armor Status: " .. armorpercent .. "%", (detailpos.x,detailpos.y+125));
	H_DrawString("Internals Status: " .. internalpercent .. "%", (detailpos.x,detailpos.y+150));
	
	float cbills_remain = mechplr.inv_context.money_cbills-repair_cost;
	if(cbills_remain < 0) cbills_remain = 0;
	
	H_DrawString("Funds: ".. mechplr.inv_context.money_cbills, cbillpos);
	H_DrawString("Price: ".. repair_cost, (cbillpos.x, cbillpos.y+25) );
	H_DrawString("Bal: ".. int(cbills_remain), (cbillpos.x, cbillpos.y+50) );
	
	// Draw Buttons
	String repair = (checkCollision(mouse,repairbtn)&&repair_cost) ?  tBtnlit_Repair     : tBtn_Repair;
	String util   = (checkCollision(mouse,autilbtn)&&autil_item)   ?  tBtnlit_EquipUtil  : tBtn_EquipUtil;
	String mode   =  checkCollision(mouse,modebtn) 				   ?  tBtnlit_WeaponsLab : tBtn_WeaponsLab;
	String plus = tBtn_Plus;
	String minus = tBtn_Minus;
	H_DrawImage(repair,(847,455));
	H_DrawImage(util,(1080,454));
	H_DrawImage(mode,(590,660));
	
	if( mstats.left_btn )
	{
		// Armor status selector
		if(hardpoint >= 0)
		{
			for (int i = 0; i < 3; i++)
			{
				Rect checkmouse;
				string compare = (i==0) ? armorstr : (i==1) ? internalstr : selectallstr;
				initRect(checkmouse,statuspos.x,statuspos.y+(i*25),16*compare.length(),20);
				// drawRect(checkmouse, debug_color);
				if( checkCollision(mouse, checkmouse) ) astat_selected = i;
			}
			
			if(checkCollision(mouse,autilbtn) && autil_item)
			{
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				MechDoomerEvents.SendNetworkEvent("autil_useitem:" .. autil_item.getClassName(),hardpoint);
				mstats.left_btn = false;
			}
			
			if( checkCollision(mouse,repairbtn) )
			{
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				mstats.left_btn = false;
				
				if(mechplr.isdead)
				{
					mechplr.A_PlaySound("UI/Error",CHAN_WEAPON);
					mechplr.sendHudAlert("Mech's reactor is completely \ndestroyed!\nUnable to initiate repair \nprocess.",Font.CR_DARKRED);	
					return;
				}
				if(!mechplr.mech_shutdown)
				{
					mechplr.A_PlaySound("UI/Error",CHAN_WEAPON);
					mechplr.sendHudAlert("Mech must be shutdown to initiate \nrepairs.",Font.CR_ORANGE);	
					return;
				}
				
				if(astat_selected != -1)
				{
					if(!repair_cost)  
					{
						mechplr.A_PlaySound("UI/Error",CHAN_WEAPON);
						mechplr.sendHudAlert("Nothing to repair.",Font.CR_ORANGE);	
						return;
					}
					if(astat_selected < 2) 
						MechDoomerEvents.SendNetworkEvent("repair_hardpoint", hardpoint, astat_selected);
					else
						RepairAllHardpoints();
				}
				else
				{
					mechplr.A_PlaySound("UI/Error",CHAN_WEAPON);
					mechplr.sendHudAlert("You must select a component to repair!",Font.CR_ORANGE);	
				}
			}
			
			if(checkCollision(mouse,plusbtn))
			{	
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				MechDoomerEvents.SendNetworkEvent("adjust_armor", hardpoint, 1);
				plus = tBtnlit_Plus;
				 mstats.left_btn = false;
			}
			if(checkCollision(mouse,minusbtn))
			{
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				MechDoomerEvents.SendNetworkEvent("adjust_armor", hardpoint, -1);
				minus = tBtnlit_Minus;
				mstats.left_btn = false;
			}	
		}	
		
		int php = hardpoint;
		if(checkCollision(mouse,rHD)) {hardpoint = 0; astat_selected=-1;}
		if(checkCollision(mouse,rCT)) {hardpoint = 1; astat_selected=-1;}
		if(checkCollision(mouse,rLT)) {hardpoint = 2; astat_selected=-1;}
		if(checkCollision(mouse,rRT)) {hardpoint = 3; astat_selected=-1;}
		if(checkCollision(mouse,rLA)) {hardpoint = 4; astat_selected=-1;}
		if(checkCollision(mouse,rRA)) {hardpoint = 5; astat_selected=-1;}
		if(checkCollision(mouse,rLL)) {hardpoint = 6; astat_selected=-1;}
		if(checkCollision(mouse,rRL)) {hardpoint = 7; astat_selected=-1;}
		if(php != hardpoint) mechplr.A_PlaySound("Mech/NextWeapon",CHAN_WEAPON);
	}
	
	if(hardpoint >= 0)
	{
		H_DrawImage(plus,(1130,170));
		H_DrawImage(minus,(1090,170));
	}
	
	// Draw hardpoint vitals
	H_DrawString(armorstr, statuspos,0,ArmorFont);
	H_DrawString(internalstr, (statuspos.x,statuspos.y+25), 0, InternalsFont);
	H_DrawString(selectallstr, (statuspos.x,statuspos.y+50), 0, SelectFont);
}
	