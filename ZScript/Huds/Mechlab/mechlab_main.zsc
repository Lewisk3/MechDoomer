extend class Mechlab_Menu;
// Variables
mw_InvInfo valid_inv_context;
MechHardpoints valid_hardpoints;
Mechbase_Weapon loadout_weapon;
String loadout_invweapon;
int hardpoint;  			  // Selected mechplr hardpoint
SelectedObject selected_item; // Selected item
int maxpageitems;

void setSelected(String tag, MechHardpoint location, class<Mechbase_Utility> util, class<Mechbase_Weapon> weap, class<Mechbase_Engine> eng, int index)
{
	selected_item.tag = tag;
	selected_item.location = location;
	selected_item.mUtil = util;
	selected_item.mWeapon = weap;
	selected_item.mEngine = eng;
	selected_item.index = index;
}
void clearSelected(bool test=true)
{
	if(!test) return;
	selected_item.tag = "";
	selected_item.mWeaponOBJ = null;
	selected_item.location = null;
	selected_item.mUtil = null;
	selected_item.mWeapon = null;
	selected_item.mEngine = null;
	selected_item.index = -1;
}
void updateSelected()
{
	if(selected_item.index+1 >= valid_inv_context.weapon_items.Size()) clearSelected();
	if(selected_item.index < 0) return;
	let item = valid_inv_context.weapon_items[selected_item.index+1];
	String weapname = item.Tag;
	class<Mechbase_Weapon> mw  = weapname;
	class<Mechbase_Utility> ut = weapname;
	class<Mechbase_Engine> eng = weapname;
	setSelected(weapname, null, ut, mw, eng, selected_item.index);
}
int Mechlab_GetInvSize()
{
	return mechmode ? mechplr.inv_context.mechs.Size() : mechplr.inv_context.weapon_items.Size();
}

void ProcessLoadoutButtons()
{
	// Force mechmode if dead.
	if(mechplr.isdead && !mechmode) mechmode = true;

	// Buttons and highlights
	H_DrawImage(tBtn_Scrap,  ( scrapbtn.x+61, scrapbtn.y+30),0);
	H_DrawImage(tBtn_Sort,   (  sortbtn.x+64,  sortbtn.y+30),0);
	H_DrawImage(tBtn_Shop,   (  shopbtn.x+57,  shopbtn.y+35),0);
	H_DrawImage(tBtn_ArmorAndRepair, (modebtn.x+125, modebtn.y+35),0);
	H_DrawImage(mechmode ? tBtn_Items : tBtn_Mechs, (invmodebtn.x+64,invmodebtn.y+30),0);
	
	if(mstats.left_btn && checkCollision(mouse,  scrapbtn)) H_DrawImage(tBtnlit_Scrap,  ( scrapbtn.x+62, scrapbtn.y+30 ),0);

	// Equip button graphics.
	if(!mechmode) H_DrawImage(tBtn_Equip,  ( equipbtn.x+61,  equipbtn.y+30),0);
	if(!mechmode && mstats.left_btn && checkCollision(mouse,  equipbtn)) 
		H_DrawImage(tBtnlit_Equip,  ( equipbtn.x+62, equipbtn.y+30 ),0);
	
	// Dequip or Deploy button graphics.
	H_DrawImage(mechmode ? tBtn_Deploy : tBtn_Dequip, (dequipbtn.x+62,dequipbtn.y+33),0);
	if(mstats.left_btn && checkCollision(mouse, dequipbtn)) 
		H_DrawImage(mechmode ? tBtnlit_Deploy : tBtnlit_Dequip, (dequipbtn.x+62, dequipbtn.y+33),0);
	
	// Hover-Over buttons
	if(checkCollision(mouse, invmodebtn) && !mechplr.isdead) 
		H_DrawImage(mechmode ? tBtnlit_Items : tBtnlit_Mechs,(invmodebtn.x+64,invmodebtn.y+30),0);
	if(checkCollision(mouse, sortbtn)) 
		H_DrawImage(tBtnlit_Sort,   ( sortbtn.x+64,  sortbtn.y+31),0);
	if(checkCollision(mouse, modebtn))
		H_DrawImage(tBtnlit_ArmorAndRepair, (  modebtn.x+125,  modebtn.y+35),0);
	if(checkCollision(mouse, shopbtn) )
		H_DrawImage(tBtnlit_Shop, (shopbtn.x+57,shopbtn.y+35),0);
	
	// Scroll
	if(mstats.scroll == -1 && invoffset-1 > -1){ mstats.scroll = 0;  invoffset--; }
	if(mstats.scroll ==  1 && invoffset+maxpageitems < Mechlab_GetInvSize()){ mstats.scroll = 0;  invoffset++; }

	
	if( mstats.left_btn )
	{	
		// Selection buttons
		int php = hardpoint;
		bool doclear = selected_item.location!=NULl;
		if(checkCollision(mouse,rHD)) {hardpoint = 0; clearSelected(doclear);}
		if(checkCollision(mouse,rCT)) {hardpoint = 1; clearSelected(doclear);}
		if(checkCollision(mouse,rLT)) {hardpoint = 2; clearSelected(doclear);}
		if(checkCollision(mouse,rRT)) {hardpoint = 3; clearSelected(doclear);}
		if(checkCollision(mouse,rLA)) {hardpoint = 4; clearSelected(doclear);}
		if(checkCollision(mouse,rRA)) {hardpoint = 5; clearSelected(doclear);}
		if(checkCollision(mouse,rLL)) {hardpoint = 6; clearSelected(doclear);}
		if(checkCollision(mouse,rRL)) {hardpoint = 7; clearSelected(doclear);}
		if(hardpoint != php) mechplr.A_PlaySound("Mech/NextWeapon",CHAN_WEAPON);
		
		// Shop
		if(checkCollision(mouse,shopbtn)) 
		{
			HUD_ChangePageRelative(2);
			mstats.left_btn = false;
		}
		
		// Change mode - Mechs or Items
		if(checkCollision(mouse,invmodebtn) && !mechplr.isdead) 
		{
			clearSelected();
			mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
			mstats.left_btn = false;
			mechmode = !mechmode;
			if(!mechmode) 
			{
				valid_inv_context = mechplr.inv_context;
				valid_hardpoints = mechplr.hardpoints;
			}
		}
		
		// Sort
		if(checkCollision(mouse,sortbtn)) 
		{
			mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
			if(!mechmode)
				MechDoomerEvents.SendNetworkEvent("sort_inv");
			else
				MechDoomerEvents.SendNetworkEvent("sort_mechs");
			mstats.left_btn = false;
		}
		
		// Scrap
		if(checkCollision(mouse,scrapbtn) && !selected_item.location )
		{
			if(selected_item.index > -1)
			{
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				if(!mechmode)
				{
					int amt = valid_inv_context.weapon_items[selected_item.index].amt;
					MechDoomerEvents.SendNetworkEvent("remove_inv",selected_item.index);
					if(amt-1 < 0) clearSelected();
				}
				else
				{
					String mechname = mechplr.GetPrintableDisplayName(mechplr.inv_context.mechs[selected_item.index].baseclass);
					mechplr.sendHudAlert("Sold mech: \n"..mechname, Font.CR_DARKRED);
					MechDoomerEvents.SendNetworkEvent("sell_mech",selected_item.index);
					clearSelected();
				}
				mstats.left_btn = false;
			}
		}
		
		// Hardpoint isn't valid. Do not proceed.
		if(hardpoint < 0) return;
		
		// Hardpoint safe check
		if( !mechmode && !ValidateHardpoint(hardpoint) && ( checkCollision(mouse,dequipbtn) || checkCollision(mouse,equipbtn) ) ) 
		{
			mechplr.A_PlaySound("UI/Error",CHAN_WEAPON);
			mechplr.sendHudAlert("Hardpoint is destroyed!", Font.CR_DARKRED);
			return;
		}
		
		// Dequip
		if(checkCollision(mouse,dequipbtn)) 
		{
			if(selected_item.index > -1)
			{
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				mstats.left_btn = false;
				
				if(!mechmode && selected_item.location)
				{
					if(selected_item.mWeaponOBJ) MechDoomerEvents.SendNetworkEvent("move_weapinv",selected_item.mWeaponOBJ.WeaponID);
					if(selected_item.mUtil	   ) MechDoomerEvents.SendNetworkEvent("movestruct_weapinv",selected_item.index);
				}
				else if(mechmode)
				{
					// TODO: Switch mech logic, require mech shutdown.
					if(!mechplr.mech_shutdown)
					{
						mechplr.A_PlaySound("UI/Error",CHAN_WEAPON);
						mechplr.sendHudAlert("Active mech must be shutdown\nfirst!",Font.CR_ORANGE);	
						return;
					}
					MechDoomerEvents.SendNetworkEvent("exchange_mech",selected_item.index);
					CloseMechlab();
				}
				clearSelected();
			}
		}
		
		// Equip
		if(!mechmode && checkCollision(mouse,equipbtn) && !selected_item.location) 
		{
			if(selected_item.index > -1)
			{
				mechplr.A_PlaySound("UI/PressButton",CHAN_WEAPON);
				int amt = valid_inv_context.weapon_items[selected_item.index].amt;
				if(selected_item.mWeapon) MechDoomerEvents.SendNetworkEvent("equip_invweap",selected_item.index,hardpoint);
				if(selected_item.mUtil  ) MechDoomerEvents.SendNetworkEvent("equip_structinvweap",selected_item.index,hardpoint);
				if(amt-1 < 0) 
				{
					updateSelected();
				}
				mstats.left_btn = false;
			}
		}
	}
}

void drawLoadoutBody(int sx, int sy, int ind)
{
	vector2 mechparts = (987, 753);
	
	uint fontcol = Font.CR_WHITE;
	if( !ValidateHardpoint(ind) ) fontcol = Font.CR_DARKRED;
	uint flags = MD_SBS.SS_SCREEN_CENTER;

	switch(ind)
	{ 
		Case 0: // HD
			H_DrawImage(tMech_Head,mechparts,0);
			H_DrawString("Head",(sx,sy),flags,fontcol);
		break;
		Case 1: // CT
			H_DrawImage(tMech_CTorso,mechparts,0);
			H_DrawString("Center Torso",(sx,sy),flags,fontcol);
		break;
		Case 2: // LT
			H_DrawImage(tMech_LTorso,mechparts,0);
			H_DrawString("Left Torso",(sx,sy),flags,fontcol);
		break;
		Case 3: // RT
			H_DrawImage(tMech_RTorso,mechparts,0);
			H_DrawString("Right Torso",(sx,sy),flags,fontcol);
		break;
		Case 4: // LA
			H_DrawImage(tMech_LArm,mechparts,0);
			H_DrawString("Left Arm",(sx,sy),flags,fontcol);
		break;
		Case 5: // RA
			H_DrawImage(tMech_RArm,mechparts,0);
			H_DrawString("Right Arm",(sx,sy),flags,fontcol);
		break;
		Case 6: // LL
			H_DrawImage(tMech_LLeg,mechparts,0);
			H_DrawString("Left Leg",(sx,sy),flags,fontcol);
		break;
		Case 7: // RL
			H_DrawImage(tMech_RLeg,mechparts,0);
			H_DrawString("Right Leg",(sx,sy),flags,fontcol);
		break;
		default:
		break;
	}
}

void drawInfoLine(String txt, int inline, int linesize=25, vector2 detailpos=(280,90))
{
	H_DrawString(txt,(detailpos.x,detailpos.y+(linesize*inline)));
}

void drawLoadoutItemInfo()
{	
	if(mechmode) return;
	if(selected_item.index < 0) return;

	mw_InvStruct item;
	if(!selected_item.location)
	{
		item = valid_inv_context.weapon_items[selected_item.index];
		if(selected_item.mWeapon)
		{
			class<Mechbase_Weapon> invweap = selected_item.mWeapon;
			String wtons = GetDefaultByType(invweap).weight.."";
			let weaptypedefs = GetDefaultByType(GetDefaultByType(invweap).weapType);
			String wheat = weaptypedefs.heatgen .. "";
			wtons.truncate(wtons.Length()-4);
			wheat.truncate(wheat.Length()-4);
			drawInfoLine("Name: " .. selected_item.Tag, 0);
			drawInfoLine("Damage: " .. weaptypedefs.truedamage,1);
			drawInfoLine("Heat: " .. wheat,2);
			drawInfoLine("Nickname: " .. GetDefaultByType(invweap).displayName, 3);
			drawInfoLine("Sell Value: " .. GetDefaultByType(invweap).worth, 4);
			drawInfoLine("Weight: " .. wtons .. " tons", 5);
			drawInfoLine("Criticals: " .. GetDefaultByType(invweap).hardslots, 6);
		}
	}
	else
	{
		item = valid_inv_context.mechstructs[selected_item.index];
		if(selected_item.mWeapon && selected_item.mWeaponOBJ)
		{
			Mechbase_Weapon weap = selected_item.mWeaponOBJ;
			let weaptypedefs = GetDefaultByType(weap.weapType);
			String wheat = weaptypedefs.heatgen .. "";
			String wtons = weap.weight .. "";
			wtons.truncate(wtons.Length()-4);
			wheat.truncate(wheat.Length()-4);
			drawInfoLine("Name: " .. weap.GetClassName(),0);
			drawInfoLine("Damage: " .. weaptypedefs.truedamage,1);
			drawInfoLine("Heat: " .. wheat,2);
			drawInfoLine("Nickname: " .. weap.displayName,3); 
			drawInfoLine("Sell Value: " .. weap.worth,4);
			drawInfoLine("Weight: " .. wtons .. " tons",5);
			drawInfoLine("Criticals: " .. weap.hardslots,6);
		}
	}
	
	if(item && !selected_item.mWeapon)
	{
		// Engine Descriptions
		let eng = valid_inv_context.engine;
		if(selected_item.mEngine && eng && selected_item.location)
		{
			int i = 0;
			for(i = 0; i < eng.description.Size(); i++) drawInfoLine(eng.description[i],i);
			string spd = ""..mechplr.EngineGetKPH();
			spd.truncate(spd.Length()-4);
			drawInfoLine("Run Speed: "..spd.."KPH",i);
			return;
		}
		
		// Standard Descriptions
		int i = 0;
		for(i = 0; i < item.description.Size(); i++) drawInfoLine(item.description[i],i);
	
		// Real-Time Descriptions
		class<Mechbase_Engine> iteng = item.Tag;
		if(iteng)
		{
			String dname;
			int non, type;
			[dname, type, non, non, non] = Mechbase_Engine.GetBasics(iteng);
			string spd = ""..mechplr.EngineGetKPH(type);
			spd.truncate(spd.Length()-4);
			drawInfoLine("Run Speed: "..spd.."KPH",i);
		}
		class<Mechbase_Ammo> am = item.Tag;
		if(am) drawInfoLine("Ammunition: "..item.ammunition,i);
	}
}

void drawMechlabInfo()
{
	H_DrawImage(mechmode ? tMainMechs : tMain, (0,0), MD_SBS.SS_SCREEN_CENTER, (1.0,1.0) );
	ProcessLoadoutButtons();
	double ap, ip;
	[ap, ip] = GetHardpointHealthPerc(mechplr.hardpoints);
	
	double movespd = mechplr.CheckCompensative() ? double(mechplr.MoveSpeedKPH) * mechplr.overfactor : mechplr.MoveSpeedKPH;
	String weapston = MDMath.GetPrintableFloat(mechplr.inv_context.weapons_tonnage);
	String mechston = MDMath.GetPrintableFloat(mechplr.mech_tonnage);
	String armston  = MDMath.GetPrintableFloat(mechplr.inv_context.armor_tonnage);
	String heateff  = MDMath.GetPrintableFloat(mechplr.HeatEfficiency*35,2);
	String maxspd   = MDMath.GetPrintableFloat(movespd,2);
	string armorpercent    = String.Format("%d", floor(ap));
	string internalpercent = String.Format("%d", floor(ip));
	string enginetype = mechplr.inv_context.engine ? mechplr.inv_context.engine.displayName : "INVALID ENGINE";
	enginetype.truncate(enginetype.Length()-7);
	
	vector2 detailpos = mechmode ? (300,111) : (300,415);
	
	H_DrawString("- Active Mech -", detailpos);
	H_DrawString("Chassis: " .. mechplr.getChassisName(),(detailpos.x,detailpos.y+25));
	H_DrawString("Tonnage: " .. weapston .. "/" .. mechston,(detailpos.x,detailpos.y+50));
	H_DrawString("Armor: " .. armston .. " tons",(detailpos.x,detailpos.y+75));
	H_DrawString("Engine: " .. enginetype,(detailpos.x,detailpos.y+100));
	H_DrawString("Heat Efficiency: " .. heateff,(detailpos.x,detailpos.y+125));
	H_DrawString("Max Speed: " .. maxspd .. "Kph",(detailpos.x,detailpos.y+150));
	H_DrawString("Slots free: " .. mechplr.hardpoints.getTotalFreeSlots(),(detailpos.x,detailpos.y+175));
	H_DrawString("Armor Status: " .. armorpercent .. "%", (detailpos.x,detailpos.y+200));
	H_DrawString("Internals Status: " .. internalpercent .. "%", (detailpos.x,detailpos.y+225));
	
	if(mechmode) 
	{
		H_DrawString("Worth: " .. int(mechplr.worth/2),(detailpos.x,detailpos.y+250));
		H_DrawString("- Selected Mech -", (detailpos.x,detailpos.y+285));
	}
	if(mechmode && selected_item.index >= 0)
	{
		let mech = mechplr.inv_context.mechs[selected_item.index];
		if(!mech) return;
		let mechdefs = GetDefaultByType(mech.baseclass);
		[ap, ip] = GetHardpointHealthPerc(mech.inv_context.hardpoints);
		
		armorpercent = ap.."";
		internalpercent = ip.."";
		weapston = (mech.inv_defs.weapons_tonnage .. "");
		armston = (mech.inv_defs.armor_tonnage .. "");
		mechston = (mechdefs.mech_tonnage .. "");
		heateff = mech.inv_defs.heateff*35 .. "";
		maxspd = mech.inv_defs.MoveSpeedKPH .. "";
		enginetype = mech.inv_defs.engine ? mech.inv_defs.engine.displayName : "INVALID ENGINE";
		
		maxspd.truncate(maxspd.Length()-4);
		weapston.truncate(weapston.length()-3);
		armston.truncate(armston.length()-3);
		heateff.truncate(heateff.Length()-3);
		mechston.truncate(mechston.length()-3);
		enginetype.truncate(enginetype.Length()-7);
		armorpercent.truncate(armorpercent.length()-6);
		internalpercent.truncate(internalpercent.length()-6);
		
		detailpos = (300,295);
		H_DrawString("Chassis: " .. mechdefs.getClassName(),(detailpos.x,detailpos.y+125));
		H_DrawString("Tonnage: " .. weapston .. "/" .. mechston,(detailpos.x,detailpos.y+150));
		H_DrawString("Armor: " .. armston .. " tons",(detailpos.x,detailpos.y+175));
		H_DrawString("Engine: " .. enginetype,(detailpos.x,detailpos.y+200));
		H_DrawString("Heat Efficiency: " .. heateff,(detailpos.x,detailpos.y+225));
		H_DrawString("Max Speed: " .. maxspd .. "Kph",(detailpos.x,detailpos.y+250));
		H_DrawString("Slots free: " .. mech.inv_context.hardpoints.getTotalFreeSlots(),(detailpos.x,detailpos.y+275));
		H_DrawString("Armor Status: " .. armorpercent .. "%", (detailpos.x,detailpos.y+300));
		H_DrawString("Internals Status: " .. internalpercent .. "%", (detailpos.x,detailpos.y+325));
		H_DrawString("Worth: " .. int(mechdefs.worth/2),(detailpos.x,detailpos.y+350));
	}

	drawLoadoutItemInfo();
	
	if(invoffset > 0)H_DrawImage(tInv_ArrowUp,(1404,163),0);
	if(invoffset+maxpageitems < Mechlab_GetInvSize()) H_DrawImage(tInv_ArrowDown,(1404,974),0);
}


// Inventory
void drawInventory(int px, int py, int start, int max)
{
	max = start+max > Mechlab_GetInvSize() ? Mechlab_GetInvSize() : start+max;
	for(int i = start; i < max; i++)
	{
		if(!mechmode)
		{
			let item = mechplr.inv_context.weapon_items[i];
			String weapname = item.Tag;
			class<Mechbase_Weapon> mw  = weapname;
			class<Mechbase_Utility> ut = weapname;
			class<Mechbase_Engine> eng = weapname;
			
			Rect checkmouse;
			initRect(checkmouse,px-65,py+((i-start)*25)+5,16*(weapname.Length()+3),17);
			// drawRect(checkmouse,debug_color);
	
			int slots = ut ? GetDefaultByType(ut).hardslots : GetDefaultByType(mw).hardslots;
			int sely = (i-start)*25;

			int fcr = eng ? Font.CR_ORANGE : ut ? Font.CR_DARKGRAY : Font.CR_WHITE;
			if(i == selected_item.index && !selected_item.location) 
			{
				fcr = selected_item.mEngine ? Font.CR_GREEN : selected_item.mUtil ? Font.CR_SAPPHIRE : Font.CR_DARKRED;  
			}
			if(mstats.left_btn && checkCollision(mouse,checkmouse)) 
			{
				clearSelected();
				setSelected(weapname, null, ut, mw, eng, i);
			}
			string displayName = eng ? MechBase_Engine.GetRealName(eng) : weapname .. "(#"..slots..")";
			if(item.amt > 0) displayName = displayName .. " x" .. item.amt+1;
			H_DrawString(displayName, (px-68,py+sely),0,fcr);
			if(ut && !GetDefaultByType(ut).moveable)H_DrawString("ERROR: Immoveable Item!", (px-68,py+sely),0,Font.CR_DARKRED);	
		}
		else
		{
			let mech = mechplr.inv_context.mechs[i];
			let mechdefs = GetDefaultByType(mech.baseclass);
			String mechname = mechplr.GetPrintableDisplayName(mech.baseclass);
			Rect checkmouse;
			initRect(checkmouse,px-65,py+((i-start)*25)+5,16*(mechname.Length()+3),17);
			// drawRect(checkmouse,debug_color);
			
			int sely = (i-start)*25;
			int fcr = (i == selected_item.index) ? Font.CR_GREEN : Font.CR_WHITE;
			
			if(mstats.left_btn && checkCollision(mouse,checkmouse)) 
			{
				clearSelected();
				setSelected(mechname, null, null, null, null, i);
				valid_inv_context = mech.inv_context;
				valid_hardpoints = mech.inv_context.hardpoints;
			}
			H_DrawString(mechname, (px-68,py+sely),0,fcr);
		}
	}
}

// Hardpoints
vector2 DrawCriticalHardpointItems(int ind, int sx, int sy)
{
	MechHardpoint hp = valid_hardpoints.FindByIndex(ind);
	vector2 offs = (0,0);
	for(int i = 0; i < valid_inv_context.mechstructs.Size(); i++)
	{
		class<Mechbase_Utility> ut = valid_inv_context.mechstructs[i].Tag;
		class<StructEngine> eng = valid_inv_context.mechstructs[i].Tag;
		if(ut)
		{
			let def_ut = GetDefaultByType(ut);
			
			if(valid_inv_context.mechstructs[i].hardpoint == hp && !def_ut.moveable)
			{
				if(eng && valid_inv_context.engine)
				{
					bool eng_moveable = valid_inv_context.engine.moveable;
					int fcr = (eng && eng_moveable) ? Font.CR_FIRE : Font.CR_DARKRED;
					for(int s = 0; s < def_ut.hardslots; s++)
					{	
						if(selected_item.mEngine && selected_item.location && eng && eng_moveable) fcr = Font.CR_BLUE;	
						Rect checkmouse;
						initRect(checkmouse,sx,sy+offs.x-10,14*(def_ut.displayName.Length()+3),15);
						// drawRect(checkmouse,Color(255,255,64,64));
						if(mstats.left_btn && checkCollision(mouse,checkmouse) && eng && !mechmode && eng_moveable) 
						{	
							setSelected(ut.getClassName(), hp, ut, null, valid_inv_context.engine.ClassType, i);
						}
						if(valid_inv_context.mechstructs[i].broken) fcr = Font.CR_TAN;
						H_DrawString(def_ut.displayName, (sx,sy+offs.y-15),0,fcr);
					}
				}
				else
				{
					int fcr = Font.CR_DARKRED;
					for(int s = 0; s < def_ut.hardslots; s++)
					{	
						if(valid_inv_context.mechstructs[i].broken) fcr = Font.CR_TAN;
						H_DrawString(def_ut.displayName, (sx,sy+offs.y-15),0,fcr);
					}
				}
				offs.y += 24;
				offs.x += 24;
			}
		}
	}
	return offs;
}
void DrawHardpointItems(int ind, int sx, int sy)
{
	if(mechmode && selected_item.index < 0) return;
	MechHardpoint hp = valid_hardpoints.FindByIndex(ind);
	vector2 offs = (0,0);
	
	int slottranslation = Font.CR_GRAY;
	
	// Display slot numbers
	for(int i = 0; i < hp.maxslots; i++)
	{
		offs.y += 24;
		if( i < hp.slots) { slottranslation =Font.CR_DARKRED; } else { slottranslation = Font.CR_GRAY; }
		H_DrawString((i+1)..". ", (sx-45,sy+offs.y-38),0,slottranslation);
	}
	// Display structures
	offs = DrawCriticalHardpointItems(ind,sx,sy);
	for(int i = 0; i < valid_inv_context.mechstructs.Size(); i++)
	{
		class<Mechbase_Utility> ut = valid_inv_context.mechstructs[i].Tag;
		class<Mechbase_Ammo> am = valid_inv_context.mechstructs[i].Tag;
		if(ut)
		{
			let def_ut = GetDefaultByType(ut);
			if(valid_inv_context.mechstructs[i].hardpoint == hp && def_ut.moveable)
			{
				
				int fcr = am ? Font.CR_PURPLE : Font.CR_DARKGRAY;
				for(int s = 0; s < def_ut.hardslots; s++)
				{	
					if(i == selected_item.index && selected_item.mUtil && selected_item.location)fcr = Font.CR_GREEN;
					String suffix = def_ut.hardslots > 1 ? " (#" .. s+1 .. ")" : "";
					Rect checkmouse;
					initRect(checkmouse,sx,sy+offs.x-10,14*(def_ut.displayName.Length()+suffix.Length()+3),15);
					// drawRect(checkmouse,Color(255,128,128,128));
					if(mstats.left_btn && checkCollision(mouse,checkmouse) && !mechmode) 
					{	
						clearSelected();
						setSelected(ut.getClassName(), hp, ut, null, null, i);
					}
					H_DrawString(def_ut.displayName .. suffix, (sx,sy+offs.y-15),0,fcr);
					offs.y += 24;
					offs.x += 24;
				}
			}
		}
	}
	// Display weapons
	if(!mechmode)
	{
		int wind = 0;
		for(let w = mechplr.Inv; w; w = w.Inv)
		{
			let ww = Mechbase_Weapon(w);
			if(ww)
			{
				if(ww.hardpoint == hp)
				{
					int fcr = (wind == selected_item.index && selected_item.mWeapon && selected_item.location) ? Font.CR_YELLOW : Font.CR_WHITE;
					for(int i = 0; i < ww.hardslots; i++)
					{							
						String suffix = "";
						if(ww.hardslots > 1)suffix = " (#" .. i+1 .. ")";
						Rect checkmouse;
						String weapname = ww.GetClassName();
						initRect(checkmouse,sx,sy+offs.x-10,14*(weapname.Length()+suffix.Length()+4),15);
						// drawRect(checkmouse,Color(255,255,255,128));
						if(mstats.left_btn && checkCollision(mouse,checkmouse)) 
						{ 
							clearSelected();
							setSelected(weapname, hp, null, ww.getClassName(), null, wind);
							selected_item.mWeaponOBJ = ww; 
						}
						H_DrawString(ww.GetClassName() .. suffix, (sx,sy+offs.y-15),0,fcr);
						offs.y += 24;
						offs.x += 24;
					}
					wind++;
				}
			}
		}
	}
	else if(selected_item.index >= 0)
	{
		int wind = 0;
		for(int i = 0; i < mechplr.inv_context.mechs[selected_item.index].active_weapons.Size(); i++)
		{
			mw_StoredWeapon ww = mechplr.inv_context.mechs[selected_item.index].active_weapons[i];
			if(ww.hardpoint == hp)
			{
				int fcr = Font.CR_WHITE;
				let wwdefs = GetDefaultByType(ww.baseclass);
				for(int i = 0; i < wwdefs.hardslots; i++)
				{							
					String suffix = "";
					if(wwdefs.hardslots > 1)suffix = " (#" .. i+1 .. ")";
					H_DrawString(ww.Tag .. suffix, (sx,sy+offs.y-15),0,fcr);
					offs.y += 24;
					offs.x += 23;
				}
				wind++;
			}
		}
	}
}