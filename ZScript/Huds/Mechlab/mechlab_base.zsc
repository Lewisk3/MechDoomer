extend class Mechlab_Menu;

// Scalar functions (All H_ function auto adjust to the screen resolution based on 1080p coords.)	
mixin HUDScaleFunctions;

// Rect utilities
vector2, vector2 GetActualRectPos(Rect r)
{
	vector2 pos0, pos1;
	pos0 = MD_SBS.GetRelativePos( (r.x,r.y) );
	pos1 = MD_SBS.GetRelativePos( (r.x+r.w,r.y+r.h) );
	return pos0, pos1;
}
void initRect(Rect r, double x, double y, double w, double h)
{
	r.x = x;
	r.y = y;
	r.w = w;
	r.h = h;
}
void drawRect( Rect r, Color c, bool absolute=false )
{
	if(!absolute)
	{
		H_DrawLine(r.x,     r.y,     r.x+r.w, r.y+r.h, c);  //: \
		H_DrawLine(r.x,     r.y,     r.x+r.w, r.y,     c);  //: -
		H_DrawLine(r.x,     r.y+r.h, r.x+r.w, r.y+r.h, c);  //: _
		H_DrawLine(r.x,     r.y,     r.x,     r.y+r.h, c);  //: |
		H_DrawLine(r.x+r.w, r.y,     r.x+r.w, r.y+r.h, c);  //:  |
	}
	else
	{
		Screen.DrawLine(r.x,     r.y,     r.x+r.w, r.y+r.h, c);  //: \
		Screen.DrawLine(r.x,     r.y,     r.x+r.w, r.y,     c);  //: -
		Screen.DrawLine(r.x,     r.y+r.h, r.x+r.w, r.y+r.h, c);  //: _
		Screen.DrawLine(r.x,     r.y,     r.x,     r.y+r.h, c);  //: |
		Screen.DrawLine(r.x+r.w, r.y,     r.x+r.w, r.y+r.h, c);  //:  |
	}
}
bool checkCollision( Rect one, Rect two )
{
	vector2 a0, a1, b0, b1;
	a0 = (one.x, one.y);
	a1 = (one.x+one.w, one.y+one.h);
	[b0, b1] = GetActualRectPos(two);
	
	bool collision;
		
	collision = (a0.x < b1.x && a1.x > b0.x && a0.y < b1.y && a1.y > b0.y);
	
	Color c = collision ? Color(255,255,0,0) : debug_color;
	
	//drawRect(one, c, true);
	//drawRect(two, c);

	return collision;
}

void CloseMechlab()
{
	MechDoomerEvents.SendNetworkEvent("close_mechlab");
	Close();
}

bool CheckActiveMech()
{
	if(!mechplr.inv_context.engine) return true;
	return mechplr.inv_context.engine && mechplr.inv_context.engine.model != EngineDatabase.Type_Organic;
}

virtual bool CheckUIKey(int KeyChar, String KeyBind)
{
	Array<int> keycodes;
	Array<String> allkeys;
	String keynames;
	
	Bindings.GetAllKeysForCommand(keycodes, KeyBind);
	if(keycodes.Size() > 0)
	{
		keynames = Bindings.NameAllKeys(keycodes);
		keynames.Replace(" ", "");
		keynames.Replace("-", "");
		keynames.Replace("KP", "");
		keynames.Split(allkeys, "\c");
		String ckey = String.Format("%c", KeyChar);
		ckey.MakeUpper();
		for(int i = 0; i < allkeys.Size(); i++)
		{
			if(ckey == allkeys[i])
				return true;
		}
	}
	return false;
}

// Controls
override bool OnUIEvent(UiEvent ev)
{
	kstats.shift_down = ev.IsShift;
	if(ev.KeyChar == ui_closekey) CloseMechlab(); 
	if(ev.Type == UIEvent.Type_Char)
	{
		if(CheckUIKey(ev.KeyChar, "menu:mechlab_scrapitem"))
			kstats.key_scrap = true;
	}
	
	if(ev.Type == UIEvent.Type_MouseMove)
	{
		mpos.x = ev.MouseX;
		mpos.y = ev.MouseY;
		mouse.x = mpos.x;
		mouse.y = mpos.y;
		mstats.left_pressed = false;
		mstats.right_pressed = false;
		kstats.key_scrap = false;
	}

	if(ev.Type == UIEvent.Type_RButtonDown) mstats.right_btn = true;
	if(ev.Type == UIEvent.Type_RButtonUp  ) 
	{
		if(mstats.right_btn) mstats.right_pressed = true;
		mstats.right_btn = false;
	}
	if(ev.Type == UIEvent.Type_LButtonDown) 
	{
		if(!mstats.left_btn) mstats.left_pressed  = true;
		mstats.left_btn  = true;
	}
	if(ev.Type == UIEvent.Type_LButtonUp  ) 
	{
		mstats.left_btn = false;
	}
	if(ev.Type == UIEvent.Type_WheelUp  ) mstats.scroll = -1;
	if(ev.Type == UIEvent.Type_WheelDown) mstats.scroll = 1;
	
	return false;
}
override bool MenuEvent (int mkey, bool fromcontroller)
{
	switch (mkey)
	{
	case MKEY_Back:
		CloseMechlab();
		return true;
	}
	return false;
}

// Misc
void HUD_ChangePageRelative(int offs)
{
	mechplr.S_StartSound("UI/PressButton",CHAN_WEAPON);
	mstats.left_btn = false;
	mstats.right_btn = false;
	hud_page += offs;
	page_init = false;
}