
struct MouseStatus
{
	bool left_btn;
	bool right_btn;
	bool left_pressed;
	bool right_pressed;
	int scroll;
}

struct SelectedObject
{	
	Name tag;
	int index;
	MechHardpoint location;
	Mechbase_Weapon mWeaponOBJ;
	class<Mechbase_Weapon>  mWeapon;
	class<Mechbase_Utility> mUtil;
	class<Mechbase_Engine>  mEngine;
}

class Mechlab_Menu : GenericMenu
{
	// Structs
	MouseStatus mstats;
	Vector2 mpos;
	Mechwarrior mechplr;
	FadingText plrHudMessage;
	ArmoryUtility autil_item;
	
	// Textures
	String tMain, tMainMechs;
	String tMech_Head, tMech_RTorso, tMech_CTorso, tMech_LTorso, tMech_RArm,
			  tMech_LArm, tMech_RLeg, tMech_LLeg, 
		   tMechInt_Head, tMechInt_RTorso, tMechInt_CTorso, tMechInt_LTorso, tMechInt_RArm,
			  tMechInt_LArm, tMechInt_RLeg, tMechInt_LLeg;
			  
	String tInv_ArrowUp, tInv_ArrowDown;
	String tBtn_Sort, tBtn_Scrap, tBtn_Equip, tBtn_Dequip,
			  tBtnlit_Sort, tBtnlit_Scrap, tBtnlit_Equip, tBtnlit_Dequip,
			  tBtn_Shop, tBtnlit_Shop, tBtn_Items, tBtnlit_Items,
			  tBtn_Mechs, tBtnlit_Mechs, tBtn_Deploy, tBtnlit_Deploy;
			  
	String tBtn_WeaponsLab, tBtn_ArmorAndRepair, tBtnlit_WeaponsLab,
			  tBtnlit_ArmorAndRepair;
			  
	String tBtn_Highlight, tMessageBox;
	// Armory
	String tArmory, tBtn_Repair, tBtnlit_Repair, tBtn_EquipUtil, 
			  tBtnlit_EquipUtil, tBtn_Plus, tBtnlit_Plus, tBtn_Minus,
			  tBtnlit_Minus;
	// Shop
	String tShop, tBtn_BuyItem, tBtnlit_BuyItem, 
			  tBtn_BuyMech, tBtnlit_BuyMech, tBtn_Energy, tBtnlit_Energy,
			  tBtn_Ballistic, tBtnlit_Ballistic, tBtn_Missiles, tBtnlit_Missiles,
			  tBtn_Ammo, tBtnlit_Ammo, tBtn_Engines, tBtnlit_Engines, 
			  tBtn_MechsMode, tBtnlit_MechsMode, tBtn_All, tBtnlit_All, tBtn_Light, 
			  tBtnlit_Light, tBtn_Medium, tBtnlit_Medium, tBtn_Heavy, tBtnlit_Heavy,
			  tBtn_Assault, tBtnlit_Assault;
	
	// Bools
	bool page_init;
	bool messagebox_active;
	
	// Ints
	int hud_page;
	int page_offs;
	int defwidth;
	int defheight;
	int inputclear;
	int infomode;
	int invoffset;
	int ui_closekey;
	
	// doubles
	double messagepos_yscale; // Messagebox slide
	
	// Rectangles
	Color debug_color;
	Rect mouse, rHD, rCT, rLT, rRT, rLA, rRA, rLL, rRL, weapbox, invbox, 
		 equipbtn, dequipbtn, scrapbtn, sortbtn, modebtn, autilbtn, repairbtn,
		 plusbtn, minusbtn, buyitembtn, buymechbtn, energybtn, ballisticbtn,
		 missilesbtn, ammobtn, enginesbtn, mechsmodebtn, shopbtn, invmodebtn;
	
	// Fonts
	HUDFont mHUDFont;
	Font mFont;
	vector2 font_scale;
	
	// Actual Menu
	void Init(Menu parent, Mechwarrior CPlayer, int CloseKey)
	{
		//statusbar.SetSize(32, 320, 200);
		menuactive = OnNoPause;
		mParentMenu = parent;
		mechplr = CPlayer;
		mMouseCapture = true;
		mBackbuttonSelected = false;
		DontDim = false;
		debug_color = Color(255,230,16,230);
		defwidth = 1920;
		defheight = 1080;
		ui_closekey = CloseKey;
		clearSelected();
		font_scale = ( 0.65, 0.65 );
		
		valid_hardpoints = mechplr.hardpoints;
		valid_inv_context = mechplr.inv_context;
		
		hud_page = 0;  // Mechlab Page, Armory Page or Shop Page
		
		// Multi-purpose
		tMessageBox    = "HMESSBG";
		tInv_ArrowUp   		   = "HUDARW";
		tInv_ArrowDown         = "HUDARWD";
		tBtn_WeaponsLab 	   = "BTWEAPL";
		tBtn_ArmorAndRepair    = "BTPAGE2";
		tBtn_Highlight  	   = "BTNBOX";
		tBtnlit_ArmorAndRepair = "BLPAGE2";
		tBtnlit_WeaponsLab     = "BLWEAPL";
		// Main
		tMain      	    = "LOADMHUD";
		tMainMechs 	    = "LOADHUD2";
		tMech_Head      = "LMHUD_HD";
		tMech_LTorso    = "LMHUD_LT";
		tMech_CTorso    = "LMHUD_CT";
		tMech_RTorso    = "LMHUD_RT";
		tMech_LArm      = "LMHUD_LA";
		tMech_RArm      = "LMHUD_RA";
		tMech_LLeg      = "LMHUD_LL";
		tMech_RLeg      = "LMHUD_RL";
		tMechInt_Head   = "LMINT_HD";
		tMechInt_LTorso = "LMINT_LT";
		tMechInt_CTorso = "LMINT_CT";
		tMechInt_RTorso = "LMINT_RT";
		tMechInt_LArm   = "LMINT_LA";
		tMechInt_RArm   = "LMINT_RA";
		tMechInt_LLeg   = "LMINT_LL";
		tMechInt_RLeg   = "LMINT_RL";
		tBtn_Shop	    = "BTSHOP";
		tBtnlit_Shop    = "BLSHOP";
		tBtn_Sort       = "BTSORT";
		tBtn_Scrap      = "BTSCRAP";
		tBtn_Equip      = "BTEQUIP";
		tBtn_Dequip     = "BTDEQUIP";
		tBtn_Items      = "BTITEMS";
		tBtn_Mechs      = "BTMECHS";
		tBtn_Deploy     = "BTDEPLOY";
		tBtnlit_Sort    = "BLSORT";
		tBtnlit_Scrap   = "BLSCRAP";
		tBtnlit_Equip   = "BLEQUIP";
		tBtnlit_Dequip  = "BLDEQUIP";
		tBtnlit_Items   = "BLITEMS";
		tBtnlit_Mechs   = "BLMECHS";
		tBtnlit_Deploy  = "BLDEPLOY";
		// Armory
		tArmory 		  = "LOADRHUD";
		tBtn_Repair   	  = "BTREP";
		tBtn_EquipUtil 	  = "BTUTIL";
		tBtn_Plus         = "BTPLUS";
		tBtn_Minus 	      = "BTMINUS";
		tBtnlit_Repair	  = "BLREP";
		tBtnlit_EquipUtil = "BLUTIL";
		tBtnlit_Plus      = "BLPLUS";
		tBtnlit_Minus     = "BLMINUS";
		// Shop
		tShop 			  = "MDSHOP";
		tBtn_BuyItem 	  = "BTBUYIT";
		tBtn_BuyMech 	  = "BTBUYMH";
		tBtn_Energy 	  = "BTNRG";
		tBtn_Ballistic 	  = "BTBAL";
		tBtn_Missiles	  = "BTMSLS";
		tBtn_Ammo 		  = "BTAMMO";
		tBtn_Engines 	  = "BTENG";
		tBtn_All	 	  = "BTALL";
		tBtn_Light 	  	  = "BTLIGHT";
		tBtn_Medium		  = "BTMED";
		tBtn_Heavy 		  = "BTHEAVY";
		tBtn_Assault 	  = "BTASLT";
		tBtn_MechsMode 	  = "BTMODE";
		tBtnlit_BuyItem   = "BLBUYIT";
		tBtnlit_BuyMech   = "BLBUYMH";
		tBtnlit_Energy    = "BLNRG";
		tBtnlit_Ballistic = "BLBAL";
		tBtnlit_Missiles  = "BLMSLS";
		tBtnlit_Ammo      = "BLAMMO";
		tBtnlit_Engines   = "BLENG";
		tBtnlit_MechsMode = "BLMODE";
		tBtnlit_All	 	  = "BLALL";
		tBtnlit_Light 	  = "BLLIGHT";
		tBtnlit_Medium	  = "BLMED";
		tBtnlit_Heavy 	  = "BLHEAVY";
		tBtnlit_Assault   = "BLASLT";
		
		
		mFont = "MechFont";
		mHUDFont = HUDFont.Create(mFont);
		hardpoint = -1;
		
		// mechplr hardpoint rects
		initRect(rHD,972,540,36,40);
		initRect(rCT,945,593,84,114);
		initRect(rLA,840,534,62,182);
		initRect(rRA,1075,534,62,182);
		initRect(rLT,917,534,43,50);
		initRect(rRT,1017,534,43,50);
		initRect(rLL,853,734,90,230);
		initRect(rRL,1023,734,90,230);
		// Border rects
		initRect(weapbox,750,130,415,790);
		initRect(invbox,1198,130,375,790);
		// Action Buttons
		initRect(sortbtn,1526,138,125,50);
		initRect(scrapbtn,1530,960,125,50);
		initRect(dequipbtn,1093,435,125,50);
		initRect(equipbtn,590,265,125,50);
		initRect(autilbtn,955,427,245,45);
		initRect(repairbtn,785,427,125,45);
		initRect(plusbtn,1117,155,30,30);
		initRect(minusbtn,1076,155,30,30);
		initRect(shopbtn,290,777,120,60);
		initRect(invmodebtn,1525,64,125,50);
		// Shop Buttons
		initRect(energybtn,1255,63,125,50);
		initRect(ballisticbtn,1400,63,125,50);
		initRect(missilesbtn,1545,63,125,50);
		
		initRect(ammobtn,1403,137,125,50);
		initRect(enginesbtn,1545,137,125,50);
		
		initRect(buyitembtn,1040,495,125,50);
		initRect(buymechbtn,980,960,140,50);
		initRect(mechsmodebtn,1415,965,240,50);
		
		initRect(mouse, mpos.x, mpos.y, 8,8);
	}

	void Debug_DrawAllButtons()
	{
		//drawRect(rHD, debug_color);
		//drawRect(rCT, debug_color);
		//drawRect(rRT, debug_color);
		//drawRect(rLT, debug_color);
		//drawRect(rLA, debug_color);
		//drawRect(rRA, debug_color);
		//drawRect(rLL, debug_color);
		//drawRect(rRL, debug_color);
		//drawRect(invbox, debug_color);
		//drawRect(weapbox, debug_color);
		//drawRect(equipbtn, debug_color);
		//drawRect(dequipbtn, debug_color);
		//drawRect(scrapbtn, debug_color);
	 	//drawRect(sortbtn, debug_color);
		//drawRect(invmodebtn, debug_color);
		//drawRect(autilbtn, debug_color);
		//drawRect(repairbtn, debug_color);
		//drawRect(energybtn, debug_color);
		//drawRect(ballisticbtn, debug_color);
		//drawRect(missilesbtn, debug_color);
		//drawRect(ammobtn, debug_color);
		//drawRect(enginesbtn, debug_color);
		//drawRect(buyitembtn, debug_color);
		//drawRect(buymechbtn, debug_color);
		//drawRect(mechsmodebtn, debug_color);
		//drawRect(modebtn, debug_color);
		//drawRect(shopbtn, debug_color);
		//drawRect(plusbtn, debug_color);
		//drawRect(minusbtn, debug_color);
	}

	override void Drawer ()
	{
		statusbar.BeginHUD();
		
		// Mechlab mode
		if(hud_page == 0)
		{
			if(!page_init)
			{
				clearSelected();
				if(hardpoint < 0) hardpoint = 1;
				page_offs = 1;
				invoffset = 0;
				initRect(modebtn,463,777,255,60);
				page_init = true;
			}
			// H_DrawImage(tHud_paperdoll,(675,770),0,(0.45,0.4));
			maxpageitems = 28;
			drawMechlabInfo();
			if( ValidateHardpoint(hardpoint) && hardpoint >= 0 ) DrawHardpointItems(hardpoint,815,115);
			drawLoadoutBody(-80,-470,hardpoint);
			drawInventory(1320,225, invoffset, maxpageitems);
		} 
		// Armory mode
		else if(hud_page == 1)
		{
			if(!page_init)
			{
				valid_hardpoints = mechplr.hardpoints;
				valid_inv_context = mechplr.inv_context;
				page_offs = -1;
				if(hardpoint < 0) hardpoint = 1;
				initRect(modebtn,460,625,250,60);
				page_init = true;
			}
			H_DrawImage(tArmory, (0,0), MD_SBS.SS_SCREEN_CENTER, (1.0, 1.0) );
			drawLoadoutBody(-90,-460,hardpoint);
			drawArmoryInfo();
		}
		// Shop mode
		else if(hud_page == 2)
		{
			if(!page_init)
			{
				clearSelected();
				MechDoomerEvents.SendNetworkEvent("items_getlist");
				page_offs = -2;
				invoffset = 0;
				initRect(modebtn,460,745,260,60);
				mechmode = false;
				page_init = true;
				ShopInit();
			}
			maxpageitems = 28;
			H_DrawImage(tShop, (0,0), MD_SBS.SS_SCREEN_CENTER );
			drawShopInfo();
		}
			
		// Player produced HUD message.
		if(plrHudMessage.txt != "" && plrHudMessage.alpha > 0) 
		{
			vector2 messagepos = (960, 600*messagepos_yscale);
			Array<String> text;
			plrHudMessage.txt.Split(text,"\n");
			
			H_DrawImage(tMessageBox,(messagepos.x+30,messagepos.y-500),0,(1.4,1.2),1.0);
			if(messagepos.y > 80)
			{
				for(int i = 0; i < text.Size(); i++)
				{
					double yoffs = (messagepos.y-200) + i*25;
					H_DrawString(text[i],(messagepos.x-240,yoffs),0,0,(1,1),1.0);
				}
				H_DrawString("Click to continue",(messagepos.x-116,messagepos.y-80),0,Font.CR_White,(1,1),plrHudMessage.alpha);
			}
		}
			
		// Global Actions
		if(mstats.left_btn && checkCollision(mouse,modebtn) && page_init) 
		{
			HUD_ChangePageRelative(page_offs);
		}		
		
		Debug_DrawAllButtons();		
	}
	
	override void Ticker()
	{
		if(!mechplr.uiopen_mechlab) Close();
	
		if(inputclear == 0)
		{
			mstats.left_pressed = false;
			mstats.right_pressed = false;
			mstats.scroll = 0;
			inputclear = 12;
		}
		if(inputclear > 0) inputclear --;
		
		// Player produced HUD message.
		if(mechplr.hAlert.mechlab_text != "")
		{
			plrHudMessage.txt = mechplr.hAlert.mechlab_text;
			plrHudMessage.alpha = 0.2;
			messagepos_yscale = 0;
			MechDoomerEvents.SendNetworkEvent("mechlab_alert:[reset]");
			messagebox_active = true; 
		}
		if(mstats.left_btn && messagebox_active && plrHudMessage.alpha >= 0.4) 
		{
			messagebox_active = false;
			mstats.left_btn = false;
		}
		
		if(!messagebox_active && plrHudMessage.alpha > 0)
		{
			plrHudMessage.alpha -= 0.004;
			messagepos_yscale = MDMath.Lerp(messagepos_yscale,0.0,0.1);
			if(plrHudMessage.alpha <= 0) plrHudMessage.txt = "";
		}
		
		if(plrHudMessage.txt != "" && plrHudMessage.alpha > 0 && messagebox_active)
		{
			if(plrHudMessage.alpha < 1.0) plrHudMessage.alpha += 0.04;
			messagepos_yscale = MDMath.Lerp(messagepos_yscale,1.0,0.22);
		}
	}
}


