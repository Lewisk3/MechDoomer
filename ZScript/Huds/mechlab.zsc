
struct MouseStatus
{
	bool left_btn;
	bool right_btn;
	bool left_pressed;
	bool right_pressed;
	int scroll;
}

struct SelectedObject
{	
	Name tag;
	int index;
	MechHardpoint location;
	Mechbase_Weapon mWeaponOBJ;
	class<Mechbase_Weapon>  mWeapon;
	class<Mechbase_Utility> mUtil;
	class<Mechbase_Engine>  mEngine;
}

class Mechlab_Menu : GenericMenu
{
	// Structs
	MouseStatus mstats;
	Vector2 mpos;
	Mechwarrior mechplr;
	FadingText plrHudMessage;
	ArmoryUtility autil_item;
	
	// Textures
	TextureID tMain;
	TextureID tArmory;
	TextureID tMech_Head;
	TextureID tMech_RTorso;
	TextureID tMech_CTorso;
	TextureID tMech_LTorso;
	TextureID tMech_RArm;
	TextureID tMech_LArm;
	TextureID tMech_RLeg;
	TextureID tMech_LLeg;
	TextureID tInv_ArrowUp;
	TextureID tInv_ArrowDown;
	TextureID tMessageBox;
	TextureID tBtn_Repair;
	TextureID tBtn_EquipUtil;
	TextureID tBtn_WeaponsLab;
	TextureID tBtn_Highlight;
	TextureID tBtn_Sort;
	TextureID tBtn_Scrap;
	TextureID tBtn_Equip;
	TextureID tBtn_Dequip;
	TextureID tBtn_ArmorAndRepair;
	TextureID tBtnlit_Repair;
	TextureID tBtnlit_EquipUtil;
	TextureID tBtnlit_WeaponsLab;
	TextureID tBtnlit_Sort;
	TextureID tBtnlit_Scrap;
	TextureID tBtnlit_Equip;
	TextureID tBtnlit_Dequip;
	TextureID tBtnlit_ArmorAndRepair;
	TextureID tHud_paperdoll;
	
	// Bools
	bool page_init;
	
	// Ints
	int hud_page;
	int page_offs;
	int defwidth;
	int defheight;
	int inputclear;
	int infomode;
	int invoffset;
	
	// Rectangles
	Color debug_color;
	Rect mouse, rHD, rCT, rLT, rRT, rLA, rRA, rLL, rRL, weapbox, invbox, equipbtn, dequipbtn, scrapbtn, sortbtn, modebtn, autilbtn, repairbtn;
	
	// Fonts
	HUDFont mHUDFont;
	
	// Actual Menu
	void Init(Menu parent, Mechwarrior CPlayer)
	{
		statusbar.SetSize(32, 320, 200);
		menuactive = OnNoPause;
		mParentMenu = parent;
		mechplr = CPlayer;
		mMouseCapture = true;
		mBackbuttonSelected = false;
		DontDim = false;
		debug_color = Color(255,230,16,230);
		defwidth = 1920;
		defheight = 1080;
		clearSelected();
		
		hud_page = 0;  // Mechlab Page or Armory Page
		
		tMain   = TexMan.CheckForTexture("LOADMHUD", TexMan.Type_Any);
		tArmory = TexMan.CheckForTexture("LOADRHUD", TexMan.Type_Any);
		tMech_Head     = TexMan.CheckForTexture("LMHUD_HD", TexMan.Type_Any);
		tMech_LTorso   = TexMan.CheckForTexture("LMHUD_LT", TexMan.Type_Any);
		tMech_CTorso   = TexMan.CheckForTexture("LMHUD_CT", TexMan.Type_Any);
		tMech_RTorso   = TexMan.CheckForTexture("LMHUD_RT", TexMan.Type_Any);
		tMech_LArm     = TexMan.CheckForTexture("LMHUD_LA", TexMan.Type_Any);
		tMech_RArm     = TexMan.CheckForTexture("LMHUD_RA", TexMan.Type_Any);
		tMech_LLeg     = TexMan.CheckForTexture("LMHUD_LL", TexMan.Type_Any);
		tMech_RLeg     = TexMan.CheckForTexture("LMHUD_RL", TexMan.Type_Any);
		tInv_ArrowUp   = TexMan.CheckForTexture("HUDARW", TexMan.Type_Any);
		tInv_ArrowDown = TexMan.CheckForTexture("HUDARWD", TexMan.Type_Any);
		tMessageBox    = TexMan.CheckForTexture("HMESSBG", TexMan.Type_Any);
		tBtn_Repair   	 	= TexMan.CheckForTexture("BTREP", TexMan.Type_Any);
		tBtn_EquipUtil 	    = TexMan.CheckForTexture("BTUTIL", TexMan.Type_Any);
		tBtn_WeaponsLab 	= TexMan.CheckForTexture("BTWEAPL", TexMan.Type_Any);
		tBtn_Highlight  	= TexMan.CheckForTexture("BTNBOX", TexMan.Type_Any);
		tBtn_Sort      		= TexMan.CheckForTexture("BTSORT", TexMan.Type_Any);
		tBtn_Scrap     	    = TexMan.CheckForTexture("BTSCRAP", TexMan.Type_Any);
		tBtn_Equip     	    = TexMan.CheckForTexture("BTEQUIP", TexMan.Type_Any);
		tBtn_Dequip    	    = TexMan.CheckForTexture("BTDEQUIP", TexMan.Type_Any);
		tBtn_ArmorAndRepair = TexMan.CheckForTexture("BTPAGE2", TexMan.Type_Any);
		tBtnlit_Repair	       = TexMan.CheckForTexture("BLREP", TexMan.Type_Any);
		tBtnlit_EquipUtil      = TexMan.CheckForTexture("BLUTIL", TexMan.Type_Any);
		tBtnlit_WeaponsLab     = TexMan.CheckForTexture("BLWEAPL", TexMan.Type_Any);
		tBtnlit_Sort   	   	   = TexMan.CheckForTexture("BLSORT", TexMan.Type_Any);
		tBtnlit_Scrap      	   = TexMan.CheckForTexture("BLSCRAP", TexMan.Type_Any);
		tBtnlit_Equip  		   = TexMan.CheckForTexture("BLEQUIP", TexMan.Type_Any);
		tBtnlit_Dequip 		   = TexMan.CheckForTexture("BLDEQUIP", TexMan.Type_Any);
		tBtnlit_ArmorAndRepair = TexMan.CheckForTexture("BLPAGE2", TexMan.Type_Any);
		tHud_paperdoll = TexMan.CheckForTexture(CPlayer.hud_mech.."A", TexMan.Type_Any);

		mHUDFont = HUDFont.Create("MechFont");
		hardpoint = -1;
		
		// mechplr hardpoint rects
		initRect(rHD,948,535,36,40);
		initRect(rCT,925,583,84,114);
		initRect(rLA,820,524,62,182);
		initRect(rRA,1055,524,62,182);
		initRect(rLT,897,524,43,50);
		initRect(rRT,997,524,43,50);
		initRect(rLL,833,724,90,192);
		initRect(rRL,1003,724,90,192);
		// Border rects
		initRect(weapbox,750,130,415,790);
		initRect(invbox,1198,130,375,790);
		// Action Buttons
		initRect(sortbtn,1445,125,125,50);
		initRect(scrapbtn,1450,890,125,50);
		initRect(dequipbtn,1055,450,125,50);
		initRect(equipbtn,605,305,125,50);
		initRect(autilbtn,940,440,220,45);
		initRect(repairbtn,780,440,125,45);
		
		initRect(mouse, mpos.x, mpos.y, 8,8);
	}

	void Debug_DrawAllButtons()
	{
		//drawRect(rHD, debug_color);
		//drawRect(rCT, debug_color);
		//drawRect(rRT, debug_color);
		//drawRect(rLT, debug_color);
		//drawRect(rLA, debug_color);
		//drawRect(rRA, debug_color);
		//drawRect(rLL, debug_color);
		//drawRect(rRL, debug_color);
		//drawRect(invbox, debug_color);
		//drawRect(weapbox, debug_color);
		//drawRect(equipbtn, debug_color);
		//drawRect(dequipbtn, debug_color);
		//drawRect(scrapbtn, debug_color);
	 	//drawRect(sortbtn, debug_color);
		//drawRect(modebtn, debug_color);
		drawRect(modebtn, debug_color);
		drawRect(autilbtn, debug_color);
		drawRect(repairbtn, debug_color);
	}

	override void Drawer ()
	{
		statusbar.BeginHUD();
		
		/*
		console.printf("Tag: %s",selected_item.tag.." ");
		console.printf("Index: %d",selected_item.index);
		console.printf("Location?: %d", selected_item.location!=NULL);
		console.printf("W:%d, U:%d, O:%d",selected_item.mWeapon!=NULL,selected_item.mUtil!=NULL,selected_item.mWeaponOBJ!=NULL);
		*/
		
		
		// Mechlab mode
		if(hud_page == 0)
		{
			if(!page_init)
			{
				page_offs = 1;
				initRect(modebtn,490,740,240,45);
				page_init = true;
			}
			H_DrawTexture(tMain, (942,807), 0, (0.9,0.7) );
			if( ValidateHardpoint(hardpoint) && hardpoint >= 0 ) DrawHardpointItems(hardpoint,815,160);
			// H_DrawTexture(tHud_paperdoll,(675,770),0,(0.45,0.4));
			maxpageitems = 28;
			drawInventory(1278,162, invoffset, maxpageitems);
			drawLoadoutBody(950,120,hardpoint);
			drawMechlabInfo();
		} 
		// Armory mode
		else if(hud_page == 1)
		{
			if(!page_init)
			{
				page_offs = -1;
				initRect(modebtn,490,620,238,35);
				page_init = true;
			}
			H_DrawTexture(tArmory, (942,807), 0, (0.9,0.7) );
			drawLoadoutBody(950,120,hardpoint);
			drawArmoryInfo();
		}
			
		// Global Actions
		if(mstats.left_btn && checkCollision(mouse,modebtn) && page_init) 
		{
			HUD_ChangePageRelative(page_offs);
		}		
		// Player produced HUD message.
		if(mechplr.hAlert.text != "")
		{
			plrHudMessage.txt = mechplr.hAlert.text;
			plrHudMessage.alpha = 0.2;
			plrHudMessage.col = mechplr.hAlert.col;
			mechplr.hAlert.text = "";
		}
		if(mstats.left_btn && plrHudMessage.txt != "" && plrHudMessage.alpha >= 1.0) 
		{
			plrHudMessage.txt = "";
			mstats.left_btn = false;
		}
							
		if(plrHudMessage.txt != "" && plrHudMessage.alpha > 0) 
		{
			vector2 messagepos = (960, 450);
			H_DrawTexture(tMessageBox,(messagepos.x+30,messagepos.y),0,(1.3,0.7),plrHudMessage.alpha);
			H_DrawString(plrHudMessage.txt,(messagepos.x-240,messagepos.y-90),0,plrHudMessage.col,plrHudMessage.alpha);
			H_DrawString("Click to continue",(messagepos.x-116,messagepos.y-24),0,Font.CR_White,plrHudMessage.alpha);
			if(plrHudMessage.alpha < 1.0) plrHudMessage.alpha += 0.05;
		}
		//Debug_DrawAllButtons();		
	}
	
	override void Ticker()
	{
		if(inputclear == 0)
		{
			mstats.left_pressed = false;
			mstats.right_pressed = false;
			mstats.scroll = 0;
			inputclear = 12;
		}
		if(inputclear > 0) inputclear --;
	}
}


