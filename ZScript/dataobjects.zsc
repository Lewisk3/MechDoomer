struct Rect 
{
	double x,y,w,h;
}

class Item_NoPickup : Inventory
{
	override bool HandlePickup (Inventory item)
	{
		// This also has the neat side-effect of making the Weapon Registry
		// Completely unneeded! 
		// Weapons will no longer stack with this active.
		if (item.GetClass() == GetClass()) return false;
		return super.HandlePickup(item);
	}	
}

class TempItems : Object
{
	String Tag;
	int amt;
}

struct UIObject play
{
	bool inloadout;
	bool mousebtnone;
	bool mousebtntwo;
	int scroll;
	bool mousebtnone_click;
	bool mousebtntwo_click;
	int mousex;
	int mousey;
	double mousex_delta; // unused
	double mousey_delta; // unused
	int key;
}

class I_Boolean : Item_NoPickup
{
	Default
	{
		Inventory.maxamount 1;
	}
}

class I_Int16 : Item_NoPickup
{
	Default
	{
		Inventory.maxamount 65536;
	}
}

class I_Percent : Item_NoPickup
{
	Default
	{
		Inventory.maxamount 100;
	}
}

class I_Angle : Item_NoPickup
{
	Default
	{
		Inventory.maxamount 360;
	}
}

class I_Five : Item_NoPickup
{
	Default
	{
		Inventory.maxamount 5;
	}
}

class I_Nine : Item_NoPickup
{
	Default
	{
		Inventory.maxamount 999;
	}
}


class I_Weapon : Item_NoPickup
{
	int group;
	class<Mechbase_Weapon> source;
	Vector2 mountpos;
}

class A_Int16 : Ammo
{
	Default
	{
		Inventory.maxamount 65536;
	}
}

class A_Nine : Ammo
{
	Default
	{
		Inventory.maxamount 999;
	}
}