// Credits: https://gist.github.com/itsmrpeck/be41d72e9d4c72d2236de687f6f53974
class MDMath Abstract
{	
	// Round double to nearest place
	static double RoundFloat(double input, double place=100.)
	{
		return floor(input*place)/place;
	}
	// Kinda redundant, but for naming reasons it stays.
	static double RoundNearest(double input, double toval=0.05)
	{
		return floor(input/toval)*toval;
	}

	// Straight interpolate
	static double Strp(double a, double b, double value, double dampen=0.7)
	{	
		double dampenv = value * (1-(dampen**(abs(a-b)/value)));
		console.printf("dampenval %f", dampenv);
		if(a < b) a += dampenv;
		if(a > b) a -= dampenv;
		if( abs(a-b) < dampenv) a = b;
		return a;
	}
	
	// Linear interpolate
	static double Lerp(double a, double b, double lerpFactor)
	{
		double result = (a * (1.f - lerpFactor)) + (b * lerpFactor);
		return result;
	}
	
	// Linear interpolate 3D vectors
	static vector3 Lerp3D(vector3 a, vector3 b, double lerpfactor)
	{
		vector3 result = a;
		result.x = Lerp(result.x,b.x,lerpfactor);
		result.y = Lerp(result.y,b.y,lerpfactor);
		result.z = Lerp(result.z,b.z,lerpfactor);
		return result;
	}
	
	// Determine if number v is in range of -r, r relative to t
	clearscope static bool inRange(double v, double t, double r)
	{
		return (v >= t-r && v <= t+r);
	}
	
	
	// Normalizes angle between -180, 180 degrees.
	static double NormalizeAngle(double ang, bool full=false)
	{
		if(!full)
		{
			while(ang > 180) ang -= 360;
			while(ang < -180) ang += 360;
		}
		else
		{
			while(ang > 359) ang -= 360;
			while(ang < 0) ang += 360;
		}
		return ang;
	}
	
	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpDegrees(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}

		return result;
	}
	
	static int Sign(double num)
	{
		return (num < 0 ? -1 : 1);
	}
	
	// Get shortest distance between angles.
	static double AngleDifference( double angle1, double angle2 )
	{
		double diff = ( angle2 - angle1 + 180 ) % 360 - 180;
		return diff < -180 ? diff + 360 : diff;
	}
	
	static double SmarterAngleTo(Actor from, Actor to)
	{
		vector3 scoord = level.SphericalCoords(from.pos, to.pos, (from.angle,0));
		return from.angle-scoord.x;
	}
	
	// Pitch between 2 vectors.
	static double getPitchBetween(Vector3 one, Vector3 two)
	{	
		vector3 delta = ( one.x - two.x, one.y - two.y, one.z - two.z );
		double pitchto = VectorAngle( sqrt(delta.y * delta.y + delta.x * delta.x), delta.z );
		return pitchto;
	}
	
	// Distance 3D on vectors, not actors. (Precise version)
	static double Distance3D(vector3 one, vector3 two)
	{
		return sqrt( (two.x - one.x)**2 + (two.y - one.y)**2 + (two.z - one.z)**2 );
	}
	// Distance 2D on vectors, not actors. (Precise version)
	static double Distance2D(vector2 one, vector2 two)
	{
		return sqrt( (two.x - one.x)**2 + (two.y - one.y)**2 );
	}
	
	// Rotate vectors.
	static Vector2 VRotate(Vector2 pos, double angle, bool invert=false)
	{
		if(invert)
		{
			double oldx = pos.x;
			pos.x = pos.y;
			pos.y = oldx;
		}
		return ( pos.y * cos(angle) - pos.x * sin(angle), 
		         pos.y * sin(angle) + pos.x * cos(angle) );
	}	
	
	// Offset vector position.
	static Vector2 VOffset(double angle, double xoffs, double yoffs, double dist)
	{
		return ( xoffs * cos(angle) - yoffs * sin(angle),
				 yoffs * cos(angle) + xoffs * sin(angle) )*dist;
	}
	
	static Vector3 VOffsetPitch(double angle, double pitch, double xoffs, double yoffs, double dist)
	{
		return ( (xoffs * cos(angle)*cos(pitch)) - (yoffs * sin(angle)*cos(pitch)),
				 (yoffs * cos(angle)*cos(pitch)) + (xoffs * sin(angle)*cos(pitch)), -sin(pitch) )*dist;
	}
	
	// UI Features
	static String GetPrintableFloat(double value, int places=2, bool absolute=true)
	{
		return String.Format("%."..places.."f", absolute ? abs(value) : value);
	}		
	
	// Flags
	static void SetFlag(in out uint bits, uint bit)
	{
		bits |= bit;
	}
	static void UnsetFlag(in out uint bits, uint bit)
	{
		bits &= ~bit;
	}
	
	// Intertial calculations for thrust on monsters.
	static double GetInertia(double emass)
	{
		// Deviation from small weight, 0 means no deviation.
		double m = 200; // Base mass
		double d = 0.15; // Mass dropoff
		double x = (1. - (emass/m));
		double y = -d*(x**2) + 1;
		return clamp(y*0.75,0.1,1.0);
	}
	
}

// LineTracer for targetting mechs and monsters.
class MechTargetTracer : LineTracer
{
	Actor source;
	Actor hit_target;
	
	play static MechTargetTracer CreateTrace(Actor src, vector3 startpos, double tangle, double tpitch, double dist, uint traceflags = 0)
	{
		vector3 dir;
		dir.xy = Actor.AngleToVector(tangle);
		dir.z = sin(-tpitch);
		let tracer = new("MechTargetTracer");
		if(tracer) 
		{
			tracer.source = src;
			let secget = Actor.Spawn("Actor",startpos);
			tracer.Trace(startpos, secget.CurSector, dir, dist, traceflags);
			secget.Destroy();
		}
		return tracer;
	}
	
	override ETraceStatus TraceCallback()
	{
		if(results.HitType == Trace_HitWall)
		{
			return Trace_Skip;
		}
		
		if(results.HitType == Trace_HitActor)
		{
			let hitactor = results.HitActor;
			if(hitactor == source || !hitactor.bSHOOTABLE || hitactor is "MechPartsBase")
				return Trace_Skip;
			
			// Handle mech hit, redirect to mech center.
			if(Mechwarrior(hitactor)) 
			{
				if(Mechwarrior(HitActor).isdead) return Trace_Skip;
				hit_target = Mechwarrior(hitactor).hitbox_middle;
				return Trace_Stop;
			}
			
			// Handle mech hitboxes.
			let hitbox = MechHitBox(hitactor);
			if(hitbox)
			{
				if(hitbox.mech.isdead) return Trace_Skip;
				if(hitbox.mech == source) 
					return Trace_Skip;
				else
				{
					hit_target = hitbox.mech.hitbox_middle;
					return Trace_Stop;
				}
			}
			
			// Default
			hit_target = hitactor;
		}
		return Trace_Stop;
	}
}

// LineTracer for laser damage (skips player hitbox)
class LaserDamageTracer : LineTracer
{
	Mechwarrior mechsrc;
	play static LaserDamageTracer CreateTrace(Mechwarrior fmechsrc, vector3 startpos, double tangle, double tpitch, 
											  double dist, uint traceflags = 0,
											  double forwardoffs = 0, double sideoffs = 0, 
											  double zoffs = 0 )
	{
		vector3 dir;
		double cosp = cos(tpitch);
		dir = (
			cos(tangle) * cosp,
			sin(tangle) * cosp,
			-sin(tpitch)
		);
		LaserDamageTracer tracer = new("LaserDamageTracer");
		if(tracer) 
		{
			tracer.mechsrc = fmechsrc;
			vector2 posoffset = LaserGlobals.VOffset(tangle,forwardoffs,sideoffs);
			startpos = level.Vec3Offset(startpos, (posoffset.x, posoffset.y, zoffs));
			let secget = Actor.Spawn("Actor",startpos);
			Sector sec = secget.CurSector;
			secget.Destroy();
			tracer.Trace(startpos, sec, dir, dist, traceflags);
		}
		return tracer;
	}

	// Thanks to PhantomBeta 
	// (https://github.com/Doom2fan/Se7evidas/blob/master/PK3%20Source/S7ZScript/Bases/S7_Projectile/Linetracer.ZS)
    transient Array<F3DFloor> ffloorsToIgnore;
	ETraceStatus HandleWall() 
	{
        if (Results.Tier == TIER_Upper || Results.Tier == TIER_Lower)
            return TRACE_Stop;

        let hl = Results.HitLine;
        if (Results.ffloor && ffloorsToIgnore.Find (Results.ffloor) == ffloorsToIgnore.Size ())
		{
            ffloorsToIgnore.Push (Results.ffloor);
            return TRACE_Stop;
        }

        if (Results.Tier == TIER_Middle && !hl.backsector)
            return TRACE_Stop;
			
        if (Results.Tier == TIER_Middle && (hl.flags & Line.ML_Blocking) && (hl.flags & Line.ML_TwoSided))
            return TRACE_Skip;

        if ((hl.flags & Line.ML_3DMidTex) && !(hl.flags & Line.ML_3DMidTex_Impass))
            return TRACE_Stop;

        if (hl.flags & (Line.ML_Blocking | Line.ML_BlockEverything))
            return TRACE_Stop;

        return TRACE_Skip;
    }
	
	override ETraceStatus TraceCallback()
	{
		if(results.HitType == Trace_HitWall)
		{
			let stat = HandleWall();
			return stat;
		}
		if(results.HitType == Trace_HitActor)
		{
			let hitactor = results.HitActor;
			
			// Skip laserparts and non-shootable objects.
			if(hitactor is "LaserBase" || 
			   hitactor is "LaserEmitter" ) 
			{
				results.HitActor = null;
				return Trace_Skip;
			}
				
			if(!hitactor.bSHOOTABLE) 
			{
				results.HitActor = null;
				return Trace_Skip;
			}
			
			// Skip source mech's hitboxes.
			let hitbox = MechHitBox(hitactor);
			if(hitbox && hitbox.mech == mechsrc)
				return Trace_Skip;
				
			if(hitactor is "Mechwarrior")
				return Trace_Skip;
		}
		
		return Trace_Stop;
	}
}