
class SoundQueue : Object
{
	Array<Sound> snds;
	int onsound;
	int maxsounds;
	int realsounds;
	int timer;
	
	SoundInfo soundplaying;
	Actor master;
	
	struct SoundInfo
	{
		int qID;
		int length;
		Sound snd;
	}
	
	static SoundQueue SQ_Create(Actor user, int maxsnds = 64)
	{
		let sq = new("SoundQueue");
		sq.snds.Clear();
		sq.onsound = 0;
		sq.realsounds = 0;
		sq.maxsounds = maxsnds;
		sq.master = user;
		for(int i = 0; i < maxsnds; i++)
		{
			// Fill with blanks because this isn't a dynamic queue.
			sq.snds.Push(" ");
		}
		
		return sq;
	}
	
	// Moves to the next sound and returns true if looping.
	void NextSound()
	{
		timer = 0;
		onsound ++;
		if(onsound >= maxsounds) onsound = 0;
		if(snds[onsound] == " ") onsound = 0;
		soundplaying.length = 0;
	}
	
	void pushSound(Sound snd)
	{
		if(realsounds < maxsounds)
		{
			if(realsounds == 0) timer = -1;
			snds[realsounds] = snd;
			realsounds++;
		}
	}
	
	play void PlaySound()
	{
		// Only play if a sound is present.
		if(snds[onsound] != " ")
		{
			if(!master)
				S_StartSound(snds[onsound],CHAN_BODY,CHANF_LOCAL,1.0,3);
			else
				SoundOnActor.Trigger(snds[onsound], master, true);
				
			soundplaying.qID = onsound;
			soundplaying.length = S_GetLength(snds[onsound])*36;
			soundplaying.snd = snds[onsound];
		}
		else
		{
			soundplaying.length = 0;
		}
	}
	
	bool isEmpty()
	{
		return (realsounds == 0);
	}
	
	void Empty()
	{
		while(realsounds != 0) 
		{
			popSound();
			NextSound();
		}
	}
	
	Sound popSound(int dir=0)
	{
		if(onsound+dir < 0 || onsound+dir > snds.Size()-1) return "";
		Sound psound = snds[onsound+dir];
		snds[onsound+dir] = "";
		realsounds--;
		if(realsounds < 0) realsounds = 0;
		return psound;
	}
	
	virtual void DebugSoundQueue()
	{
		for(int i = 0; i < 4; i++)
		{
			if(i > realsounds-1)
			{
				console.printf("-----------------");
				continue;
			}
			if(i != onsound)
			{
				console.printf("<%i>[%i/%i]  %s ",onsound,i+1,realsounds,snds[i]);
			}
			else
			{
				console.printf("<%i>[%i/%i] >%s<",onsound,i+1,realsounds,soundplaying.snd);
			}
		}
	}
	
	play virtual void Tick()
	{
		if(timer == -1) 
		{
			PlaySound();
			timer = 0;
		}
		timer++;
		
		if(timer > soundplaying.length || soundplaying.snd == "") 
		{
			// Pull sound from stack, move to next sound, play that.
			if(snds[onsound] == soundplaying.snd) popSound(); // Prevent sound-insert deletion.
			NextSound();
			PlaySound();
		}
		if(!realsounds && !soundplaying.length) onsound = 0;
		
		// DebugSoundQueue();
	}
	
}


class SoundEmitter : Actor
{
	Sound audio;

	Default
	{
		+NOBLOCKMAP
		+NOINTERACTION
		Radius 0;
		Height 0;
	}

	static SoundEmitter SE_Trigger(Sound snd = "weapons/pistol", vector3 worldpos = (0,0,0) )
	{
		let a_snd = SoundEmitter(Spawn("SoundEmitter",worldpos, ALLOW_REPLACE));
		if(a_snd)
		{
			a_snd.SeeSound = snd;
			a_snd.audio = snd;
		}
		return a_snd;
	}	
	
	override void PostBeginPlay()
	{
		A_StartSound(audio, CHAN_BODY, CHANF_OVERLAP);
		super.PostBeginPlay();
	}

	States
	{
		Spawn:
			TNT1 A 1;
		stop;
	}
}

class SoundOnActor : Actor
{
	Sound audio;
	bool onlylocal;
	Actor onactor;
	uint lifetime;

	Default
	{
		+NOBLOCKMAP
		+NOINTERACTION
		Radius 0;
		Height 0;
	}
	
	static SoundOnActor Trigger(Sound snd, Actor at, bool onlylocal = false)
	{
		if(!at) return NULL;
		let a_snd = SoundOnActor(Spawn("SoundOnActor", at.pos, ALLOW_REPLACE));
		if(a_snd)
		{
			a_snd.audio = snd;
			a_snd.onactor = at;
			a_snd.onlylocal = onlylocal;
			a_snd.lifetime = S_GetLength(snd)*36;
		}
		return a_snd;
	}
	
	override void PostBeginPlay()
	{
		bool doplay = true;
		let plr = PlayerPawn(onactor);
		let cplr = players[consoleplayer].mo;
		if(plr && (plr != cplr)) doplay = false;
		
		if(doplay) 
			S_StartSound(audio, CHAN_BODY, CHANF_OVERLAP, 1.0);
		else if(!onlylocal)
			A_StartSound(audio, CHAN_BODY, CHANF_OVERLAP, 1.0, ATTN_NORM);
		
		super.PostBeginPlay();
	}
	
	override void Tick()
	{
		super.Tick();
		if(GetAge() >= lifetime) 
		{
			Destroy();
			return;
		}
		if(onactor) SetOrigin(onactor.pos, false);
	}
	
}
class MechFootstepEmitter : Actor
{
	Default
	{
		SeeSound "Mech/Footstep";
		Speed 5;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		stop;
	}
}