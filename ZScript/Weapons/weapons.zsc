// Lasers
class SmallLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "SLASER";
		Mechbase_Weapon.WeaponType "Laser_SML";
		Mechbase_Weapon.Distance_Speed 30,120;
		Mechbase_Weapon.Tonnage 0.5;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 2400;
		Mechbase_Weapon.Cooldown MWCOOL_SLASER, 0;
	}	
}
class ERSmallLaser : SmallLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "erSLAS";
		Mechbase_Weapon.WeaponType "Laser_ERSML";
		Mechbase_Weapon.Distance_Speed 30,100;
		Mechbase_Weapon.Tonnage 0.5;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 2850;
	}	
}
class SmallPulseLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "SPLAS";
		Mechbase_Weapon.WeaponType "Laser_SMLP";
		Mechbase_Weapon.Distance_Speed 30,140;
		Mechbase_Weapon.Tonnage 1;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 3050;
		Mechbase_Weapon.Cooldown MWCOOL_SPLAS, 0.1;
	}	
	override bool MWFire()
	{
		// Only the first laser will deal damage/generate heat.
		return FireVolley(2,0,0,"","",true);
	}
}
class ERSmallPulseLaser : SmallPulseLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "erSPLAS";
		Mechbase_Weapon.WeaponType "Laser_ERSMLP";
		Mechbase_Weapon.Tonnage 1.5;
		Mechbase_Weapon.CValue 6100;
	}	
	override bool MWFire()
	{
		// Only the first laser will deal damage/generate heat.
		return FireVolley(2,0,0,"","",true);
	}
}

const HeavyLaserText = (
	"\c[Orange]Fires a barrage of lasers.\n"
	"\c[Orange]generates a massive amount\n"
	"\c[Orange]of heat.\n"
);

class HeavySmallLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "HSLAS";
		Mechbase_Weapon.WeaponType "Laser_SMLP";
		Mechbase_Weapon.Distance_Speed 30,140;
		Mechbase_Weapon.Tonnage 2;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 6105;
		Mechbase_Weapon.Cooldown MWCOOL_HSLAS, 0.1;
		Mechbase_Weapon.FlavorText HeavyLaserText;
	}	
	override bool MWFire()
	{
		return FireVolley(8,0,0,"","",false);
	}
}


class MediumLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "MLASER";
		Mechbase_Weapon.WeaponType "Laser_MED";
		Mechbase_Weapon.Distance_Speed 30,130;
		Mechbase_Weapon.Tonnage 1;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 3200;
		Mechbase_Weapon.Cooldown MWCOOL_MLASER, 0;
	}	
}
class ERMediumLaser : MediumLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "erMLAS";
		Mechbase_Weapon.WeaponType "Laser_ERMED";
		Mechbase_Weapon.Distance_Speed 30,110;
		Mechbase_Weapon.Tonnage 1;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 4150;
	}	
}
class MediumPulseLaser : SmallPulseLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "MPLAS";
		Mechbase_Weapon.WeaponType "Laser_MEDP";
		Mechbase_Weapon.Distance_Speed 30,150;
		Mechbase_Weapon.Tonnage 2;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 4300;
		Mechbase_Weapon.Cooldown MWCOOL_MPLAS, 0.1;
	}	
}
class ERMediumPulseLaser : SmallPulseLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "erMPLAS";
		Mechbase_Weapon.WeaponType "Laser_ERMEDP";
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 8600;
	}	
	override bool MWFire()
	{
		// Only the first laser will deal damage/generate heat.
		return FireVolley(2,0,0,"","",true);
	}
}
class HeavyMediumLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "HMLAS";
		Mechbase_Weapon.WeaponType "Laser_MEDP";
		Mechbase_Weapon.Distance_Speed 30,140;
		Mechbase_Weapon.Tonnage 4;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 7550;
		Mechbase_Weapon.Cooldown MWCOOL_HMLAS, 0.15;
		Mechbase_Weapon.FlavorText HeavyLaserText;
	}	
	override bool MWFire()
	{
		return FireVolley(5,0,0,"","",false);
	}
}

class LargeLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "LLASER";
		Mechbase_Weapon.WeaponType "Laser_LRG";
		Mechbase_Weapon.Distance_Speed 30,130;
		Mechbase_Weapon.Tonnage 4;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 5700;
		Mechbase_Weapon.Cooldown MWCOOL_LLASER, 0;
	}	
}
class ERLargeLaser : LargeLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "erLLAS";
		Mechbase_Weapon.WeaponType "Laser_ERLRG";
		Mechbase_Weapon.Distance_Speed 30,130;
		Mechbase_Weapon.Tonnage 4;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 6210;
	}	
}
class LargePulseLaser : SmallPulseLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "LPLAS";
		Mechbase_Weapon.WeaponType "Laser_LRGP";
		Mechbase_Weapon.Distance_Speed 30,130;
		Mechbase_Weapon.Tonnage 6;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 6420;
		Mechbase_Weapon.Cooldown MWCOOL_LPLAS, 0.7;
	}	
}
class ERLargePulseLaser : SmallPulseLaser
{
	Default
	{
		Mechbase_Weapon.DisplayName "erLPLAS";
		Mechbase_Weapon.WeaponType "Laser_ERLRGP";
		Mechbase_Weapon.Tonnage 6;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 12840;
	}	
}
class HeavyLargeLaser : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "HLLAS";
		Mechbase_Weapon.WeaponType "Laser_LRGP";
		Mechbase_Weapon.Distance_Speed 30,140;
		Mechbase_Weapon.Tonnage 8;
		Mechbase_Weapon.HardslotSize 4;
		Mechbase_Weapon.CValue 10740;
		Mechbase_Weapon.Cooldown MWCOOL_HLLAS, 0.18;
		Mechbase_Weapon.FlavorText HeavyLaserText;
	}	
	override bool MWFire()
	{
		return FireVolley(3,0,0,"","",false);
	}
}

// Energy
class Flamer : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "FLAMER";
		Mechbase_Weapon.WeaponType "FlameProjectile";
		Mechbase_Weapon.Distance_Speed 30,55;
		Mechbase_Weapon.Tonnage 1;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 6400;
		Mechbase_Weapon.Cooldown MWCOOL_FLAMER, 0.03;
	}
	
	override bool MWFire()
	{
		return FireVolley(6,0.5,0.5,"Energy/Flamer","Energy/Flamer",false);
	}
}

const PPCText = (
	"\c[Orange]Due to its \c[Purple]Field Inhibitor\n"
	"\c[Orange]PPCs cannot be fired at\n"
	"\c[Orange]point-blank range\n"
);
class PPC : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "PPC";
		Mechbase_Weapon.WeaponType "PPCProjectile";
		Mechbase_Weapon.Distance_Speed 30, 65;
		Mechbase_Weapon.Tonnage 6;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 10375;
		Mechbase_Weapon.Cooldown MWCOOL_PPC, 0;
		Mechbase_Weapon.FlavorText PPCText;
	}
}
class ERPPC : PPC
{
	Default
	{
		Mechbase_Weapon.DisplayName "ER PPC";
		Mechbase_Weapon.WeaponType "ERPPCProjectile";
		Mechbase_Weapon.Distance_Speed 30, 65;
		Mechbase_Weapon.Tonnage 6;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 13250;
		Mechbase_Weapon.FlavorText "";
	}
}

// Missiles - SRM
const SRMSpread = 0.054;
const SSRMText = "\c[Orange]Streak SRM's have Lock-On\n\c[Orange]capabilities.";

class SRM2 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "SRM2 ";
		
		Mechbase_Weapon.WeaponType "SRM";
		Mechbase_Weapon.Distance_Speed 30,60;
		Mechbase_Weapon.AmmoType "SRM_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 0.5; // 1
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 3700;
		Mechbase_Weapon.Cooldown MWCOOL_SRM2, 0.2;
	}
	
	override bool MWFire()
	{
		return FireVolley(2,SRMSpread,SRMSpread,"Missiles/SRM2", "Classic/Missiles/SRM2");
	}
}
class SSRM2 : SRM2
{
	Default
	{
		Mechbase_Weapon.DisplayName "SSRM2 ";
		Mechbase_Weapon.WeaponType "SSRM";
		Mechbase_Weapon.AmmoType "SSRM_Ammo";
		Mechbase_Weapon.Tonnage 1; 
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 4800;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2.8; // 35 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_SSRM2, 0.2;
		Mechbase_Weapon.FlavorText SSRMText;
	}
}
class SRM4 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "SRM4 ";
		Mechbase_Weapon.WeaponType "SRM";
		Mechbase_Weapon.Distance_Speed 30,60;
		Mechbase_Weapon.AmmoType "SRM_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_weapon.HardslotSize 4;
		Mechbase_Weapon.Tonnage 2;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 5500;
		Mechbase_Weapon.Cooldown MWCOOL_SRM4, 0.2;
	}
	
	override bool MWFire()
	{
		return FireVolley(4,SRMSpread,SRMSpread,"Missiles/SRM4", "Classic/Missiles/SRM4");
	}
}
class SSRM4 : SRM4
{
	Default
	{
		Mechbase_Weapon.DisplayName "SSRM4 ";
		Mechbase_Weapon.WeaponType "SSRM";
		Mechbase_Weapon.AmmoType "SSRM_Ammo";
		Mechbase_Weapon.Tonnage 2;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 6250;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2.8; // 35 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_SSRM4, 0.2;
		Mechbase_Weapon.FlavorText SSRMText;
	}
}

class SRM6 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "SRM6 ";
		Mechbase_Weapon.WeaponType "SRM";
		Mechbase_Weapon.Distance_Speed 30,60;
		Mechbase_Weapon.AmmoType "SRM_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 1.5;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 7280;
		Mechbase_Weapon.Cooldown MWCOOL_SRM6, 0.2;
	}
	
	override bool MWFire()
	{
		return FireVolley(6,SRMSpread,SRMSpread,"Missiles/SRM6","Classic/Missiles/SRM6");
	}
}
class SSRM6 : SRM6
{
	Default
	{
		Mechbase_Weapon.DisplayName "SSRM6 ";
		Mechbase_Weapon.WeaponType "SSRM";
		Mechbase_Weapon.AmmoType "SSRM_Ammo";
		Mechbase_Weapon.Tonnage 3;
		Mechbase_Weapon.HardslotSize 4;
		Mechbase_Weapon.CValue 8520;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2.8; // 35 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_SSRM6, 0.2;
		Mechbase_Weapon.FlavorText SSRMText;
	}
}

// Missiles - ATM
const ATMSpread = 0.23;
const ATMText = (
	"\c[Orange]ATMs utilize ammo switching.\n"
	"\c[Orange]Switches between: \n"
	"\c[Orange]ATM and HE-ATM Ammo" 
);

class CATM3 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "ATM3";
		Mechbase_Weapon.WeaponType "CATM";
		Mechbase_Weapon.WeaponMode2 "HE_CATM", "HE_ATM_Ammo", "HE-ATM3";
		Mechbase_Weapon.Distance_Speed 15,90;
		Mechbase_Weapon.AmmoType "ATM_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 1.5;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 18500;
		Mechbase_Weapon.Cooldown MWCOOL_ATM3, 0.05;
		Mechbase_Weapon.FlavorText ATMText;
	}
	
	override bool MWFire()
	{
		int truespread = ammo_mode ? ATMSpread*5 : ATMSpread;
		return FireVolley(3,truespread,truespread,"Missiles/LRM", "Classic/Missiles/LRM");
	}
}
class CATM6 : CATM3
{
	Default
	{
		Mechbase_Weapon.DisplayName "ATM6";
		Mechbase_Weapon.WeaponMode2 "HE_CATM", "HE_ATM_Ammo", "HE-ATM6";
		Mechbase_Weapon.Tonnage 3.5;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 46250;
		Mechbase_Weapon.Cooldown MWCOOL_ATM6, 0.05;
	}
	
	override bool MWFire()
	{
		int truespread = ammo_mode ? ATMSpread*5 : ATMSpread;
		return FireVolley(6,truespread,truespread,"Missiles/LRM", "Classic/Missiles/LRM");
	}
}
class CATM9 : CATM3
{
	Default
	{
		Mechbase_Weapon.DisplayName "ATM9 ";
		Mechbase_Weapon.WeaponMode2 "HE_CATM", "HE_ATM_Ammo", "HE-ATM9";
		Mechbase_Weapon.Tonnage 5.0;
		Mechbase_Weapon.HardslotSize 4;
		Mechbase_Weapon.CValue 69350;
		Mechbase_Weapon.Cooldown MWCOOL_ATM9, 0.05;
	}
	
	override bool MWFire()
	{
		int truespread = ammo_mode ? ATMSpread*5 : ATMSpread;
		return FireVolley(9,truespread,truespread,"Missiles/LRM", "Classic/Missiles/LRM");
	}
}
class CATM12 : CATM3
{
	Default
	{
		Mechbase_Weapon.DisplayName "ATM12";
		Mechbase_Weapon.WeaponMode2 "HE_CATM", "HE_ATM_Ammo", "HE-ATM12";
		Mechbase_Weapon.Tonnage 7.0;
		Mechbase_Weapon.HardslotSize 5;
		Mechbase_Weapon.CValue 107875;
		Mechbase_Weapon.Cooldown MWCOOL_ATM12, 0.05;
	}
	
	override bool MWFire()
	{
		int truespread = ammo_mode ? ATMSpread*5 : ATMSpread;
		return FireVolley(12,truespread,truespread,"Missiles/LRM", "Classic/Missiles/LRM");
	}
}

// Missiles - MRM
const MRMSpread = 0.27;

class MRM10: Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "MRM10";
		Mechbase_Weapon.WeaponType "MRM";
		Mechbase_Weapon.Distance_Speed 30,80;
		Mechbase_Weapon.AmmoType "MRM_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 3;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 18500;
		Mechbase_Weapon.Cooldown MWCOOL_MRM10, 0.02;
	}
	
	override bool MWFire()
	{
		return FireVolley(10,MRMSpread,MRMSpread,"Missiles/SRM4","Classic/Missiles/SRM6");
	}
}
class MRM20: MRM10
{
	Default
	{
		Mechbase_Weapon.DisplayName "MRM20";
		Mechbase_Weapon.Tonnage 7;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 46250;
		Mechbase_Weapon.Cooldown MWCOOL_MRM20, 0.02;
	}
	
	override bool MWFire()
	{
		return FireVolley(20,MRMSpread,MRMSpread,"Missiles/SRM4","Classic/Missiles/SRM6");
	}
}
class MRM30: MRM10
{
	Default
	{
		Mechbase_Weapon.DisplayName "MRM30";
		Mechbase_Weapon.Tonnage 10;
		Mechbase_Weapon.HardslotSize 5;
		Mechbase_Weapon.CValue 69350;
		Mechbase_Weapon.Cooldown MWCOOL_MRM30, 0.02;
	}
	
	override bool MWFire()
	{
		return FireVolley(30,MRMSpread,MRMSpread,"Missiles/SRM4","Classic/Missiles/SRM6");
	}
}
class MRM40: MRM10
{
	Default
	{
		Mechbase_Weapon.DisplayName "MRM40";
		Mechbase_Weapon.Tonnage 12;
		Mechbase_Weapon.HardslotSize 7;
		Mechbase_Weapon.CValue 107875;
		Mechbase_Weapon.Cooldown MWCOOL_MRM40, 0.02;
	}
	
	override bool MWFire()
	{
		return FireVolley(40,MRMSpread,MRMSpread,"Missiles/SRM4","Classic/Missiles/SRM6");
	}
}

// Missiles - LRM
const LRMText = (
	"\c[Orange]LRMs are Lock-On capable\n"
	"\c[Orange]Due to dual stage boosters\n"
	"\c[Orange]LRMs have a minimum range\n"
);

class LRM5: Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "LRM5";
		Mechbase_Weapon.WeaponType "LRM";
		Mechbase_Weapon.Distance_Speed 30,85;
		Mechbase_Weapon.AmmoType "LRM_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 1;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 8200;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2; // 50 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_LRM5, 0.12;
		Mechbase_Weapon.FlavorText LRMText;
	}
	
	override bool MWFire()
	{
		return FireVolley(5,0,0,"Missiles/LRM","Classic/Missiles/LRM");
	}
}
class LRM10: LRM5
{
	Default
	{
		Mechbase_Weapon.DisplayName "LRM10";
		Mechbase_Weapon.Tonnage 2.5;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 11600;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2; // 50 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_LRM10, 0.12;
		Mechbase_Weapon.FlavorText LRMText;
	}
	
	override bool MWFire()
	{
		return FireVolley(10,0,0,"Missiles/LRM","Classic/Missiles/LRM");
	}
}
class LRM15: LRM5
{
	Default
	{
		Mechbase_Weapon.DisplayName "LRM15";
		Mechbase_Weapon.Tonnage 3.5;
		Mechbase_Weapon.HardslotSize 4;
		Mechbase_Weapon.CValue 14200;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2; // 50 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_LRM15, 0.12;
		Mechbase_Weapon.FlavorText LRMText;
	}
	
	override bool MWFire()
	{
		return FireVolley(15,0,0,"Missiles/LRM","Classic/Missiles/LRM");
	}
}
class LRM20: LRM5
{
	Default
	{
		Mechbase_Weapon.DisplayName "LRM20";
		Mechbase_Weapon.Tonnage 5;
		Mechbase_Weapon.HardslotSize 5;
		Mechbase_Weapon.CValue 15560;
		Mechbase_Weapon.IsHommingMissile true;
		Mechbase_Weapon.LockingSpeed 2; // 50 tics until concise lock.
		Mechbase_Weapon.Cooldown MWCOOL_LRM20, 0.12;
		Mechbase_Weapon.FlavorText LRMText;
	}
	
	override bool MWFire()
	{
		return FireVolley(20,0,0,"Missiles/LRM","Classic/Missiles/LRM");
	}
}

// Missiles - RocketLauncher
const RLSpread = 0.15;
const RLText = "\c[DarkRed][Volatile Weapon]:\n\c[Brick]>Can only be fired once.";

class RocketLauncher10 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "RL10";
		Mechbase_Weapon.WeaponType "RocketMissile";
		Mechbase_Weapon.Distance_Speed 30,85;
		Mechbase_Weapon.Tonnage 0.5;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 1500;
		Mechbase_Weapon.Cooldown 1, 0.03;
		Mechbase_Weapon.FlavorText RLText;
	}
		
	override void MWPostFire()
	{
		mechplr.DestroyWeapon(self);
	}
	
	override bool MWFire()
	{
		return FireVolley(10,RLSpread,RLSpread,"Missiles/SRM2","Classic/Missiles/SRM2");
	}
}
class RocketLauncher15 : RocketLauncher10
{
	Default
	{
		Mechbase_Weapon.DisplayName "RL15";
		Mechbase_Weapon.Tonnage 1;
		Mechbase_Weapon.HardslotSize 2;
		Mechbase_Weapon.CValue 3000;
	}

	override bool MWFire()
	{
		return FireVolley(15,RLSpread,RLSpread,"Missiles/SRM2","Classic/Missiles/SRM2");
	}
}
class RocketLauncher20 : RocketLauncher10
{
	Default
	{
		Mechbase_Weapon.DisplayName "RL20";
		Mechbase_Weapon.Tonnage 1.5;
		Mechbase_Weapon.HardslotSize 3;
		Mechbase_Weapon.CValue 4500;
	}

	override bool MWFire()
	{
		return FireVolley(20,RLSpread,RLSpread,"Missiles/SRM2","Classic/Missiles/SRM2");
	}
}


// Ballistics
class MachineGun : Mechbase_Weapon
{	
	Default
	{
		Mechbase_Weapon.DisplayName "MGUN";
		//Mechbase_Weapon.Hitscan 20,800;
		Mechbase_Weapon.WeaponType "MGunBullet";
		Mechbase_Weapon.AmmoType "BulletsMGun";
		//Mechbase_Weapon.WeaponDelay 5;
		Mechbase_Weapon.Distance_Speed 40,100;
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.AttackSound "Ballistics/MGUN";
		Mechbase_Weapon.Tonnage 0.25;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 2600;
		Mechbase_Weapon.WeaponBaseSpread 1, 1;
		Mechbase_Weapon.Cooldown MWCOOL_MGUN, 0;
	}
}

class Autocannon2 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "xAC2";
		Mechbase_Weapon.WeaponType "AC_2";
		Mechbase_Weapon.Distance_Speed 30,100;
		Mechbase_Weapon.AmmoType "AC2_Ammo";
		Mechbase_Weapon.WeaponMode2 "LBX_AC_2", "LBX_AC2_Ammo", "LB-X AC2";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 5;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 8800;
		Mechbase_Weapon.Cooldown MWCOOL_AC2, 0;
	}	
}
class UAutocannon2 : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.Distance_Speed 30,100;
		Mechbase_Weapon.DisplayName "UAC2";
		Mechbase_Weapon.WeaponType "UAC_2";
		Mechbase_Weapon.AmmoType "UAC2_Ammo";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 5;
		Mechbase_Weapon.HardslotSize 1;
		Mechbase_Weapon.CValue 9400;
		Mechbase_Weapon.Cooldown MWCOOL_UAC2, 0;
	}
}

class Autocannon5 : Autocannon2
{
	Default
	{
		Mechbase_Weapon.DisplayName "xAC5";
		Mechbase_Weapon.WeaponType "AC_5";
		Mechbase_Weapon.AmmoType "AC5_Ammo";
		Mechbase_Weapon.WeaponMode2 "LBX_AC_5", "LBX_AC5_Ammo", "LB-X AC5";
		Mechbase_Weapon.Tonnage 7;
		Mechbase_Weapon.HardslotSize 4;
		Mechbase_Weapon.CValue 9250;
		Mechbase_Weapon.Cooldown MWCOOL_AC5, 0;
	}	
}
class UAutocannon5 : UAutocannon2
{
	Default
	{
		Mechbase_Weapon.DisplayName "UAC5";
		Mechbase_Weapon.WeaponType "UAC_5";
		Mechbase_Weapon.AmmoType "UAC5_Ammo";
		Mechbase_Weapon.Tonnage 7;
		Mechbase_Weapon.HardslotSize 4;
		Mechbase_Weapon.CValue 11600;
		Mechbase_Weapon.Cooldown MWCOOL_UAC5, 0;
	}
}

class Autocannon10 : Autocannon2
{
	Default
	{
		Mechbase_Weapon.DisplayName "xAC10";
		Mechbase_Weapon.WeaponType "AC_10";
		Mechbase_Weapon.WeaponMode2 "LBX_AC_10", "LBX_AC10_Ammo", "LB-X AC10";
		Mechbase_Weapon.AmmoType "AC10_Ammo";
		Mechbase_Weapon.Tonnage 10;
		Mechbase_Weapon.HardslotSize 7;
		Mechbase_Weapon.CValue 12850;
		Mechbase_Weapon.Cooldown MWCOOL_AC10, 0;
	}	
}
class UAutocannon10 : UAutocannon2
{
	Default
	{
		Mechbase_Weapon.DisplayName "UAC10";
		Mechbase_Weapon.WeaponType "UAC_10";
		Mechbase_Weapon.AmmoType "UAC10_Ammo";
		Mechbase_Weapon.Tonnage 10;
		Mechbase_Weapon.HardslotSize 7;
		Mechbase_Weapon.CValue 10250;
		Mechbase_Weapon.Cooldown MWCOOL_UAC10, 0;
	}
}
class Autocannon20 : Autocannon2
{
	Default
	{
		Mechbase_Weapon.DisplayName "xAC20";
		Mechbase_Weapon.WeaponType "AC_20";
		Mechbase_Weapon.AmmoType "AC20_Ammo";
		Mechbase_Weapon.WeaponMode2 "LBX_AC_20", "LBX_AC20_Ammo", "LB-X AC20";
		Mechbase_Weapon.Tonnage 12;
		Mechbase_Weapon.HardslotSize 7;
		Mechbase_Weapon.CValue 13480;
		Mechbase_Weapon.Cooldown MWCOOL_AC20, 0;
	}	
}
class UAutocannon20 : UAutocannon2
{
	Default
	{
		Mechbase_Weapon.DisplayName "UAC20";
		Mechbase_Weapon.WeaponType "UAC_20";
		Mechbase_Weapon.AmmoType "UAC20_Ammo";
		Mechbase_Weapon.Tonnage 12;
		Mechbase_Weapon.HardslotSize 7;
		Mechbase_Weapon.CValue 15850;
		Mechbase_Weapon.Cooldown MWCOOL_UAC20, 0;
	}
}

class GaussRifle : Mechbase_Weapon
{
	Default
	{
		Mechbase_Weapon.DisplayName "GAUSS";
		Mechbase_Weapon.AmmoType "GaussRounds";
		Mechbase_Weapon.WeaponType "Gauss";
		Mechbase_Weapon.AmmoUse 1;
		Mechbase_Weapon.Tonnage 12;
		Mechbase_Weapon.HardslotSize 8;
		Mechbase_Weapon.CValue 14830;
		Mechbase_Weapon.Cooldown MWCOOL_GAUSS, 0;
	}
}