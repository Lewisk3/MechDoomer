class MechAmmoDispenser : Inventory
{

	Array<String> dispense;
	Array<Int> dispense_amt;
	string realmsg;
	
	virtual void DispenseInit() {}
	
	void addAmmo(String type, int amt)
	{
		dispense.push(type);
		dispense_amt.push(amt);
	}
	override bool TryPickup (in out Actor toucher)
	{
		let plr = MechWarriorBase(toucher);
		if(!plr || !plr.inv_context) return false;

		// Throw all ammo into dispenser.
		dispense.Clear();
		DispenseInit();
		if(plr)
		{
			realmsg = "";
			for(int i = 0; i < dispense.Size(); i++)
			{
				String suffix = i+1 >= dispense.Size() ? "" : "\n";
				realmsg = realmsg .. String.Format("Ammo pickup: %s, %d%s",dispense[i] .. "",dispense_amt[i],suffix); 
				//if(dispense[i] == "heatsink"){ plr.giveHeatsinks(dispense_amt[i]); continue; }
				plr.inv_context.GiveItems(dispense[i],dispense_amt[i]);
			}
		}
		GoAwayAndDie();
		return true;
	}
	override String PickupMessage () { return realmsg; }
}
class MechInvDispenser : Inventory
{

	Array<String> dispense;
	Array<Int> dispense_amt;
	string realmsg;
	
	virtual void DispenseInit() {}
	
	void addItem(String type, int amt)
	{
		dispense.push(type);
		dispense_amt.push(amt);
	}
	override bool TryPickup (in out Actor toucher)
	{
		let plr = MechWarrior(toucher);
		if(!plr || !plr.inv_context) return false;
		
		// Throw all ammo into dispenser.
		dispense.Clear();
		DispenseInit();
		if(plr)
		{
			realmsg = "";
			for(int i = 0; i < dispense.Size(); i++)
			{
				String suffix = i+1 >= dispense.Size() ? "" : "\n";
				realmsg = realmsg .. String.Format("Item pickup: %s, %d%s",dispense[i] .. "",dispense_amt[i],suffix); 
				//if(dispense[i] == "heatsink"){ plr.giveHeatsinks(dispense_amt[i]); continue; }
				plr.addWeaponToInv(dispense[i],dispense_amt[i]);
			}
		}
		GoAwayAndDie();
		return true;
	}
	override String PickupMessage () { return realmsg; }
}

// Heatsinks
class Heatsink_Pickup : MechInvDispenser replaces Cell
{
	override void DispenseInit()
	{	
		bool dbl = (random(1,4)==4);
		if(!dbl)addItem("Heatsink",random(1,2));
		if(dbl)
		{
			scale.y = 1.5;
			addItem("DoubleHeatsink",random(1,2));
		}
	}
	States
	{
		Spawn:
			TNT1 A 0;
			HSNK A -1;
		stop;
	}
}

class BigHeatsink_Pickup : MechInvDispenser replaces CellPack
{
	override void DispenseInit()
	{	
		bool dbl = random(0,1);
		if(!dbl)addItem("Heatsink",random(2,4));
		if(dbl)
		{
			addItem("DoubleHeatsink",random(2,4));
		}
	}
	States
	{
		Spawn:
			TNT1 A 0;
			HSNK A -1;
		stop;
	}
}

// Ammo replacements
class MGUNAmmoDisp_Box : MechAmmoDispenser replaces ClipBox
{
	Default
	{
		XScale 2.0;
		YScale 2.0;
	}

	override void DispenseInit()
	{	
		addAmmo("BulletsMGun",1);
		addAmmo("AC2_Ammo",1);
		if(random(0,1)==1) addAmmo("UAC2_Ammo",1);
		if(random(0,2)==2) addAmmo("AC5_Ammo",1);
		if(random(0,4)==4) addAmmo("UAC5_Ammo",1);
	}
	States
	{
	  Spawn:
		 AMMO A 1 NoDelay
		 {
			if(random(0,2)==2) 
			{
				Spawn("Heatsink_Pickup",pos);
			}
		 }
	  SpawnStop:
	     AMMO A -1;
	  Stop;
    }
}

// Ballistics
class MGUNAmmoDisp_Clip : MechAmmoDispenser replaces Clip
{
	override void DispenseInit()
	{	
		int type = random(0,2);
		if(type==0)addAmmo("BulletsMGun",1);
		if(type==1)addAmmo("AC2_Ammo",1);
		if(type==2)addAmmo("AC5_Ammo",1);
	}
	States
	{
	  Spawn:
	     CLIP A -1;
	  Stop;
    }
}

class ACAmmoDisp : MechAmmoDispenser replaces Shell
{
  override void DispenseInit()
  {	
	int type = random(0,2);
	if(type==0)addAmmo("AC2_Ammo",1);
	if(type==1)addAmmo("AC5_Ammo",1);
	if(type==2)addAmmo("AC10_Ammo",1);
	if(random(1,10)==10)addAmmo("AC20_Ammo",1);
	if(random(1,4)==4)addAmmo("UAC2_Ammo",1);
	if(random(1,6)==6)addAmmo("UAC5_Ammo",1);
	if(random(1,8)==8)addAmmo("UAC10_Ammo",1);
	if(random(1,20)==20)addAmmo("UAC20_Ammo",1);
	if(random(1,10)==10)addAmmo("GaussRounds",1);
  }
  States
  {
  Spawn:
	TNT1 A 0;
    AUTO A -1;
    Stop;
  }
}

class GaussDisp : MechAmmoDispenser replaces ShellBox
{
  override void DispenseInit()
  {	
	 addAmmo("GaussRounds",1);
  }
  States
  {
  Spawn:
	TNT1 A 0;
    GAUS A -1;
    Stop;
  }
}

// Missiles
class MissileAmmoDisp : MechAmmoDispenser replaces RocketAmmo
{
	override void DispenseInit()
	{	
		int type = random(0,2);
		if(type==0)addAmmo("SRM_Ammo",1);
		if(type==2)addAmmo("SSRM_Ammo",1);
		if(type==1)addAmmo("LRM_Ammo",1);
	}
	States
	{
	  Spawn:
		 TNT1 A 0;
		 MISS A -1;
	  Stop;
	}
}

class MissileBoxAmmoDisp : MissileAmmoDisp replaces RocketBox
{
	Default
	{
		XScale 1.5;
		YScale 1.5;
	}
	
	override void DispenseInit()
	{	
		addAmmo("SRM_Ammo",1);
		addAmmo("LRM_Ammo",1);
		addAmmo("SSRM_Ammo",1);
	}
}




