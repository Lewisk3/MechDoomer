class MechWeaponDispenser : Inventory
{
	Array<String> weaponNames;
	Array<String> items;
	Array<Int> items_amt;
	Array<String> dispense;
	Array<Int> dispense_amt;
	class<MechWarrior> base;
	MechWarrior mechtoucher;
	
	Property requireMech : base;
	
	void addItem(String type, int amt)
	{
		items.push(type);
		items_amt.push(amt);
	}
	void addStruct(String type, int amt)
	{
		dispense.push(type);
		dispense_amt.push(amt);
	}
	void addWeapon(String weapon)
	{
		weaponNames.push(weapon);
	}
	
	virtual void setupWeapons()
	{
	}
	
	bool giveWeapons(MechWarrior mech)
	{
		items.Clear();
		items_amt.Clear();
		weaponNames.Clear();
		setupWeapons();
		if(mech)
		{
			if(base)
			{
				if(base != mech.GetClass()) return false;
			}
			// These should all be filled evenly.
			if(items.Size() != items_amt.Size()) return false;
			if(dispense.Size() != dispense_amt.Size()) return false;
			
			for(int i = 0; i < weaponNames.Size(); i++)
			{
				mech.addWeaponToInv(weaponNames[i]);
			}
			for(int x = 0; x < items.Size(); x++)
			{
				items[x].ToLower();
				mech.GiveInventory(items[x],items_amt[x]);
			}
			for(int i = 0; i < dispense.Size(); i++)
			{
				mech.addWeaponToInv(dispense[i],dispense_amt[i]);
			}
			
			return true;
		}
		return false;
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		mechtoucher = MechWarrior(toucher);
		bool result = giveWeapons(mechtoucher);;
		if(result)GoAwayAndDie();
		return result; //result;
	}
}

class EnergyWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		Array<String> weapons;
		weapons.push("MediumLaser");
		weapons.push("SmallLaser");
		weapons.push("LargeLaser");
		if(random(1,2)==2)weapons.push("ERLargeLaser");
		if(random(1,2)==2)weapons.push("ERMediumLaser");
		if(random(1,2)==2)weapons.push("ERSmallLaser");
		if(random(1,4)==4)weapons.push("PPC");
		if(random(1,6)==6)weapons.push("ERPPC");
		
		int weap = random(0,weapons.Size()-1);
		addWeapon(weapons[weap]);
		realmsg = "Picked up " .. weapons[weap];
	}
	
	override String PickupMessage () { return realmsg; }
}


class SRMWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		Array<String> weapons;
		Array<String> items;
		weapons.push("SRM2");
		weapons.push("SRM4");
		weapons.push("SRM6");
		if(random(1,2)==2)weapons.push("SSRM2");
		if(random(1,2)==2)weapons.push("SSRM4");
		if(random(1,2)==2)weapons.push("SSRM6");
		items.push("AntiMissileSystem");
		items.push("AMSAmmo");
		
		int weap = random(0,weapons.Size()-1);
		int item = random(0,items.Size()-1);
		
		if(weap > weapons.Size()-1 && items.Size() > 0) 
		{
			int amt = random(1,2);
			addStruct(items[item],amt);
			realmsg = "Picked up " .. items[item] .. " x" ..amt;
		}
		if(weap <= weapons.Size()-1)
		{
			addWeapon(weapons[weap]);
			realmsg = "Picked up " .. weapons[weap];
		}
	}
	
	override String PickupMessage () { return realmsg; }
}
class LRMWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		Array<String> weapons;
		weapons.push("LRM5");
		weapons.push("LRM10");
		weapons.push("LRM15");
		if(random(1,2)==6)weapons.push("LRM15");
		if(random(1,4)==8)weapons.push("LRM20");
		
		int weap = random(0,weapons.Size()-1);
		addWeapon(weapons[weap]);
		realmsg = "Picked up " .. weapons[weap];
	}
	
	override String PickupMessage () { return realmsg; }
}
class ACWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		Array<String> weapons;
		weapons.push("Autocannon2");
		weapons.push("UAutocannon2");
		weapons.push("MachineGun");
		weapons.push("Autocannon5");
		if(random(1,2)==2)weapons.push("UAutocannon5");
		if(random(1,2)==2)weapons.push("Autocannon10");
		if(random(1,4)==4)weapons.push("UAutocannon10");
		if(random(1,4)==4)weapons.push("Autocannon20");
		if(random(1,4)==4)weapons.push("UAutocannon20");
		
		int weap = random(0,weapons.Size()-1);
		addWeapon(weapons[weap]);
		realmsg = "Picked up " .. weapons[weap];
	}
	
	override String PickupMessage () { return realmsg; }
}
class GaussWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		addWeapon("GaussRifle");
		realmsg = "Picked up GaussRifle";
	}
	
	override String PickupMessage () { return realmsg; }
}

class PlasmaWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		Array<String> weapons;
		weapons.push("SmallPulseLaser");
		weapons.push("MediumPulseLaser");
		weapons.push("LargePulseLaser");
		if(random(1,2)==2)weapons.push("Flamer");
		
		int weap = random(0,weapons.Size()-1);
		addWeapon(weapons[weap]);
		realmsg = "Picked up " .. weapons[weap];
	}
	
	override String PickupMessage () { return realmsg; }
}

class MassiveWeaponDispenser : MechWeaponDispenser
{
	String realmsg;
	
	override void setupWeapons()
	{
		Array<String> picked;
		Array<String> weapons;
		weapons.push("MediumLaser");
		weapons.push("SmallLaser");
		weapons.push("LargeLaser");
		weapons.push("ERLargeLaser");
		weapons.push("ERMediumLaser");
		weapons.push("ERSmallLaser");
		weapons.push("PPC");
		weapons.push("ERPPC");
		weapons.push("SmallPulseLaser");
		weapons.push("MediumPulseLaser");
		weapons.push("LargePulseLaser");
		weapons.push("Flamer");
		weapons.push("Autocannon2");
		weapons.push("UAutocannon2");
		weapons.push("MachineGun");
		weapons.push("Autocannon5");
		weapons.push("UAutocannon5");
		weapons.push("Autocannon10");
		weapons.push("UAutocannon10");
		weapons.push("Autocannon20");
		weapons.push("UAutocannon20");
		weapons.push("SRM2");
		weapons.push("SRM4");
		weapons.push("SRM6");
		weapons.push("SSRM2");
		weapons.push("SSRM4");
		weapons.push("SSRM6");
		weapons.push("LRM5");
		weapons.push("LRM10");
		weapons.push("LRM15");
		weapons.push("LRM20");
		weapons.push("AntiMissileSystem");
		
		for(int i = 0; i < 3; i++)
		{
			int weap = random(0,weapons.Size()-1);
			class<Mechbase_Weapon> mweap = weapons[weap];
			class<Mechbase_Utility> mutil = weapons[weap];
			if(mweap) addWeapon(weapons[weap]);
			if(mutil) addStruct(weapons[weap],random(1,2));
			picked.push(weapons[weap]);
		}
		realmsg = "Picked up 3 weapons: " .. picked[0] .. ", " .. picked[1] .. ", " .. picked[2];
	}
	
	override String PickupMessage () { return realmsg; }
}

class EnergyWeaponDisp : EnergyWeaponDispenser replaces Shotgun
{
	override void PostBeginPlay(){ if(random(1,2)==2)GoAwayAndDie(); }
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			LASR A 1;
		loop;
	}
}

class SRMWeaponDisp : SRMWeaponDispenser replaces RocketLauncher
{
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			MISS A 1;
		loop;
	}
}
class LRMWeaponDisp : LRMWeaponDispenser replaces SuperShotgun
{
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			MISS A 1;
		loop;
	}
}
class ACWeaponDisp : ACWeaponDispenser replaces Chaingun
{
	override void PostBeginPlay(){ if(random(1,2)==2)GoAwayAndDie(); }
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			AUTO A 1;
		loop;
	}
}
class GaussWeaponDisp : GaussWeaponDispenser replaces Chainsaw
{
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			GAUS A 1;
		loop;
	}
}
class PlasmaWeaponDisp : PlasmaWeaponDispenser replaces PlasmaRifle
{
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			LASR A 1;
		loop;
	}
}

class MassiveWeaponDisp :  MassiveWeaponDispenser replaces BFG9000
{
	override void tick()
	{
		angle++;
		super.tick();
	}

	States
	{
		Spawn:
			TNT1 A 0;
			MASS A 1;
		loop;
	}
}