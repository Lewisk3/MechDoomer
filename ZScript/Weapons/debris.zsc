
// Debris
class MissileDebris : Actor
{
	Default
	{
		Gravity 1.0;
		Radius 11;
		Height 8;
	}
	States
	{
		Spawn:
			MISS A 1
			{
				vector3 floorpos = (pos.x,pos.y,floorz);
				pitch = MDMath.Lerp(pitch, MDMath.getPitchBetween(pos, floorpos), 0.4);
			}
			TNT1 A 0 A_JumpIf(pos.z != floorz, "Spawn");
		DeathWait:
			MISS A 1 A_FadeOut(0.005);
		wait;
	}
}

class Debris_Spawner : Actor
{
	int pieces;
	double spread;
	double scale;
	class<Actor> debris_type;
	property Debris : debris_type, scale;
	
	Default
	{
		+NOINTERACTION;
		Debris_Spawner.Debris "DEBRIS_3D", 1.0;
	}

	override void PostBeginPlay()
	{
		for(int i = 0; i < pieces; i++)
		{
			int angle = angle+random(-360,360);
			int speed = 3;
			Vector3 npos = pos;
			double xo = -(cos(angle)*spread);
			double yo = -(sin(angle)*spread);
			double zo = frandom(-spread, spread);
			npos.x += xo;
			npos.y += yo;
			npos.z += zo;
			let debris = Spawn(debris_type,npos);
			if(debris)
			{
				if(!damage) debris.bSOLID = false;
				debris.SetDamage(damage); // Small cluster damage.
				debris.A_SetRoll(roll+random(-180,180));
				debris.pitch = pitch;
				debris.A_SetScale(scale, scale);
				debris.vel = 
				(
					cos(angle+180)*cos(debris.pitch),
					sin(angle+180)*cos(debris.pitch),
					sin(debris.pitch+frandom(-45,45))*speed
				) * speed;
			}
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
		stop;
	}
}
class DEBRIS_3D : Actor
{
	Default
	{
		Damage 0;
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		BounceType "Doom";
		BounceCount 4;
		BounceFactor 0.6;
		Gravity 0.3;
		Projectile;
		-NOGRAVITY
		+RIPPER
		+INTERPOLATEANGLES
	}
	
	override void Tick()
	{
		A_SetPitch(pitch+8, SPF_INTERPOLATE);
		super.Tick();
	}

	States
	{
		Spawn:
			DEBR A 1;
		loop;
		Bounce:
			DEBR A 1
			{
				A_SetRoll(roll+frandom(-45,45));
				A_SetPitch(pitch+frandom(-60,60));
				A_SetAngle(angle+frandom(-90,90));
			}
		goto DeathLoop;
		Death:
			DEBR A 1;
			TNT1 A 0 { bSOLID = false; }
		DeathLoop:
			DEBR A 1 
			{
				A_SetScale(scale.x*0.97,scale.y*0.97);
				if(scale.x <= 0.2 || scale.y <= 0.2) return ResolveState("DeathFinal");
				return ResolveState(null);
			}
		loop;
		DeathFinal:
			DEBR A 1 A_FadeOut(0.03);
		wait;
	}
}
class Gauss_Debris : DEBRIS_3D {}