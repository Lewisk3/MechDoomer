
// Debris
class MissileDebris : Actor
{
	Default
	{
		Gravity 1.0;
		Radius 11;
		Height 8;
	}
	States
	{
		Spawn:
			MISS A 1
			{
				vector3 floorpos = (pos.x,pos.y,floorz);
				pitch = MDMath.Lerp(pitch, MDMath.getPitchBetween(pos, floorpos), 0.4);
			}
			TNT1 A 0 A_JumpIf(pos.z != floorz, "Spawn");
		DeathWait:
			MISS A 1 A_FadeOut(0.005);
		wait;
	}
}

class Debris_Spawner : Actor
{	
	Default
	{
		+NOINTERACTION;
	}
	
	static void SpawnDebris( class<Actor> type, Actor src, int pieces, int dmg = 0, double size = 1.0, 
							 double speed = 10, vector3 angoffs = (30,60,180), 
							 vector2 posoffs = (30,30), vector2 zoffs = (0,5) )
	{
		for(int i = 0; i < pieces; i++)
		{
			double dbangle  = src.angle+frandom(-angoffs.x, angoffs.x);
			double dbpitch  = src.pitch+frandom(-angoffs.y, angoffs.y); 
			double dbroll   = src.roll+frandom(-angoffs.z,angoffs.z);
			double cosp     = cos(dbpitch);
			vector2 xyoffs  = LaserGlobals.VOffset(src.angle, posoffs.x, posoffs.y);
			vector3 posoffs = (xyoffs.x, xyoffs.y, frandom(zoffs.x, zoffs.y));
			let debris = Spawn(type,level.Vec3Offset(src.pos,posoffs));
			if(debris)
			{
				if(!dmg) debris.bSOLID = false;
				debris.SetDamage(dmg); // Small cluster damage.
				debris.pitch = dbpitch;
				debris.angle = dbangle;
				debris.roll  = dbroll;
				debris.A_SetScale(size, size);
				debris.vel = 
				(
					cos(dbangle)*cosp,
					sin(dbangle)*cosp,
					-sin(dbpitch)
				) * speed;
			}
		}
	}
}
class DEBRIS_3D : Actor
{
	Default
	{
		Damage 0;
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		BounceType "Doom";
		BounceCount 4;
		BounceFactor 0.6;
		Gravity 0.3;
		Projectile;
		-NOGRAVITY
		+RIPPER
		+INTERPOLATEANGLES
	}
	
	override void Tick()
	{
		if(!damage) 
		{
			bRIPPER = false;
			bSOLID = false;
		}
		A_SetPitch(pitch+8, SPF_INTERPOLATE);
		super.Tick();
	}

	States
	{
		Spawn:
			DEBR A 1;
		loop;
		Bounce:
			DEBR A 1
			{
				A_SetRoll(roll+frandom(-45,45));
				A_SetPitch(pitch+frandom(-60,60));
				A_SetAngle(angle+frandom(-90,90));
			}
		goto DeathLoop;
		Death:
			DEBR A 1;
			TNT1 A 0 { bSOLID = false; }
		DeathLoop:
			DEBR A 1 
			{
				A_SetScale(scale.x*0.97,scale.y*0.97);
				if(scale.x <= 0.2 || scale.y <= 0.2) return ResolveState("DeathFinal");
				return ResolveState(null);
			}
		loop;
		DeathFinal:
			DEBR A 1 A_FadeOut(0.03);
		wait;
	}
}
class Gauss_Debris : DEBRIS_3D {}
class Spark_Debris : DEBRIS_3D
{
	Default
	{
		BounceCount 0;
		Gravity 0.05;
		Projectile;
		+NOINTERACTION;
		-SOLID;
		-NOGRAVITY
		-RIPPER
		+INTERPOLATEANGLES
	}
	
	States
	{
		Spawn:
			DEBR A 1 A_FadeOut(0.1);
		wait;
	}
}