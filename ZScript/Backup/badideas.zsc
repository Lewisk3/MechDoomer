// Weapon related utilities
class ExtendedActorChecks : Actor
{
	static bool TryTracerHit(Actor origin, Actor thing, int numrays = 40, double ang = 90, double distance = 500*64, double vrange = 32)	
	{
		FTranslatedLineTarget t;

		// offset angles from its attack ang
		for (int i = 0; i < numrays; i++)
		{
			double an = origin.angle - ang / 2 + ang / numrays*i;

			origin.AimLineAttack(an, distance, t, vrange);
		
			if (t.linetarget != null)
			{
				if(t.linetarget == thing) return true;
			}
		}
		return false;
	}
}

// Grab exact relative angle
angle_relative += (player.cmd.yaw/1.6) * (360./65536.);
angle_relative = clamp(angle_relative,LegAng - MaxYaw,LegAng + MaxYaw);
	
// Lerp to new angle
if(angle_relative > torsoYaw) torsoYaw += torsoSpeed;
if(angle_relative < torsoYaw) torsoYaw -= torsoSpeed;

// Crude voodoo "Detector"
ThinkerIterator voodoocheck = ThinkerIterator.Create("MechWarrior");
int plrinstances = 0;
MechWarrior plr;
while(plr = MechWarrior(voodoocheck.Next()))
{
	if(plr)plrinstances++;
}
// Darn voodoos!
if(plrinstances > 1) A_Print("WARNING: Duplicate player detected, mech may behave strangly!");

// :: KeyConf :: 
	
// Old (Deprecated) Key system.

/*
alias Mech_Stop "netevent \"giveinvbutton:IBTN_STOP\""
alias Mech_Center_Legs "netevent \"giveinvbutton:IBTN_CENTER\""
alias Mech_Center_Torso "netevent \"giveinvbutton:IBTN_CENTERTORSO\""
alias Mech_Weapon_Firemode "netevent \"giveinvbutton:IBTN_bFIREMODE\""
alias Mech_JumpJets_Fire "" // Special event handled key!
alias Mech_Override "netevent \"giveinvbutton:IBTN_OVERRIDE\""
alias Mech_NextGroup "netevent \"giveinvbutton:IBTN_NXTGROUP\""
alias Mech_PrevGroup "netevent \"giveinvbutton:IBTN_PRVGROUP\""
alias Mech_SetWeapGrp1 "netevent \"mechsetgroup:1\""
alias Mech_SetWeapGrp2 "netevent \"mechsetgroup:2\""
alias Mech_SetWeapGrp3 "netevent \"mechsetgroup:3\""
alias Mech_SetWeapGrp4 "netevent \"mechsetgroup:4\""
alias Mech_ToggleInfrared "give IBTN_INFRARED"
alias Mech_NextWeap "netevent \"giveinvbutton:IBTN_NEXTWEAPON\""
alias Mech_PrevWeap "netevent \"giveinvbutton:IBTN_PREVWEAPON\""
alias Mech_TargetEnemy "netevent \"giveinvbutton:IBTN_TARGET\""
alias Mech_Alphastrike "netevent \"giveinvbutton:IBTN_SHOOTALLWEAPONSLIKEAMADLAD\""
alias Mech_Shutdown "netevent \"giveinvbutton:IBTN_SHUTDOWN\""
alias Mech_LoadoutUI ""

addkeysection "MechDoomer - Actions" "MWD_CONTROLS"
addmenukey "Stop Mech" Mech_Stop
addmenukey "Edit Loadout" Mech_LoadoutUI
addmenukey "Target Enemy" Mech_TargetEnemy
addmenukey "Override Shutdown" Mech_Override
addmenukey "Shutdown" Mech_Shutdown
addmenukey "Toggle Zoom" "+zoom"
addmenukey "Toggle Infrared" Mech_ToggleInfrared;
addmenukey "Jump Jets" Mech_JumpJets_Fire 
addmenukey "Center Legs to Torso" Mech_Center_Legs
addmenukey "Center Torso to Legs" Mech_Center_Torso
addkeysection "MechDoomer - Weapons" "MWD_WEAPONS"
addmenukey "Next Weapon" Mech_NextWeap
addmenukey "Prev Weapon" Mech_PrevWeap
addmenukey "Next Group" Mech_NextGroup
addmenukey "Prev Group" Mech_PrevGroup
addmenukey "Toggle Firemode" Mech_Weapon_Firemode
addmenukey "Set Group One" Mech_SetWeapGrp1
addmenukey "Set Group Two" Mech_SetWeapGrp2
addmenukey "Set Group Three" Mech_SetWeapGrp3
addmenukey "Set Group Four" Mech_SetWeapGrp4
addmenukey "Fire Group One" "+user1"
addmenukey "Fire Group Two" "+user2"
addmenukey "Fire Group Three" "+user3"
addmenukey "Fire Group Four" "+user4"
addmenukey "Fire All Weapons" Mech_Alphastrike
*/


// Old Infrared
class InfraredAmp : PowerLightAmp 
{
	int fadeto;
	bool activate;
	
	Default
	{
		Powerup.Duration 0x7FFFFFFD; // lasts about 2 years;
	}
	
	override void PostBeginPlay()
	{
		fadeto = BlendColor.a;
		BlendColor.a = 0;
	}
	
	override void tick()
	{
		if(BlendColor.a < fadeto)
		{
			BlendColor.a += (fadeto) / (35 * 0.3); // .3 Second fade
			Colormap = ((BlendColor & 0xFFFF0000) == SPECIALCOLORMAP_MASK)? BlendColor & 0xffff : PlayerInfo.NOFIXEDCOLORMAP;
		}
		
		// Activate powerup halfway through fade.
		if(BlendColor.a > fadeto/2)	activate = true;
		
	}
	
	override void DoEffect()
	{
		if(activate) super.DoEffect();
	}
}
class InfraredGiver : PowerupGiver
{
	Default
	{
		+INVENTORY.AUTOACTIVATE
		Inventory.MaxAmount 0;
		Powerup.Type "InfraredAmp";
		Powerup.Color "DB 35 18", 0.437;
		Inventory.PickupMessage "Infrared Engaged";
	}
}

// Old modeldef(s)
Model Timberwolf
{
	Path "models"
	Model 0 "timberwolf.md3"
	//Skin 0 "Stormcrow.png"
	SurfaceSkin 0 0  "blank.png" // RL_LRToe
	SurfaceSkin 0 1  "blank.png" // RL_BToe
	SurfaceSkin 0 2  "Cockpit_Glass.png" // Head
	SurfaceSkin 0 3  "blank.png" // RL_Lower
	SurfaceSkin 0 4  "blank.png" // RL_FTow
	SurfaceSkin 0 5  "blank.png" // RL_Upper
	SurfaceSkin 0 6  "blank.png" // LL_Upper
	SurfaceSkin 0 7  "blank.png" // LL_LRToe
	SurfaceSkin 0 8  "blank.png" // LL_FToe
	SurfaceSkin 0 9  "blank.png" // LL_Lower
	SurfaceSkin 0 10 "Metal.png" // RA_Upper
	SurfaceSkin 0 11 "Metal.png" // LA_Upper
	SurfaceSkin 0 12 "blank.png" // MB_Lower
	SurfaceSkin 0 13 "Metal.png" // MB_Upper
	SurfaceSkin 0 14 "Metal_Dark.png" // WP_Arms
	SurfaceSkin 0 15 "Missiles.png" // WP_Body
	SurfaceSkin 0 16 "wolf_metal.png" // WP_Side
	SurfaceSkin 0 17 "blank.png" // WP_Body
	Scale 15.0 15.0 15.0
	ZOffset 0
	AngleOffset 90
	
   FrameIndex PLAY A 0 0
   FrameIndex PLAY B 0 0
   FrameIndex PLAY C 0 0
   FrameIndex PLAY D 0 0
   FrameIndex PLAY E 0 0
   FrameIndex PLAY F 0 0
   FrameIndex PLAY G 0 0
   
}

/*
	int animtimer;
	int onframe;

	frame = onframe;
	if(!animtimer) 
	{
		onframe++;
		animtimer = 4;
	}
	else
	{
		animtimer--;
	}	
	if(onframe > 8) onframe = 1;
	console.printf("Frame %d", frame);
	if(!isMoving()) return ResolveState("Spawn");
	return ResolveState(Null);
*/