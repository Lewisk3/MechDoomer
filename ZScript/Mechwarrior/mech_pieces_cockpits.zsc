// Camera Drone
class MechCamera : Actor
{
	MechWarriorBase mechowner;
	vector3 followpos;
	float followdist;
	float followdist_desired;
	float followdist_max;
	float rotangle;
	float rotspd;
	bool frontcam;
	
	Property FollowDistance : followdist;
	
	Default
	{
		+NOGRAVITY;
		Radius 1;
		Height 1;
		MechCamera.FollowDistance 50;
	}
		
	static MechCamera Create(MechWarriorBase torso, float dist, float rotation, bool frontfacing=false)
	{
		let cam = MechCamera(Spawn("MechCamera"));
		if(cam) 
		{
			cam.mechowner = torso;
			cam.followdist_desired = dist;
			cam.followdist_max = dist;
			cam.rotspd = rotation;
			cam.frontcam = frontfacing;
			torso.player.camera = cam;
		}
		return cam;
	}
	
	vector3 GetFollowPos()
	{
		float zoffs = (mechowner.viewheight);
		float trueangle = !rotangle ? mechowner.angle : rotangle;
		float dmul = followdist*(frontcam ? -1 : 1);
		FLineTraceData lndata;
		mechowner.LineTrace(angle+180,followdist_max,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,zoffs+sin(mechowner.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			followdist_desired = lndata.Distance;
			if(followdist > followdist_desired) followdist = followdist_desired;
		}
		else
		{	
			followdist_desired = followdist_max;
		}
		
		// Backwards interpolate from player center to new pos.
		// This makes clipping out of walls a bit less noticable
		// because, instead of going from inside the wall in, we're going
		// from inside the player out to the wall.
		
		vector3 origpos = mechowner.Vec3Offset(
			-cos(trueangle),
			-sin(trueangle),
			zoffs+sin(mechowner.pitch)
		);
		vector3 newfollowpos = mechowner.Vec3Offset(
			-cos(trueangle)*dmul,
			-sin(trueangle)*dmul,
			zoffs+sin(mechowner.pitch)*dmul
		);
		if(!followpos.length()) followpos = newfollowpos;
		newfollowpos = MDMath.Lerp3D(origpos, newfollowpos, 0.6);
		return newfollowpos;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			if(followdist < followdist_desired && mechowner.dronecam_active) 
				followdist = MDMath.Lerp(followdist,followdist_desired,0.05);
				
			float lerpspd = 0.15;
			rotangle += rotspd;
			vector3 newfollowpos = GetFollowPos();
			
			if(!mechowner.dronecam_active)
			{
				if(Distance2D(mechowner) <= 24) Destroy();
				followdist = MDMath.Lerp(followdist,0,0.10);
				if(followdist <= 10) lerpspd=1;
			}
			followpos = MDMath.Lerp3D(followpos, newfollowpos, lerpspd);
			angle = AngleTo(mechowner);
			pitch = MDMath.getPitchBetween(pos,(mechowner.pos.x,mechowner.pos.y,mechowner.pos.z+mechowner.viewheight));
			SetOrigin(followpos,true);
		}
	}	
	
	States
	{
		Spawn:
			MCAM A 1;
		loop;
	}
}

// Parts base
class MechPartsBase : Actor
{
	MechwarriorBase mechowner;
	float zoffs;
	float cxoffs;
	float czoffs;
	Property ZOffset : zoffs;
	Property CockpitOffset : cxoffs, czoffs;
	
	Default
	{
		+NOGRAVITY;
		MechPartsBase.ZOffset 0;
		MechPartsBase.CockpitOffset 0, 60;
	}
	
	virtual vector3 getMechPos()
	{
		vector3 basepos = mechowner.Vec3Offset(0,0,zoffs);
		return basepos;
	}
	
	override void tick()
	{
		super.Tick();
		if(mechowner) SetOrigin(getMechPos(),true);
	}	
	
	static MechPartsBase Create(class<MechPartsBase> part, MechWarriorBase base)
	{
		let mwpart = MechPartsBase(Spawn(part));
		if(mwpart)
		{
			mwpart.mechowner = base;
			mwpart.frame = 0;
		}
		return mwpart;
	}
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

// Cockpit cameras
class MechCockpitCamera : MechPartsBase
{
	float defz;	
	override vector3 getMechPos()
	{
		vector3 basepos = mechowner.Vec3Offset(cos(mechowner.angle)*cxoffs,sin(mechowner.angle)*cxoffs,czoffs);
		return basepos;
	}
	override void tick()
	{
		if(!defz) defz = czoffs;
		if(mechowner) 
		{
			CameraFOV = mechowner.player.FOV;
			angle = mechowner.angle;
			pitch = mechowner.pitch;
			roll = mechowner.roll;
			czoffs = defz+mechowner.viewzoffs;
		}
		super.tick();
	}
}
class MechCockpitModel : MechPartsBase
{
	float defz;	
	float mxoffs;
	float mzoffs;
	Property Offset: mxoffs, mzoffs;
	MechPartsBase cockpitcam;
	
	override vector3 getMechPos()
	{
		float fxoffs = cockpitcam.cxoffs+mxoffs;
		float fzoffs = cockpitcam.czoffs+mzoffs;
		vector3 basepos = mechowner.Vec3Offset(cos(mechowner.angle)*fxoffs,sin(mechowner.angle)*fxoffs,fzoffs);
		return basepos;
	}
	
	override void tick()
	{
		if(!cockpitcam)
		{
			Destroy();
			return;
		}
		if(!defz) defz = mzoffs;
		if(mechowner) 
		{
			if( (!mechowner.mech_shutdown && !mechowner.pilotlook) || mechowner.defaultmovement )
			{
				A_SetAngle(mechowner.angle,SPF_INTERPOLATE);
				A_SetPitch(mechowner.pitch,SPF_INTERPOLATE);
				A_SetRoll (mechowner.roll ,SPF_INTERPOLATE);
			}
			mzoffs = defz+mechowner.viewzoffs*0.05;
		}
		super.Tick();
	}
}

// Torsos
class MechTorsoBase : MechPartsBase
{
	bool notwist;
	bool setup;
	MechPartsBase hips;
	MechPartsBase legs;
	MechPartsbase cockpit_camera;
	class<MechPartsBase> hips_type;
	class<MechPartsBase> legs_type;
	class<MechCockpitModel> cockpit_type;
	Property Pieces : hips_type, legs_type, cockpit_type;
	Property DoNotTwist : notwist;
		
	void SetupParts(class<MechPartsBase> phips, class<MechPartsBase> plegs, class<MechCockpitModel> cpit)
	{
		cockpit_camera = MechPartsBase.Create("MechCockpitCamera", mechowner);
		if(phips) hips = MechPartsBase.Create(phips, mechowner);
		if(plegs) legs = MechPartsBase.Create(plegs, mechowner);
		if(hips) hips.zoffs = zoffs;
		if(cockpit_camera) 
		{
			cockpit_camera.cxoffs = cxoffs;
			cockpit_camera.czoffs = czoffs;
		}
		if(cpit) 
		{
			let cockpitmdl = MechCockpitModel(MechPartsBase.Create(cpit, mechowner));
			if(cockpitmdl) cockpitmdl.cockpitcam = cockpit_camera;
		}
		setup = true;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			if(!mechowner.dronecam && !mechowner.dronecam_active && mechowner.player) 
				mechowner.player.camera = cockpit_camera;
			
			if(!setup) SetupParts(hips_type, legs_type, cockpit_type);
			if(!notwist)
			{
				pitch = mechowner.pitch*0.5;
				roll = mechowner.roll*0.3;
				angle = mechowner.angle;
			}
			else
			{
				angle = mechowner.LegAng;
			}
			if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
				Sprite = GetSpriteIndex("TNT1A0");
			else
				Sprite = GetSpriteIndex("TRSOA0");
		}
		super.tick();
	}
	override void OnDestroy()
	{
		if(hips) hips.Destroy();
		if(legs) legs.Destroy();
		if(cockpit_camera) cockpit_camera.Destroy();
	}
	States
	{
		Spawn:
			TRSO A 1;
		loop;
	}
}

// Hips
class MechHipsBase : MechPartsBase
{
	override void tick()
	{
		if(mechowner)
		{
			angle = mechowner.LegAng;
			if(!mechowner.dronecam && !mechowner.CheckVoodoo()) 
				Sprite = GetSpriteIndex("TNT1A0");
			else
				Sprite = GetSpriteIndex("MODLA0");
		}
		super.tick();
	}
}

// Legs
class MechLegsBase : MechPartsBase
{
	float spdrating;
	float stompfriction;
	
	override void tick()
	{
		if(mechowner)
		{
			angle = mechowner.LegAng;
			if((!mechowner.dronecam && mechowner.nofirstpersonlegs) && !mechowner.CheckVoodoo()) 
				Sprite = GetSpriteIndex("TNT1A0");
			else
				Sprite = GetSpriteIndex("TLEGA0");
				
			if(!mechowner.CheckVoodoo())
			{
				float wrating = float(mechowner.inv_context.weapons_tonnage)/100.;
				stompfriction = clamp((0.65) + (wrating*(spdrating)), 0.75, 1.05);
				spdrating = (abs(mechowner.move_throttle) * mechowner.MoveSpeedKPH)/160.;
			}
		}
		super.tick();
	}
	bool isMoving()
	{
		return ( 
			 mechowner && !mechowner.checkVoodoo() && !mechowner.mech_shutdown && 
		    (mechowner.player && mechowner.player.onground) && 
			(mechowner.vel.xy.length() >= 0.08 || mechowner.LegVel) && 
			!mechowner.isdead
		);
	}
	virtual bool checkStepping(bool idle=false, int frameoffs=0)
	{
		if(!mechowner) return false;
		mechowner.stepping = idle ? false : (frame == 3+frameoffs || frame == 8+frameoffs);
		return true;
	}
	States
	{
		Spawn:
			TLEG A 1;
		SpawnIdle:
			"####" "#" 1 A_JumpIf(checkStepping(true) && isMoving(), "WalkCycle");
		loop;
		WalkCycle:
			TLEG BCDEFGHIJ 4 
			{	
				if( (frame == 2 || frame == 7) ) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping() && mechowner.stepping)
				{
					mechowner.vel.xy *= stompfriction;	
				//	A_Quake(2,3,0,250,"");
				};
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 4, 10);
				return !isMoving() ? ResolveState("SpawnIdle") : (tics <= 5 && frame >= 7) ? ResolveState("RunCycle") : ResolveState(Null); 
			}
		loop;
		RunCycle:
			TLEG KLMNOPQRS 4 
			{	
				if( (frame == 10 || frame == 15) ) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(checkStepping(false, 8) && mechowner.stepping) 
				{
					mechowner.vel.xy *= stompfriction;	
				//	A_Quake(2,3,0,250,"");
				}
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 3, 10);
				return !isMoving() ? ResolveState("WalkCycle") : (tics > 5 && frame <= 10) ? ResolveState("WalkCycle") : ResolveState(Null); 
			}
		loop;
	}
}

class Legs_BattleArmor : MechLegsBase 
{
	override void tick()
	{
		super.Tick();
		if(mechowner)
		{
			angle = mechowner.angle;
			if((!mechowner.dronecam && mechowner.nofirstpersonlegs) && !mechowner.CheckVoodoo()) 
				Sprite = GetSpriteIndex("TNT1A0");
			else
				Sprite = GetSpriteIndex("TLEGA0");
				
			if(!mechowner.CheckVoodoo()) spdrating = (mechowner.overfactor * mechowner.MoveSpeedKPH)/160.;
		}
	}
	
	bool isMoving()
	{
		if(!mechowner) return false;
		return mechowner.vel.xy.length() >= 4;
	}
	
	States
	{
		Spawn:
			TLEG A 1;
		SpawnIdle:
			"####" "#" 1 
			{
				if(mechowner && mechowner.player)
				{
					if(isMoving()) return ResolveState("WalkCycle");
					if(mechowner.weapons_fired) return ResolveState("Shoot");
					if(!mechowner.player.onground) return ResolveState("Flying");
					if(mechowner.isdead) return ResolveState("Die");
				}
				return ResolveState(Null);
			}
		loop;
		WalkCycle:
			TLEG BCDEFGHI 3 
			{	
				if(mechowner.player.cmd.buttons & BT_ATTACK) return ResolveState("Shoot");
				if(!mechowner.player.onground) return ResolveState("Flying");
				if(mechowner.isdead) return ResolveState("Die");
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 2, 8);
				return !isMoving() ? ResolveState("SpawnIdle") : ResolveState(Null); 
			}
		loop;
		Shoot:
			TLEG K 4;
		goto SpawnIdle;
		Flying:
			TLEG L 2;
		goto SpawnIdle;
		Die:
			TLEG MNOPQ 8;
		DeathDone:
			TLEG R 1;
		loop;
	}
}

class Legs_Tarantula  : MechLegsBase 
{
	override bool checkStepping(bool idle, int frameoffs)
	{
		if(!mechowner) return false;
		mechowner.stepping = idle ? false : (frame == 0+frameoffs || frame == 2+frameoffs || frame == 6+frameoffs || frame == 8+frameoffs);
		return true;
	}
}

// All mech parts \\

// Cockpits
class Cockpit_Invisible : MechCockpitModel {}

// Hips
class Hips_Invisible   : MechHipsBase {}
class Hips_Jenner 	   : MechHipsBase {}
class Hips_Urbanmech   : MechHipsBase {}
class Hips_Timberwolf  : MechHipsBase {}
class Hips_Stormcrow   : MechHipsBase {}
class Hips_Atlas       : MechHipsBase {}
class Hips_Commando    : MechHipsBase {}
class Hips_Nova    	   : MechHipsBase {}
class Hips_Tarantula   : MechHipsBase {}
// Legs	
class Legs_Invisible   : MechLegsBase {}
class Legs_Timberwolf  : MechLegsBase {}
class Legs_Stormcrow   : MechLegsBase {}
class Legs_Atlas       : MechLegsBase {}
class Legs_Commando    : MechLegsBase {}
class Legs_Jenner      : MechLegsBase {}
class Legs_Urbanmech   : MechLegsBase {}
class Legs_Nova    	   : MechLegsBase {}
// Torsos
class Model_BattleArmor : MechTorsoBase
{
	Default {
		MechTorsoBase.Pieces "Hips_Invisible", "Legs_BattleArmor", "Cockpit_Invisible";
		MechPartsBase.ZOffset 0;
	}
}
class Torso_Timberwolf : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Timberwolf", "Legs_Timberwolf", "Cockpit_Invisible";
		MechPartsBase.ZOffset 50;
	}
}
class Torso_Stormcrow : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Stormcrow", "Legs_Stormcrow", "Cockpit_Invisible";
		MechPartsBase.ZOffset 60;
	}
}
class Torso_Atlas : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Atlas", "Legs_Atlas", "Cockpit_Invisible";
		MechPartsBase.ZOffset 60;
	}
}
class Torso_Commando : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Commando", "Legs_Commando", "Cockpit_Invisible";
		MechPartsBase.ZOffset 40;
	}
}
class Torso_Urbanmech : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Urbanmech", "Legs_Urbanmech", "Cockpit_Invisible";
		MechPartsBase.ZOffset 35;
	}
}
class Torso_Jenner : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Jenner", "Legs_Jenner", "Cockpit_Invisible";
		MechPartsBase.ZOffset 42;
		MechPartsBase.CockpitOffset 25, 42;
	}
}
class Torso_Nova : MechTorsoBase {
	Default {
		MechTorsoBase.DoNotTwist true;
		MechTorsoBase.Pieces "Hips_Nova", "Legs_Nova", "Cockpit_Invisible";
		MechPartsBase.ZOffset 60;
	}
}
class Torso_Tarantula : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Tarantula", "Legs_Tarantula", "Cockpit_Invisible";
		MechPartsBase.ZOffset 60;
	}
}
class Torso_Invisible : MechTorsoBase {
	Default {
		MechTorsoBase.Pieces "Hips_Invisible", "Legs_Invisible", "Cockpit_Invisible";
	}
}