	/*************************\
	|	  Hardpoint System    |
	\*************************/
extend class MechWarriorBase;
	
// Repair System
clearscope int CalculateHardpointRepairCost(MechHardpoint hp, int stat)
{
	int repair_cost = 0;
	float armor_ratio = 1.0 - (!hp.armor ? 1 : hp.armor)/hp.max_armor;
	float internalhp_ratio = 1.0 - (!hp.internalhp ? 1 : hp.internalhp)/hp.max_internal;
	if(stat == 0 && 	 armor_ratio > 0 ) repair_cost = (4750*armor_ratio)+(hp.max_armor*50);
	if(stat == 1 && internalhp_ratio > 0 ) repair_cost = (1250*internalhp_ratio)+(hp.max_internal*25);
	return repair_cost;
}
void RepairHardpointStat(int hindex, int stat)
{
	MechHardpoint hp = hardpoints.FindByIndex(hindex);
	int cost = CalculateHardpointRepairCost(hp,stat);
	if(inv_context.money_cbills < cost) 
	{
		sendHudAlert("Insufficient funds!",Font.CR_DARKRED);
	}
	else
	{
		inv_context.money_cbills -= cost;
		_DoHardpointRepair(hp, stat);
	}
}
void _DoHardpointRepair(MechHardpoint hp, int stats)
{
	if(stats == 0) hp.armor = hp.max_armor;
	if(stats == 1) hp.internalhp = hp.max_internal;	
	sendHudAlert("Hardpoint repaired!",Font.CR_GREEN);
}
void ActivateArmorUtility(class<ArmoryUtility> type, int hindex)
{	
	if(countinv(type) > 0)
	{
		let autil = ArmoryUtility(FindInventory(type));
		let hp = hardpoints.FindByIndex(hindex);
		if(hp) autil.EquipUtil(self,hp);
	}
}

// Damage System
void DamageHardpoint(MechHardpoint hp, float dmg, bool noarmor=false, bool crit=false)
{
	if(hp.armor > 0 && !noarmor) 
	{
		if(hp.armor-dmg <= 0) A_PlaySound("Mech/Damaged/NoArmor",1);
		// Random chance armor doesn't absorb the remaining damage.
		if(dmg > hp.armor && random(1,3)==3) 
		{
			hp.armor = 0;
			DamageHardpoint(hp,dmg-hp.armor,random(0,1));
		}
		else
		{
			hp.armor -= dmg;
			if(hp.armor < 0) hp.armor = 0;
		}
	}
	else if(hp.internalhp > 0)
	{
		if(random(0,20-dmg)==(20-dmg) || crit) 
		{
			A_PlaySound("Mech/Damaged/Critical",3);
			mechsounds.pushSound("Mech/Betty/CriticalHit");
			if(hp == hardpoints.lt) mechsounds.pushSound("Mech/Betty/LeftTorso");
			if(hp == hardpoints.rt) mechsounds.pushSound("Mech/Betty/RightTorso");
			if(hp == hardpoints.la) mechsounds.pushSound("Mech/Betty/LeftArm");
			if(hp == hardpoints.ra) mechsounds.pushSound("Mech/Betty/RightArm");
			if(hp == hardpoints.ll) mechsounds.pushSound("Mech/Betty/LeftLeg");
			if(hp == hardpoints.rl) mechsounds.pushSound("Mech/Betty/RightLeg");
			if(hp == hardpoints.ct) mechsounds.pushSound("Mech/Betty/CenterTorso");
			if(random(0,1)==1)DestroyHardpointItems(hp,false);
		}
		hp.internalhp -= dmg;
		if(hp.internalhp <= 0) 
		{
			hp.internalhp = 0;
			if( random(1,3)==3 ) 
			{
				SpreadHardpointDamage(hp,dmg/2);
				A_PlaySound("Mech/Damaged/Explosion",3);
			}
		
			A_PlaySound("Mech/Damaged/HardpointDead",3);
			if(hp == hardpoints.lt) mechsounds.pushSound("Mech/Betty/LeftTorso");
			if(hp == hardpoints.rt) mechsounds.pushSound("Mech/Betty/RightTorso");
			if(hp == hardpoints.la) mechsounds.pushSound("Mech/Betty/LeftArm");
			if(hp == hardpoints.ra) mechsounds.pushSound("Mech/Betty/RightArm");
			if(hp == hardpoints.ll) mechsounds.pushSound("Mech/Betty/LeftLeg");
			if(hp == hardpoints.rl) mechsounds.pushSound("Mech/Betty/RightLeg");
			if(hp != hardpoints.ct) mechsounds.pushSound("Mech/Betty/Destroyed");

			DestroyHardpointItems(hp);
		}
	}
	else
	{
		SpreadHardpointDamage(hp,dmg);
	}
}
void ProcessHardpointDamage(Name mod, float damage, Actor damager = NULL)
{	
	bool heatdmg = ( mod == "overheating" );
	if(mod == "MechDamage_CT" || (heatdmg && random(1,5)==5) ) DamageHardpoint(hardpoints.ct,damage,heatdmg&&random(0,1));
	if(mod == "MechDamage_LT" || (heatdmg && random(1,3)==3) ) DamageHardpoint(hardpoints.lt,damage,heatdmg&&random(0,1));
	if(mod == "MechDamage_RT" || (heatdmg && random(1,3)==3) ) DamageHardpoint(hardpoints.rt,damage,heatdmg&&random(0,1));
	if(mod == "MechDamage_LA" || (heatdmg && random(1,4)==4) ) DamageHardpoint(hardpoints.la,damage,heatdmg&&random(0,1));
	if(mod == "MechDamage_RA" || (heatdmg && random(1,4)==4) ) DamageHardpoint(hardpoints.ra,damage,heatdmg&&random(0,1));
	if(mod == "MechDamage_LL" || (heatdmg && random(1,7)==7) ) DamageHardpoint(hardpoints.ll,damage,heatdmg&&random(0,1));
	if(mod == "MechDamage_RL" || (heatdmg && random(1,7)==7) ) DamageHardpoint(hardpoints.rl,damage,heatdmg&&random(0,1));
	
	if( inv_context.engine && (inv_context.engine.ltslots+inv_context.engine.rtslots) > 0 )
	{
		if((hardpoints.lt.internalhp <= 0 || hardpoints.rt.internalhp <= 0) && !inv_context.engine.clan) ProcessDeath(damager);
		if((hardpoints.lt.internalhp <= 0 && hardpoints.rt.internalhp <= 0) &&  inv_context.engine.clan) ProcessDeath(damager);
	}
	if(  hardpoints.hd.internalhp <= 0 || hardpoints.ct.internalhp <= 0 ||
		(hardpoints.ll.internalhp <= 0 && hardpoints.rl.internalhp <= 0)   ) 
	{
		ProcessDeath(damager);
	}
}
void SpreadHardpointDamage(MechHardpoint hp, float dmg)
{
	if(hp == hardpoints.la) DamageHardpoint(hardpoints.lt,dmg/2);
	if(hp == hardpoints.ra) DamageHardpoint(hardpoints.rt,dmg/2);
	if(hp == hardpoints.lt) DamageHardpoint(hardpoints.ct,dmg/4);
	if(hp == hardpoints.rt) DamageHardpoint(hardpoints.ct,dmg/4);
}
void DestroyHardpointItems(MechHardpoint hp, bool recurse=true)
{
	for(let w = Inv; w != null; w = w.Inv)
	{	
		let ww = Mechbase_Weapon(w);
		if(ww)
		{
			if(ww.hardpoint == hp) 
			{
				removeWeapon(ww);
				normalizeWeaponsID(1);
				mechsounds.pushSound("Mech/Betty/WeaponDestroyed");
				if(recurse) DestroyHardpointItems(hp,recurse);
			}
		}
	}
	DestroyHardpointStructs(hp,recurse);
}
void DestroyHardpointStructs(MechHardpoint hp, bool recurse=true)
{
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		MechHardpoint sthardpoint = inv_context.mechstructs[i].hardpoint;
		let ut = GetDefaultByType(utilcast(inv_context.mechstructs[i].Tag));
		
		if(sthardpoint == hp && ut.moveable)
		{
			class<Heatsink> hs = inv_context.mechstructs[i].Tag;
			if(hs) 
			{
				mechsounds.pushSound("Mech/Betty/Heatsink");
				mechsounds.pushSound("Mech/Betty/Destroyed");
			}
			hp.adjustHardslots(-ut.hardslots);
			inv_context.weapons_tonnage -= ut.weight;
			inv_context.mechstructs.delete(i);
			if(recurse) DestroyHardpointStructs(hp,recurse);
		}
	}
}
void HardpointDamageEffects()
{	
	// Process hardpoint damage effects
	if( hardpoints.ll.internalhp <= 0 || 
		hardpoints.rl.internalhp <= 0   )
	{
		throttle_max = 0.5;
		LegSpeed = 1;
	}
	else if( hardpoints.lt.internalhp < hardpoints.lt.max_internal || 
			 hardpoints.rt.internalhp < hardpoints.rt.max_internal    )
	{
		throttle_max = 0.8;
	}
	else
	{
		throttle_max = 1.0;
	}
}