	/*****************************\
	|	  Essential Functions     |
	\*****************************/
extend class MechwarriorBase;

// Vars
bool uiopen_Mechlab;
bool forceshutdown;
bool valid_player; // For multiplayer checking when a player DCs.
class<MechwarriorBase> baseclass;
mw_InvInfo inv_context;
MechHardpoints hardpoints;
SoundQueue mechsounds;
MechTorsoBase models_reference;
bool btn_jumpjets;
bool pbtn_switchammo;
bool btn_switchammo;
bool pilotlook;
bool isdead;
bool docopy_novoodoo;
bool prev_automap;
bool hiddenfromshop;
int ticks;
int prevticks;
double mech_tonnage;
double defaultfov;
double kph_default;
double kph_real;
double worth;
vector3 prevpos;

// Shop Vars (TEMP)
Items_ShopData shopitems;
Array<mw_StoredMech> shopmechs;

// Properties
class<MechTorsoBase> mech_models;
class<Mechbase_Engine> base_engine;
bool modelcockpit;
// Visual properties, mainly for targetting.
double mech_height;
double mech_radius;

// Hitbox
bool reset_hitboxes;
MechHitBox hitbox_middle;

// HUD
String hud_cockpit;
String hud_mech;
HudAlert hAlert;
bool hud_htal;
double screen_fade;
Color screen_fadecolor;

void StartMechChange(int invmech)
{
	if(isdead) 
	{		
		/*
			Empty our sound-queue so we get Betty's system announcement when we
			start back up.
			
			Set health to 100 just in case some map script which checks player hp.
		*/
		mechsounds.Empty();
		A_SetHealth(100);
		
		// Spawn corpse if mech is ded.
		let corpse = MechwarriorBase(Spawn(baseclass, pos));
		if(corpse) 
		{
			corpse.isdead = true;
			corpse.player = NULL;
			corpse.LegAng = LegAng;
			corpse.roll = models_reference.roll;
			corpse.pitch = models_reference.pitch;
			corpse.angle = models_reference.angle;
			corpse.rolldistort = rolldistort;
			if(corpse.models_reference) corpse.models_reference.mechowner = corpse;
			corpse.A_SetHealth(0);
			if(deathexplosions) deathexplosions.owner = corpse;
		}
		GiveLocalInv("DamageDebuff", 1);
	}
	if(dronecam_active) dronecam_active = false;
	
	if(CheckOrganic()) shutdown_setup(false, true, true, true);
	
	// Have to deal with old-style item buttons, because I implemented
	// these ages ago...
	A_TakeInventory("IBTN_SHOOTALLWEAPONSLIKEAMADLAD", 999);
	A_TakeInventory("IBTN_SHUTDOWN", 999);
	A_TakeInventory("IBTN_TARGET", 999);
	A_TakeInventory("IBTN_CENTER", 999);
	A_TakeInventory("IBTN_CENTERTORSO", 999);
	
	player.cheats &= ~CF_TOTALLYFROZEN;
    MechExchange_Animator.Setup(self, invmech);
}

void ChangeMech(int invmech)
{
	mw_StoredMech curmech = new("mw_StoredMech");
	mw_StoredMech source = inv_context.mechs[invmech];
	
	if(!source) 
	{	
		curmech.Destroy();
		console.printf("[Failed to deploy mech] -> Source mech doesn't exist!");
		return;
	}
	reset_hitboxes = true;
	GetStoredWeapons(curmech.active_weapons);
	curmech.baseclass = baseclass;
	curmech.inv_context = inv_context;
	curmech.inv_defs = new("mw_MechInvDefaults");
	curmech.inv_defs.weapons_tonnage = inv_context.weapons_tonnage;
	curmech.inv_defs.heateff = HeatEfficiency;
	curmech.inv_defs.weapons_count = inv_context.weapons_count;
	curmech.inv_defs.armor_tonnage = inv_context.armor_tonnage;
	curmech.inv_defs.engine = inv_context.engine;
	curmech.inv_defs.MoveSpeedKPH = MoveSpeedKPH;
	
	inv_context.Swap(source.inv_context);
	inv_context = source.inv_context;
	hardpoints = inv_context.hardpoints;
	
	// Destroy current weapons.
	for(let w = Inv; w != null; w = w.Inv)
	{
		let weap = Weapon(w);
		if(weap)
		{
			if(weap is "Mechbase_Weapon") RemoveInventory(weap);
		}
	}
	
	// Load new weapons
	for(int i = source.active_weapons.Size()-1; i >= 0; i--)
	{
		let ww = source.active_weapons[i];
		if(ww) 
		{	
			let weap = Mechbase_Weapon(Spawn(ww.baseclass));
			if(weap)
			{
				weap.group = ww.group;
				weap.WeaponID = ww.WeaponID;
				weap.hardpoint = ww.hardpoint;
				AddInventory(weap);
			}
		}
	}
	normalizeWeaponsID(0);
	
	// Setup Class Defaults
	//console.printf("Changing to: %s",source.baseclass.getClassName());
	let defs = MechWarriorBase(GetDefaultByType(source.baseclass));
	baseclass = source.baseclass;
	baseHeatEfficiency = defs.baseHeatEfficiency;
	LegSpeed = defs.LegSpeed;
	MaxYaw = defs.MaxYaw;
	minPitch = defs.minPitch;
	maxPitch = defs.maxPitch;
	mech_tonnage = defs.mech_tonnage;
	hud_mech = defs.hud_mech;
	hud_cockpit = defs.hud_cockpit;
	base_engine = defs.base_engine;
	defaultmovement = defs.defaultmovement;
	uncappedtorso = defs.uncappedtorso;
	modelcockpit = defs.modelcockpit;
	mech_models = defs.mech_models;
	mechtype = defs.mechtype;
	nofirstpersonlegs = defs.nofirstpersonlegs;
	ViewHeight = defs.ViewHeight;
	defviewz = defs.ViewHeight;
	player.ViewHeight = defs.ViewHeight;
	PilotSpeed = defs.PilotSpeed;
	JumpZ = defs.JumpZ;
	HeatLevel = 0;
	viewzoffs = 0;
	
	// Update vars
	A_SetSpeed(0);
	if(models_reference) models_reference.Destroy();
	setupSpeedKPH(EngineGetKPH());
	
	inv_context.mechs.Delete(invmech);
	
	// Only save live mech!
	if(!isdead) inv_context.mechs.Insert(invmech, curmech);
	
	// Revive potentially dead player.
	isdead = false;
	player.cheats &= ~CF_TOTALLYFROZEN;
	return;
}

mw_StoredMech CreateStoredMech(class<MechwarriorBase> type, bool attachtomech=true)
{
	let mechobj = new("mw_StoredMech");
	let mechact = MechwarriorBase(Spawn(type));
	if(mechobj && mechact)
	{
		mechact.docopy_novoodoo = true;
		mechact.setupInventory();
		mechact.mech_weapons();
			
		mechobj.baseclass = type;
		mechobj.inv_context = mechact.inv_context;
		mechobj.inv_defs = new("mw_MechInvDefaults");
		mechobj.inv_defs.weapons_tonnage = mechact.inv_context.weapons_tonnage;
		mechobj.inv_defs.heateff = mechact.HeatEfficiency;
		mechobj.inv_defs.weapons_count = mechact.inv_context.weapons_count;
		mechobj.inv_defs.armor_tonnage = mechact.inv_context.armor_tonnage;
		mechobj.inv_defs.engine = mechact.inv_context.engine;
		mechobj.inv_defs.MoveSpeedKPH = mechact.MoveSpeedKPH;
		mechact.inv_context.active = false;
		if(attachtomech) AddInventory(mechobj.inv_context);
		mechact.GetStoredWeapons(mechobj.active_weapons);
		
		// Prevent deletion of critical data structures.
		mechact.inv_context = NULL;
		mechact.Destroy();
	}
	return mechobj;
}
void GetStoredWeapons(in out Array<mw_StoredWeapon> weaps)
{
	while(true)
	{
		let ww = Mechbase_Weapon(FindInventory("Mechbase_Weapon",true));
		if(!ww) break;
		let sweap = new("mw_StoredWeapon");
		sweap.Tag = ww.GetClassName();
		sweap.baseclass = ww.GetClassName();
		sweap.group = ww.group;
		sweap.WeaponID = ww.WeaponID;
		sweap.hardpoint = ww.hardpoint;
		weaps.Push(sweap);
		RemoveInventory(ww);
	}
}


// Inventory
bool setupInventory()
{
	if(!FindInventory("WeaponsHandler")) GiveLocalInv("WeaponsHandler",1);
	if(!inv_context && !CheckVoodoo())
	{
		GiveLocalInv("mw_InvInfo",1);
		inv_context = mw_InvInfo(FindInventory("mw_InvInfo"));
		inv_context.Init();
		hardpoints = inv_context.hardpoints;
		setupWeapons();
		CalculateArmorWeight();
		if(!EquipEngine(base_engine))
		{
			console.printf("Pilot Error -> Failed to equip mech's engine, too heavy or not enough free slots!");
		}
		setupCriticals();
		SetupHitboxes();
		inv_context.maxgroup = getMaxWeaponGrouping();
	}
	return inv_context==NULL;
}

virtual void setupCriticals()
{
	// Setup criticals
	equipStruct("StructLifesupport",hardpoints.hd);
	equipStruct("StructSensors",hardpoints.hd);
	equipStruct("StructCockpit",hardpoints.hd);
	equipStruct("StructHip",hardpoints.lt);
	equipStruct("StructHip",hardpoints.rt);
	equipStruct("StructActuator",hardpoints.la);
	equipStruct("StructActuator",hardpoints.ra);
	// Add intrinsic weight based on chassis max tonnage.
	adjustTonnage(mech_tonnage / 10.);
}


// Setup models
void TrySetupModels()
{
	if(mech_models && !models_reference) 
	{
		models_reference = MechTorsoBase(MechPartsBase.Create(mech_models, self));
		reset_hitboxes = true; // Setup hitboxes whenever our model needs resetting.
	}
}

// Virtual
virtual void SetupWeapons() 
{
	hardpoints.setupLocations( (0,20), (0,0), (-30,-15), (30,-15), (-120,0), (120,0), (-60,-30), (60,-30) );
	hardpoints.setupSlots();
}

virtual void SetupHitboxes()
{
	CreateHitbox(hardpoints.ll,  16, 0, 8,46,-10);
	CreateHitbox(hardpoints.rl, -16, 0, 8,46,-10);
	CreateHitbox(hardpoints.la,  34,44, 8,36, 5);
	CreateHitbox(hardpoints.ra, -34,44, 8,36, 5);
	CreateHitbox(hardpoints.lt,  15,65,10,36, 0);
	CreateHitbox(hardpoints.rt, -15,65,10,36, 0);
	CreateHitbox(hardpoints.ct,   0,40,10,48,10);
}

// Hitbox helper
void CreateHitbox(MechHardpoint hp, double xo, double yo, double r, double h, double fo=0)
{
	hp.SetupHitbox(xo,yo,r,h,fo);
}

// Override
override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
{	
	// Do not take damage if we've exitted the mech.
	// Subject to change later, once I figure out some other solution, somehow.
	if(CheckOrganic()) 
	{
		return 0;
	}
	
	if(damage == 0) return 0; // Debris can proc this for some bizarre reason.
	if(checkVoodoo()) return super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	if(mod == "Hitscan") return ProcessHitscanDamageMobJ(inflictor, source, damage, mod, flags, angle);
	
	Actor damager = inflictor;
	double newdmg = double(damage)*MWGAMEPLAY_DAMAGESCALE;

	// Only redirect to CT, LT, RT if we're being hit by another MobJ.
	bool mechdmg = (inflictor is "Mechwarrior") || (source is "Mechwarrior");
	if(!mechdmg)
	{
		int choose = random(1,3);
		MechHardpoint hp_todmg = (choose == 1) ? hardpoints.lt : (choose == 2) ? hardpoints.rt : hardpoints.ct;
		DamageHardpoint(hp_todmg, newdmg, false, true, damager, mod);
	}
	
	if( !source ) 
	{
		ProcessHardpointDamage(mod,newdmg);
		return 0;
	}
	return 0;
}

override void PostBeginPlay()
{	
	// Spawn pieces (WIP)
	TrySetupModels();
	
	// Setup mech support systems.
	if(checkVoodoo()) 
	{
		super.PostBeginPlay();
		return;
	}
	// Check for temp mech with no real player.
	if(player)
	{
		setupInventory();	
		baseclass = GetClassName();
		weapons_fired = false;
		weapon_groupfire = false;
		selectedGroup = 1;
		selectedWeapon = 1;
		mech_jetsfuel = 100;
		defviewz = Player.ViewHeight;
		inv_context.maxgroup = getMaxWeaponGrouping();
		if(!CheckOrganic())
			inv_context.mechs.Push(CreateStoredMech("MechPilot"));
		defaultfov = player.desiredFOV;
	}
	// SoundQueue 
	mechsounds = SoundQueue.SQ_Create(self, 32);
	
	speed = 0; // Stop normal movement;
	LegAng = angle;
	
	throttle_max = 1;
	if(defaultmovement) 
	{
		A_SetSpeed(MoveSpeed*0.08);
		level.aircontrol = 1;
		level.airfriction = 0.87;
	}	
	
	// startDropship();
	// startMechbay();
	
	super.PostBeginPlay();
}
	
override void tick()
{			
	if(checkVoodoo()) 
	{
		MaxStepHeight = 24;
		super.Tick();
		return;
	}
		
	if(!checkAI())
	{
		// Hold onto reference of all mechs for shop
		if(!shopmechs.Size()) GetAllMechs(shopmechs);
		// Grab Items reference for shop
		if(!shopitems) shopitems = GetAllItems();
	}
	
	if(reset_hitboxes && models_reference)
	{
		reset_hitboxes = false;
		// Middle hitbox is used for targetting
		hitbox_middle = MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.ct);
		MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.la);
		MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.ra);
		MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.lt);
		MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.rt);
		MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.ll);
		MechHitbox.SetupHitbox(Mechwarrior(self), hardpoints.rl);
	}
	
	if(!isdead) 
	{		
		// Don't hold onto dead target.
		if(targetenemy && targetenemy.health <= 0) targetenemy = null;
		
		if(player && !checkAI()) mech_cockpitbob();
		mech_movement(); 
		if(!mech_shutdown)
		{
			if(vel.length() >= 5) 
			{
				double stompdmg = (4*(mech_tonnage/100.)) * (vel.length()/10.);
				RadiusDamage(stompdmg, 64, "Crush", "MechHitBox");
			}
			HardpointDamageEffects();
			mech_weapons();
		}
		if(mech_shutdown)
		{
			dronecam_active = false;
			process_shutdown();
		}
	}	
	
	if(!player || checkAI()) 
	{
		super.Tick();
		return;
	}
	
	// Falling animation
	vector3 nextpos = Vec3Offset(0,0, vel.z);
	if(!player.onground && nextpos.z <= floorz && vel.z != 0 && models_reference)
	{
		let cockpit = models_reference.cockpit;
		double fallmod = checkLegged() ? 6. : 2.; 
		FallAnimator.Animate(self, -(vel.z*fallmod));
	}
	
	// Process FOV
	if( (GetPlayerInput(0) & BT_ZOOM) )
	{
		if(player.DesiredFOV > 30)
		{
			player.DesiredFOV -= 3;
			A_StartLocalSound("Mech/Zoom", CHAN_7);
		}
		else
			A_StopSound(CHAN_7);
	}
	else
	{
		double trueFOV = CVar.GetCVar("mwd_CockpitFOV", player).getFloat();
		if(player.DesiredFOV < trueFOV)
		{
			player.DesiredFOV += 3;
			A_StartLocalSound("Mech/Zoom", CHAN_7);
		}
		else
		{
			player.DesiredFOV = trueFOV;
			A_StopSound(CHAN_7);
		}
	}
	
	// Betty sound for automap toggle
	if(automapactive && !prev_automap) 
	{
		mechSounds.PushSound("Mech/Blip");
		mechSounds.PushSound("Mech/Betty/SatLinkEstablished");
	}
	prev_automap = automapactive;
	
	// Clamp viewheight so we don't end up inside our hips when we fall.
	player.viewheight = clamp(player.viewheight, defviewz*0.8, defviewz*2.0);
	
	// Turns out, we lose our models when moving to another map.
	TrySetupModels();
	
	if(!inv_context) setupInventory();	
	if(!dronecam) player.camera = self;
	
	// For some XFiles unknown reason, drone cameras will now randomly just REFUSE
	// to work if the mech has died from overheating, it should not even be possible but it is,
	// so, this stupid thing is here to force it on.
	if(!dronecam_active && isdead) 
		ToggleDrone(350,1,0,true,true);
	
	// Make sure player doesn't have any actual weapons.
	for(let w = Inv; w != null; w = w.Inv)
	{
		let weap = Weapon(w);
		if(weap)
		{
			if(!(weap is "WeaponsHandler")) weap.Destroy();
		}
	}	
	mechsounds.Tick();
	super.tick();
}


// Legacy Damage function, pretty much JUST for hitscan.
int ProcessHitscanDamageMobJ(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
{	
	double newdmg = double(damage)*MWGAMEPLAY_DAMAGESCALE;
	if( !source ) 
	{
		ProcessHardpointDamage(mod,newdmg);
		return 0;
	}
	
	Actor damager = source;
	double shootslope = (source.height); // * 0.5

	// Preform ray cast to determine where the shooter is aiming.
	FLineTraceData lt;
	damager.LineTrace(inflictor.angle,2048,source.pitch+random(-8,16),TRF_ABSOFFSET,shootslope-random(0,source.height/4),0,0,lt);
	vector3 dmgpos = lt.HitLocation;
	double plrdmgz = (viewheight*Player.crouchfactor);

	vector2 mechangle = ( pos.x, pos.y );
	vector2 dmgpos2D  = ( dmgpos.x, dmgpos.y );
	mechangle = MDMath.VRotate(mechangle,self.angle);
	double lrpos = atan2(source.pos.y - mechangle.y , source.pos.x - mechangle.x);
	double hitangle = abs((atan2(pos.x - dmgpos.x , pos.y - dmgpos.y))) + frandom(-8,8);
	hitangle = abs(hitangle-((self.angle-90)%180));
	// Legs
	if( dmgpos.z < pos.z+(plrdmgz/4) ) 
	{ 
		if(lrpos > 0) ProcessHardpointDamage("MechDamage_LL",newdmg,damager);
		if(lrpos < 0) ProcessHardpointDamage("MechDamage_RL",newdmg,damager);
	}
	else // Torso
	{	
		// left/right torsos
		if( hitangle > 40 && hitangle < 100)
		{
			if(lrpos < 0) ProcessHardpointDamage("MechDamage_RT",newdmg,damager);
			if(lrpos > 0) ProcessHardpointDamage("MechDamage_LT",newdmg,damager);
		}
		// Left/right arm
		else if( hitangle >= 100 )
		{
			if(lrpos < 0) ProcessHardpointDamage("MechDamage_RA",newdmg,damager);
			if(lrpos > 0) ProcessHardpointDamage("MechDamage_LA",newdmg,damager);
		}
		// Center torso
		else
		{
			ProcessHardpointDamage("MechDamage_CT",newdmg,damager);
		}
	}
	return 0;
}