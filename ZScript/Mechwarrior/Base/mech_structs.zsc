	/*************************\
	|	 Structure Systems    |
	\*************************/
class FoundStruct
{
	mw_InvStruct obj;
	int realindex;
}
	
extend class MechwarriorBase;

// Ammo
clearscope int countammo(class<Mechbase_Ammo> type)
{
	int count = 0;
	String ctype = GetDefaultByType(type).getClassName(); // ffs
	ctype.ToLower();
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		String cname = inv_context.mechstructs[i].Tag;
		cname.ToLower();
		if(cname == ctype) count+=inv_context.mechstructs[i].ammunition;
	}
	return count;
}
void takeammo(class<Mechbase_Ammo> type, int amt)
{
	bool checkdone = false;
	int left = amt;
	String ctype = GetDefaultByType(type).getClassName(); // ffs
	ctype.ToLower();
	while(!checkdone)
	{
		mw_InvStruct ammoobj;
		int index;
		for(int i = 0; i < inv_context.mechstructs.Size(); i++)
		{
			mw_InvStruct obj = inv_context.mechstructs[i];
			String cname = obj.Tag;
			cname.ToLower();
			if(cname == ctype) 
			{
				ammoobj = obj;
				index = i;
				break;
			}
		}
		if(ammoobj)
		{
			int surplus = ammoobj.ammunition-left;
			if(surplus > 0) 
			{
				ammoobj.ammunition -= left;
				checkdone = true;
			}
			else
			{
				left -= ammoobj.ammunition;
				removeStruct(index);
				// Search for more ammo
				if(CVar.GetCVar("mwd_autoreload",player).getBool())
				{
					for(int x = 0; x < inv_context.weapon_items.Size(); x++)
					{
						if(inv_context.weapon_items[x].Tag == ammoobj.Tag)
						{
							equipStructInv(x+1,ammoobj.hardpoint);
							console.printf("Reloading...");
						}
					}
				}
			}
		}
		else
		{
			checkdone = true;
		}
	}
}

// Engines
bool EquipEngine(class<Mechbase_Engine> engine)
{	
	let tengine = Mechbase_Engine(Mechbase_Utility.CreateTemp(engine));
	inv_context.engine = MechBase_Engine.Create(engine);
	MechBase_EngineOBJ engobj = inv_context.engine;	
	if(tengine) 
	{	
		tengine.GetDescription(engobj.description);
		tengine.Destroy();
	}

	// Check if enough slots/tons to equip.
	int slots_ct = hardpoints.ct.getFreeSlots();
	int slots_lt = hardpoints.lt.getFreeSlots();
	int slots_rt = hardpoints.rt.getFreeSlots();
	int ctslots = engobj.ctslots;
	int ltslots = engobj.ltslots;
	int rtslots = engobj.rtslots;
	int gyroslots = engobj.gyroslots;
	double weight = engobj.weight;
	
	if( 
		 (gyroslots+ctslots > slots_ct || ltslots > slots_lt || rtslots > slots_rt) || 
		 (MDMath.RoundFloat(inv_context.weapons_tonnage+weight > mech_tonnage) && !CheckCompensative())
	  )
	{
		inv_context.engine.Destroy();
		inv_context.engine = NULL;
		return false;
	}
	
	equipStruct("StructEngine",hardpoints.lt,ltslots);
	equipStruct("StructEngine",hardpoints.rt,rtslots);
	equipStruct("StructEngine",hardpoints.ct,ctslots);	
	equipStruct("StructGyro",hardpoints.ct,gyroslots);
	setupSpeedKPH(EngineGetKPH());
	adjustTonnage(weight);
	inv_context.heateff += (GetDefaultByType("Heatsink").cooling/35)*engobj.intrinsic_heatsinks;
	inv_context.heateff += (GetDefaultByType("DoubleHeatsink").cooling/35)*engobj.intrinsic_doubleheatsinks;
	return true;
}
	
clearscope double EngineGetKPH(int enginetype=0)
{
	if(!inv_context.engine && !enginetype) return 0;
	int engine = enginetype ? enginetype : inv_context.engine.enginetype;
	double baserating = (mechtype == MechType_Clan) ? 187.5 : 200.; 
	return (32.4*(100./mech_tonnage)) / (baserating/engine); 
}

clearscope bool CheckCompensative()
{	
	return inv_context.engine && (inv_context.engine.model == EngineDatabase.Type_Compensative);
}
	
void DequipEngine()
{
	if(!inv_context.engine) return;
	MechBase_EngineOBJ engobj = inv_context.engine;
	bool engstruct = true;
	// Handle engine structures
	while(engstruct)
	{
		class<StructEngine> eng;
		class<StructGyro> gyro;
		for(int i = 0; i < inv_context.mechstructs.Size(); i++)
		{
			MechHardpoint hpos = inv_context.mechstructs[i].hardpoint;
			if(hpos == hardpoints.ct || hpos == hardpoints.lt || hpos == hardpoints.rt)
			{
				string type = inv_context.mechstructs[i].Tag;
				eng = type;
				gyro = type;
				if(eng || gyro) 
				{
					removeStruct(i);
					// If i don't break here, it'll fail to process all structs, probably
					// because the current context of the mechstructs array becomes invalid.
					break; 
				}
			}
		}
		if(!eng && !gyro) engstruct = false;
	}
	
	inv_context.heateff -= (GetDefaultByType("Heatsink").cooling/35)*engobj.intrinsic_heatsinks;
	inv_context.heateff -= (GetDefaultByType("DoubleHeatsink").cooling/35)*engobj.intrinsic_doubleheatsinks;
	adjustTonnage(-engobj.weight);
	inv_context.GiveItem(engobj.ClassType);
	
	// RIP
	engobj.Destroy();
	inv_context.engine = NULL;
}

// Find
mw_InvStruct, int FindHealthyStruct(String type, MechHardpoint pos)
{
	type.ToLower();
	if(!inv_context.mechstructs.Size()) inv_context.mechstructs.Clear();
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		if(inv_context.mechstructs[i].hardpoint != pos) continue;
		if(inv_context.mechstructs[i].broken) continue;
		String cname = inv_context.mechstructs[i].Tag;
		cname.ToLower();
		
		if(cname ~== type) return inv_context.mechstructs[i], i;
	}
	return NULL, 0;
}
bool FindStructs(String type, MechHardpoint pos, bool healthy, in out Array<FoundStruct> objs)
{
	objs.Clear();
	type.ToLower();
	if(!inv_context.mechstructs.Size()) inv_context.mechstructs.Clear();
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		if(inv_context.mechstructs[i].hardpoint != pos) continue;
		if(healthy && inv_context.mechstructs[i].broken) continue;
		String cname = inv_context.mechstructs[i].Tag;
		cname.ToLower();
		
		if(cname == type) 
		{
			FoundStruct fstr = new("FoundStruct");
			fstr.obj = inv_context.mechstructs[i];
			fstr.realindex = i;
			objs.push(fstr);
		}
	}
	return (objs.Size() > 0);
}

// Get
bool getStructsIn(MechHardpoint pos, in out Array<FoundStruct> objs)
{
	objs.Clear();
	if(!inv_context.mechstructs.Size()) inv_context.mechstructs.Clear();
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		if(inv_context.mechstructs[i].hardpoint != pos) continue;
		String cname = inv_context.mechstructs[i].Tag;
		cname.ToLower();
		
		FoundStruct fstr = new("FoundStruct");
		fstr.obj = inv_context.mechstructs[i];
		fstr.realindex = i;
		objs.push(fstr);
	}
	return (objs.Size() > 0);
}
int countStruct(String type)
{
	int count = 0;
	type.ToLower();
	if(!inv_context.mechstructs.Size()) inv_context.mechstructs.Clear();
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		String cname = inv_context.mechstructs[i].Tag;
		cname.ToLower();
		type.ToLower();
		if(cname == type) count++;
	}
	return count;
}
int countStructDamaged(String type, bool destroyed=false)
{
	int dmgcount = 0;
	type.ToLower();
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		String cname = inv_context.mechstructs[i].Tag;
		cname.ToLower();
		
		if(cname == type) 
		{
			if(destroyed && inv_context.mechstructs[i].broken) 
				dmgcount++;
			else if(inv_context.mechstructs[i].dmg_taken > 0)
				dmgcount++;
		}
	}
	return dmgcount;
}

// Equip or Add
bool equipStructInv(int ind, MechHardpoint hp, bool move=true)
{
	// So, turns out we need to copy struct items, due to how ammunition is stored.
	// This is one of those things that'd be near impossible for a non-programmer to 
	// figure out, it's really odd honestly, if we don't copy we end up depleting multiple
	// ammo structures at the same time, this is because we never copy out ammunition integer
	// out of our stacked item, we only push that item and decrement its amt. 
	// I'm also pretty sure if we didn't copy and the item was scrapped we'd lose
	// the instance it was equipped to.
	let obj = inv_context.CopyItem(inv_context.weapon_items[ind-1]);
	
	// Equip struct from items
	class<Mechbase_Utility> util = obj.Tag;
	class<Mechbase_Engine> eng = obj.Tag;
	let defs = GetDefaultByType(util);
	
	if(eng)
	{
		if(inv_context.engine) 
		{
			A_PlaySound("UI/Error",CHAN_WEAPON);
			sendHudAlert("Engine already equipped!", Font.CR_DARKRED);
			return false;
		}
		if(!EquipEngine(eng))
		{
			A_PlaySound("UI/Error",CHAN_WEAPON);
			sendHudAlert("Failed to equip engine\novertonnage or too big!", Font.CR_DARKRED);
			return false;
		}
		else
		{
			inv_context.RemoveItem(ind-1, 1);
			return true;
		}
	}
	if(!util) return false;

	if( MDMath.RoundFloat(inv_context.weapons_tonnage+GetDefaultByType(util).weight) > mech_tonnage && !CheckCompensative())
	{
		A_PlaySound("UI/Error",CHAN_WEAPON);
		sendHudAlert("Cannot equip item, over tonnage!", Font.CR_DARKRED);
		return false;
	}
	if( hp.getFreeSlots() < GetDefaultByType(util).hardslots )
	{
		A_PlaySound("UI/Error",CHAN_WEAPON);
		sendHudAlert("Cannot equip item, no freeslots!", Font.CR_DARKRED);
		return false;	
	}
	 
	 // Move struct to active inventory
	if(hp.getFreeSlots()-defs.hardslots < 0) return false;
	obj.hardpoint = hp;
	inv_context.mechstructs.push(obj);
	adjustTonnage(defs.weight);
	hp.adjustHardslots(defs.hardslots);
	if(move) inv_context.RemoveItem(ind-1, 1);
	
	return true;
}
bool equipStruct(class<Mechbase_Utility> type, MechHardpoint hp, int amt = 1)
{
	if( (hp.getFreeSlots()-(GetDefaultByType(type).hardslots*amt)) < 0)
	{
		if(!GetDefaultByType(type).moveable) console.printf("WARNING: Failed to equip critical item: %s",type.getClassName());
		return false;
	}
	for(int i = 0; i < amt; i++)
	{
		mw_InvStruct st = inv_context.NewItem(GetDefaultByType(type).getClassName());
		st.hardpoint = hp;
		inv_context.mechstructs.push(st);
		adjustTonnage(GetDefaultByType(type).weight);
		hp.adjustHardslots(GetDefaultByType(type).hardslots);
	}
	return true;
}

// Move
bool moveStructToInv(int struc_ind, bool move=true)
{
	for(int i = 0; i < inv_context.mechstructs.Size(); i++)
	{
		if(i == struc_ind)
		{
			let ut = GetDefaultByType(utilcast(inv_context.mechstructs[i].Tag));
			class<StructEngine> eng = inv_context.mechstructs[i].Tag;
			if(eng) 
			{
				DequipEngine();
				return true;
			}
			if(!ut.moveable) return false;
			inv_context.AddItem(inv_context.mechstructs[i]);
			removeStruct(i, move);
			return true;
		}
	}
	return false;
}

void removeStruct(int ind, bool delete=true)
{
	let mstruct = inv_context.mechstructs[ind];
	let ut = GetDefaultByType(utilcast(mstruct.Tag));
	MechHardpoint hp = mstruct.hardpoint;
	hp.adjustHardslots(-ut.hardslots);
	adjustTonnage(-ut.weight);
	if(delete) inv_context.mechstructs.delete(ind);
}
