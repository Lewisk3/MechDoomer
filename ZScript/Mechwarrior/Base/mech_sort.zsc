	/***********************************\
	|	Big Ugly Sort System (BUSS :P)  |
	\***********************************/
extend class MechWarriorBase;


void GetAllItems(in out Array<mw_InvStruct> items)
{
	Array<String> itemtypes;
	GetSortList(itemtypes);
	items.Clear();
	for(int i = 0; i < itemtypes.Size(); i++) 
	{
		items.push(mw_InvInfo.NewItem(itemtypes[i]));
	}
}

void GetAllMechs(in out Array<mw_StoredMech> items)
{
	items.Clear();
	for(int i = 0; i < AllActorClasses.Size(); i++) 
	{
		let act = AllActorClasses[i];
		if(act is "MechWarrior") 
		{	
			let defs = MechWarrior(GetDefaultByType(act));
			String actname = defs.getClassName();
			String dispname = PlayerPawn.GetPrintableDisplayName(act);
			if(dispname ~== "") continue;
			
			class<MechwarriorBase> mechact = actname;
			items.push(CreateStoredMech(mechact, false));
		}
	}
	// Sort by weight
	SortMechs(items);
}

void SortMechs(in out Array<mw_StoredMech> items)
{
	Array<mw_StoredMech> newitems;
	while(true)
	{
		int lightest = -1;
		double lighttons = double.infinity;
		for (int i = 0; i < items.Size(); i++)
		{
			let defs = GetDefaultByType(items[i].baseclass);
			double tons = defs.mech_tonnage;
			if(tons < lighttons)
			{
				lightest = i;
				lighttons = tons;
			}
		}
		if(lightest >= 0)
		{
			let defs = GetDefaultByType(items[lightest].baseclass);
			newitems.push(items[lightest]);
			items.delete(lightest);
		}
		else
			break;
	}
	items.Clear();
	items.Copy(newitems);
}

clearscope int, int, int, int GetMechSortIndexes()
{
	Array<Int> indices;
	double wlevel = 35;
	while(wlevel < 101)
	{
		int found = -1;
		for(int i = 0; i < shopmechs.Size(); i++)
		{
			let defs = GetDefaultByType(shopmechs[i].baseclass);
			double tons = defs.mech_tonnage;
			
			if(tons > wlevel)
			{
				found = i;
				break;
			}
		}
		if(found >= 0)
		{
			indices.push(found);
			wlevel = wlevel+20 == 95 ? 100 : wlevel+20;
		}
		else break;
	}
	indices.Push(shopmechs.Size());
	return indices[0], indices[1], indices[2], indices[3];
}

// HUGE sort list
clearscope void GetSortList(in out Array<String> items)
{
	items.Clear();
	int ssize = 372;
	Array<String> ItemsList;
	
	// Find items data
	int lump = -1;
	while (-1 != (lump = Wads.FindLump("items", lump + 1)))
	{
		String data = Wads.ReadLump(lump);
		Array<String> lines;
		data.Split(lines, "\n");
		String comment = "#";
		for(int i = 0; i < lines.Size(); i++)
		{
			// Filter spaces
			lines[i].Replace(" ", "");
			lines[i].Replace("\t", "");
			// Remove carrage return (Byte 13)
			lines[i].Truncate(lines[i].Length()-1);
			if( lines[i].ByteAt(0) != comment.ByteAt(0) && lines[i].Length() > 1 )
			{
				ItemsList.push(lines[i]);
			}
		}
	}
	
	items.Copy(ItemsList);
}