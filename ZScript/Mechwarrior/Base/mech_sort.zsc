	/***********************************\
	|	Big Ugly Sort System (BUSS :P)  |
	\***********************************/
extend class MechWarriorBase;


Items_ShopData GetAllItems()
{
	Items_ShopData data = GetSortList();
	data.items.Clear();
	for(int i = 0; i < data.items_names.Size(); i++) 
	{
		data.items.push(mw_InvInfo.NewItem(data.items_names[i]));
	}
	return data;
}

void GetAllMechs(in out Array<mw_StoredMech> items)
{
	items.Clear();
	for(int i = 0; i < AllActorClasses.Size(); i++) 
	{
		let act = AllActorClasses[i];
		let defs = MechwarriorBase(GetDefaultByType(act));
		if(act is "MechWarrior" && !defs.hiddenfromshop) 
		{	
			let defs = MechWarrior(GetDefaultByType(act));
			String actname = defs.getClassName();
			String dispname = PlayerPawn.GetPrintableDisplayName(act);
			if(dispname ~== "") continue;
			
			class<MechwarriorBase> mechact = actname;
			items.push(CreateStoredMech(mechact, false));
		}
	}
	// Sort by weight
	SortMechs(items);
}

void SortMechs(in out Array<mw_StoredMech> items)
{
	Array<mw_StoredMech> newitems;
	while(true)
	{
		int lightest = -1;
		double lighttons = double.infinity;
		for (int i = 0; i < items.Size(); i++)
		{
			let defs = GetDefaultByType(items[i].baseclass);
			double tons = defs.mech_tonnage;
			if(tons < lighttons)
			{
				lightest = i;
				lighttons = tons;
			}
		}
		if(lightest >= 0)
		{
			let defs = GetDefaultByType(items[lightest].baseclass);
			newitems.push(items[lightest]);
			items.delete(lightest);
		}
		else
			break;
	}
	items.Clear();
	items.Copy(newitems);
}

clearscope int, int, int, int GetMechSortIndexes()
{
	Array<Int> indices;
	double wlevel = 35;
	while(wlevel < 101)
	{
		int found = -1;
		for(int i = 0; i < shopmechs.Size(); i++)
		{
			let defs = GetDefaultByType(shopmechs[i].baseclass);
			double tons = defs.mech_tonnage;
			
			if(tons > wlevel)
			{
				found = i;
				break;
			}
		}
		if(found >= 0)
		{
			indices.push(found);
			wlevel = wlevel+20 == 95 ? 100 : wlevel+20;
		}
		else break;
	}
	indices.Push(shopmechs.Size());
	return indices[0], indices[1], indices[2], indices[3];
}

// Shop sorting list, grabbed from items data file.
clearscope Items_ShopData GetSortList()
{
	Items_ShopData shop_data = new("Items_ShopData");
	shop_data.items_names.Clear();
	
	Array<String> ItemsList;
	bool count_energy 		= false;
	bool count_ballistics 	= false;
	bool count_missiles 	= false;
	bool count_ammo 		= false;
	bool count_engines 		= false;
	
	// Find items data
	int lump = -1;
	while (-1 != (lump = Wads.FindLump("items", lump + 1)))
	{
		String data = Wads.ReadLump(lump);
		Array<String> lines;
		data.Split(lines, "\n");
		String comment = "#";
		String marker = "<";
		for(int i = 0; i < lines.Size(); i++)
		{
			// Filter spaces
			lines[i].Replace(" ", "");
			lines[i].Replace("\t", "");
			// Check for Carrage Return byte, if found remove it.
			if(lines[i].ByteAt(lines[i].Length()-1) == 13) lines[i].Truncate(lines[i].Length()-1);
			
			if( lines[i].ByteAt(0) != comment.ByteAt(0) && lines[i].Length() > 1 )
			{				
				bool found_marker = (lines[i].ByteAt(0) == marker.ByteAt(0));
				if(found_marker)
				{
					String mark = lines[i];
					if(mark ~== "<S_ENERGY>") 
					{
						count_energy = true;
						shop_data.energy_min = ItemsList.Size();
					}
					else if (mark ~== "<E_ENERGY>") count_energy = false;
					
					if(mark ~== "<S_BALLISTIC>") 
					{
						count_ballistics = true;
						shop_data.ballistics_min = ItemsList.Size();
					}
					else if (mark ~== "<E_BALLISTIC>") count_ballistics = false;
					
					if(mark ~== "<S_MISSILE>")
					{
						count_missiles = true;
						shop_data.missiles_min = ItemsList.Size();
					}
					else if (mark ~== "<E_MISSILE>") count_missiles = false;
					
					if(mark ~== "<S_AMMO>")
					{
						count_ammo = true;
						shop_data.ammo_min = ItemsList.Size();
					}
					else if (mark ~== "<E_AMMO>") count_ammo = false;
					
					if(mark ~== "<S_ENGINE>")
					{
						count_engines = true;
						shop_data.engines_min = ItemsList.Size();
					}
					else if (mark ~== "<E_ENGINE>") count_engines = false;
				}
				else
					ItemsList.push(lines[i]);
					
				if(count_energy    ) shop_data.energy_max++;
				if(count_ballistics) shop_data.ballistics_max++;
				if(count_missiles  ) shop_data.missiles_max++;
				if(count_ammo      ) shop_data.ammo_max++;
				if(count_engines   ) shop_data.engines_max++;
			}
		}
	}
	
	shop_data.items_names.Copy(ItemsList);
	return shop_data;
}

static void GetItemsList(in out Array<String> items_names)
{	
	// Find items data
	int lump = -1;
	while (-1 != (lump = Wads.FindLump("items", lump + 1)))
	{
		String data = Wads.ReadLump(lump);
		Array<String> lines;
		data.Split(lines, "\n");
		String comment = "#";
		String marker = "<";
		for(int i = 0; i < lines.Size(); i++)
		{
			// Filter spaces
			lines[i].Replace(" ", "");
			lines[i].Replace("\t", "");
			// Remove carrage return (Byte 13)
			if(lines[i].ByteAt(lines[i].Length()-1) == 13) lines[i].Truncate(lines[i].Length()-1);
			if( 
				lines[i].ByteAt(0) != comment.ByteAt(0) && 
				lines[i].ByteAt(0) !=  marker.ByteAt(0) &&
				lines[i].Length() > 1 
			   )
				items_names.push(lines[i]);
		}
	}
}