	/*************************\
	|	  Movement System     |
	\*************************/
extend class MechWarriorBase;

// Properties
bool defaultmovement;
bool uncappedtorso;

float minPitch, maxPitch;
float LegSpeed;
float MoveSpeedKPH;
float MaxYaw;

// Vars
bool snd_reactor;
bool snd_accelerate;
bool Mech_HasJets;
bool doShutdown;
bool mech_shutdown;
bool zoomed_in;
bool canShutdown;
bool manualshutdown;
bool stepping;
bool nofirstpersonlegs;
bool reversing;

int Mech_JetCount;
int bobdir;
int shutdown_timer;

float LegAng;
float LegDelta;
float lockpitch;
float lockangle;
float MoveSpeed;
float MoveSpeed_Max;
float throttle;
float throttle_max;
float move_throttle;
float move_accel;
float mech_jetsfuel;
float LookVel;
float LegVel;
float overfactor;
float rolloffs;
float boboffs;
float desiredbob;
float TiltOsc;
float StepOsc;
float TiltOffset;
float StepOffset;
float CrouchMulti;
float rolldistort;
float defviewz;
float viewzoffs;  // Bob modifier for actual viewz.

// Main
void setupSpeedKPH(float kph)
{
	MoveSpeedKPH = kph;
	MoveSpeed = ((kph*(10.0/36.0))/35.0) * (34*MWGAMEPLAY_MECHSPEEDSCALE);
	MoveSpeed_Max = MoveSpeed;
	
	//kph_default = 25000; //75000
	//kph_real = 25000/MWGAMEPLAY_MECHSPEEDSCALE;
	//MoveSpeed = ceil((MoveSpeedKPH*15000)/kph_real);
}

void mech_cockpitbob()
{
	// Calculate Bob
	float movebobpart = MW_VELBOBFRAC;
	float bobthrust = 0;
	float tonmod = defaultmovement ? mech_tonnage/100.0 : clamp(mech_tonnage,50,100)/100.0;
	float bobmax = MW_BOBRANGE*tonmod;
	if(defaultmovement) bobmax *= 10;
	if(!bobdir) bobdir = 1;
	if(vel.z >  0.5) bobdir = 1;
	if(vel.z < -0.5) bobdir = -1;
	if(vel.length() > 0.08 || LegVel)
	{
		// 0.12
		float realvel = vel.length()+(LegVel**2);
		bobthrust = clamp(realvel*(movebobpart*MoveSpeed), -(bobmax/3), (bobmax/3));
		if(stepping) 
		{ 
			bobthrust = abs(bobthrust)*4;
			bobdir = 1;
		}
		boboffs += bobthrust * bobdir;
	}
	if(mech_shutdown)
	{
		bobdir = 1;
		bobthrust = bobmax;
	}
	if(abs(boboffs) > bobmax) 
	{
		bobdir *= -1;	
		boboffs = clamp(boboffs,-bobmax,bobmax);
	}
	if(mech_models)
	{
		// Calculate gyroscopics
		float gfactor = GetDefaultByType("StructGyro").power;
		float gyros = countStruct("StructGyro") - countStructDamaged("StructGyro",true);
		float bfactor = 2.76-(gyros*gfactor);
		float bobmod = boboffs*clamp( (bfactor*(mech_tonnage/100.0)), 1.2, 3.15);
		if(defaultmovement) bobmod *= 0.55;
		Player.ViewZ -= bobmod;
		viewzoffs = (Player.ViewZ-pos.z)-defviewz;
	}
}

void mech_movement()
{
	if(!player || isdead) return;
	if(!CheckCompensative() && mech_shutdown) return;
	
	// Movement Quirks
	if(defaultmovement && inv_context)
	{			
		if(!inv_context.engine && !CheckCompensative()) return;
		// Roll/Sway system
		uint btns = player.cmd.buttons;
		bool strafing = (btns & BT_MOVELEFT) | (btns & BT_MOVERIGHT);
		if(btns & BT_MOVELEFT) rolloffs -= 1;
		if(btns & BT_MOVERIGHT) rolloffs += 1;
		if(!strafing) rolloffs *= 0.90;
		if(abs(rolloffs) < 0.2) rolloffs = 0;
		rolloffs = clamp(rolloffs,-2.25,2.25);
		
		if( rolloffs != 0 ) A_SetRoll(rolloffs);
	}
	// Overtonnage logic
	if(CheckCompensative())
	{
		if(!inv_context.engine) 
		{
			MoveSpeedKPH = 10;
			setupSpeedKPH(10);
		}
		else
		{
			setupSpeedKPH(clamp(EngineGetKPH(),0,200));
		}
		float truetonnage = mech_shutdown ? mech_tonnage*0.25 : mech_tonnage;
		overfactor = clamp( (truetonnage/(inv_context.weapons_tonnage))*1.25, 0.1, 1.0);
		setupSpeedKPH(EngineGetKPH()*overfactor);
		float finalspd = clamp(MoveSpeed*0.3*overfactor*throttle_max, 0.1, 1.45);
		A_SetSpeed(finalspd);
	}
	
	// Leg Movement
	if(!defaultmovement)
	{
		// Move mech by a percentage of throttle.
		if(!stepping) 
		{
			float accel = ((1000/mech_tonnage)/100) * (0.12*move_accel);
			move_throttle = MDMath.Lerp( move_throttle, throttle, clamp(accel,0.008,0.4) );
			vel = (cos(LegAng)*(move_throttle*MoveSpeed),sin(LegAng)*(move_throttle*MoveSpeed),vel.z);
		}
		
		// Speed decay when engine removed.
		if(!inv_context || !inv_context.engine)
		{
			if(abs(throttle) > 0.05)
			{
				throttle *= 0.97;
			}
			else if(MoveSpeedKPH > 0)
			{
				throttle = 0;
				setupSpeedKPH(0);
			}
			return;
		}
	
		if(player.cmd.yaw+player.cmd.pitch != 0 && (abs((angle-LegAng)) < MaxYaw || uncappedtorso) )
			{ A_PlaySound("Mech/TorsoTwist",4,0.3,1); } else { A_StopSound(4); }
			
		if(throttle == 0) snd_accelerate = true;
		if(GetPlayerInput(INPUT_FORWARDMOVE) > 0)
		{
			bool prevaccel = GetPlayerInput(INPUT_OLDBUTTONS) & BT_FORWARD;
			throttle += 0.02;	
			if(throttle > 0 && reversing) 
			{
				if(prevaccel) 
					throttle = 0;
				else
					reversing = false;
			}
			
			// If stop is pressed and we continue moving, we don't want the two "forces" to fight.
			TakeInventory("IBTN_STOP",1);
			if(snd_accelerate){ A_PlaySound("Mech/AccelFromStop",1); snd_accelerate = false; }
		}
		else if(CVar.FindCVar("mwd_throttledecay").getInt() == 1 && throttle > 0.02)
		{
			throttle -= 0.02;
			if(!snd_accelerate){ A_PlaySound("Mech/DeccelToStop",1); snd_accelerate = true; }
		}
		
		if(GetPlayerInput(INPUT_FORWARDMOVE) < 0) 
		{
			bool prevdecel = GetPlayerInput(INPUT_OLDBUTTONS) & BT_BACK;
			throttle -= 0.02;
			if(throttle < 0 && !reversing) 
			{
				if(prevdecel) 
					throttle = 0;
				else
					reversing = true;
			}	
				
			TakeInventory("IBTN_STOP",1);
			if(!snd_accelerate){ A_PlaySound("Mech/DeccelToStop",1); snd_accelerate = true; }
		}
		else if(CVar.FindCVar("mwd_throttledecay").getInt() == 1 && throttle < 0)
		{
			throttle += 0.02;
			if(snd_accelerate){ A_PlaySound("Mech/AccelFromStop",1); snd_accelerate = false; }
		}
		
		throttle = clamp(throttle,-(throttle_max/2),throttle_max);
		
		if(throttle > 0.5 && !snd_reactor)
		{
			A_PlaySound("Mech/ReactorHum",CHAN_ITEM,0.3,1);
			snd_reactor = true;
		}
		else if(throttle < 0.5 && snd_reactor)
		{
			A_StopSound(CHAN_ITEM);
			snd_reactor = false;
		}
		
		if(!pilotlook)
		{
			if(GetPlayerInput(INPUT_SIDEMOVE) > 0)
			{
				TakeInventory("IBTN_CENTER",1);
				LegVel = -LegSpeed;
				LookVel = -LegSpeed;
			}
			if(GetPlayerInput(INPUT_SIDEMOVE) < 0 )
			{
				TakeInventory("IBTN_CENTER",1);
				LegVel = LegSpeed;
				LookVel = LegSpeed;
			}		
		}
		if( !floor(GetPlayerInput(INPUT_SIDEMOVE)*10) )
		{
			LookVel = 0;
			LegVel = 0;
		}
		   
		if(countinv("IBTN_STOP"))
		{
			if(abs(throttle) <= 0.1)TakeInventory("IBTN_STOP",1);
			if(throttle < 0)throttle += 0.02;
			if(throttle > 0)throttle -= 0.02;
			if(!snd_accelerate){A_PlaySound("Mech/DeccelToStop",1); snd_accelerate = true;}
			if(abs(throttle) <= 0.1)throttle = 0;
		}
		if(countinv("IBTN_CENTER"))
		{
			float yaw = MDMath.NormalizeAngle(angle-LegAng);
			if(yaw > 0) LegVel =  LegSpeed;
			if(yaw < 0) LegVel = -LegSpeed;
			if(abs(yaw) < LegSpeed*2) 
			{	
				LegAng = angle;
				LegVel = 0;
				TakeInventory("IBTN_CENTER",1);
			}
			if(abs(yaw) <= 0.1)TakeInventory("IBTN_CENTER",1);
		}
		if(countinv("IBTN_CENTERTORSO"))
		{
			float yaw = MDMath.NormalizeAngle(angle-LegAng);
			if(yaw > 0)angle-=2;
			if(yaw < 0)angle+=2;
			if(pitch > 0)pitch-=2;
			if(pitch < 0)pitch+=2;
			if(abs(yaw) < 2)
			{
				angle = LegAng;
				TakeInventory("IBTN_CENTERTORSO",1);
			}
			if(abs(yaw) <= 0.1)TakeInventory("IBTN_CENTERTORSO",1);
		}
		
		// Roll distortion when looking far up/down at odd leg angle.
		rolldistort = ( (cos((angle-LegAng)-90) * pitch) - (cos(angle) * (sin(pitch)*5)) )*0.5;
		if( !pilotlook && !mech_shutdown ) A_SetRoll( roll + rolldistort );
	
		float curspd = MoveSpeedKPH*move_throttle;
		float turnmod = clamp(1.0/(mech_tonnage/100), 0.5, 2);
		float spdmod = 1.0 - (abs(curspd)/2)*0.007;	
		
		// If we're in the air we can move our legs freely of friction.
		float finalmod = (player.onground ? turnmod*spdmod : 2);
		finalmod = clamp(finalmod, 0.15, 2);
		if(!CVar.GetCVar("mwd_relativelegspeed",player).getBool()) finalmod = clamp(finalmod, turnmod*LegSpeed, 2);
		
		// Leg Delta gets how much the leg angle changed between movement.
		// This conditionally does not track when center button is active.
		LegDelta = !countinv("IBTN_CENTER") ? (LegVel*finalmod)*2 : 0;
		
		LegAng += LegVel*finalmod;
		angle  += LookVel*finalmod;
	
		if( !mech_shutdown )
		{
			if(!pilotlook) Pitch = clamp(Pitch, -minPitch, maxPitch);
			if(MaxYaw < 360 && !uncappedtorso && !pilotlook)
			{
				if(angle - LegAng > MaxYaw)  angle = LegAng + MaxYaw;
				if(angle - LegAng < -MaxYaw) angle = LegAng - MaxYaw;
			}
		}
	}
	
	if( (GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) && Mech_HasJets && mech_jetsfuel > 0)
	{
		class<JumpJet> jj = "JumpJet";
		float truetonnage = CheckCompensative() ? inv_context.weapons_tonnage : mech_tonnage;
		double tonmod = 100-( truetonnage-(5*Mech_JetCount) );
		double zthrust = ( Mech_JetCount * GetDefaultByType(jj).thrust_power ) * ( tonmod/100 ) + ((mech_jetsfuel/100)*2);
		vel.z = zthrust * (defaultmovement ? 2 : 1);
		mech_jetsfuel -= 1;
		A_PlaySound("Mech/JetLoop",5,1,1);
	} 
	else if(!btn_userfive && mech_jetsfuel > 0)
	{
		A_StopSound(5);
	}
	
	if(btn_userfive && Mech_HasJets && mech_jetsfuel > 0)
	{
		class<JumpJet> jj = "JumpJet";
		double tonmod = 100-( mech_tonnage-(5*Mech_JetCount) );
		vel.z = ( Mech_JetCount * GetDefaultByType(jj).thrust_power ) * ( tonmod/100 ) + ((mech_jetsfuel/100)*2);
		mech_jetsfuel -= 1;
		A_PlaySound("Mech/JetLoop",5,1,1);
	} 
	else if ( !((GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) && mech_jetsfuel > 0))
	{
		A_StopSound(5);
	}
	
	if( (GetPlayerInput(0) & BT_ZOOM) )
	{
		if(player.DesiredFOV > 30)
		{
			player.DesiredFOV -= 3;
			A_PlaySound("Mech/Zoom",7,1,1);
		}
		else
		{
			A_StopSound(7);
		}
	}
	else
	{
		if(player.DesiredFOV < defaultfov)
		{
			player.DesiredFOV += 3;
			A_PlaySound("Mech/Zoom",7,1,1);
		}
		else
		{
			A_StopSound(7);
		}
	}

	// Cool utilities for easier pilotability!
	if(countinv("IBTN_OVERRIDE"))
	{
		if(!doShutdown)
		{
			TakeInventory("IBTN_OVERRIDE",1);
		}
		else
		{
			A_Print("Shutdown overridden.");
			doShutdown = false;
			shutdown_timer = ticks;
			A_PlaySound("Mech/Override",1);
			mechsounds.pushSound("Mech/Betty/ShutdownOverride");
			TakeInventory("IBTN_OVERRIDE",1);
		}
	}
	
	if(countStruct("JumpJet") > 0 && mech_jetsfuel < 100 && 
	 !(GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) &&
	 !btn_userfive && player.OnGround) mech_jetsfuel += 0.5;
}

void process_shutdown()
{
	if(!defaultmovement && !modelcockpit)
	{	
		angle = lockangle;
		pitch = lockpitch;
	}
	if(!manualshutdown)
	{	
		// Prevent powerup only to shutdown once again.
		if(countinv("IBTN_SHUTDOWN")) TakeInventory("IBTN_SHUTDOWN",1);
		
		if(throttle > 0)throttle -= 0.1;
		if(throttle < 0)throttle += 0.1;
		if( ((ticks - shutdown_timer) > 35) && HeatLevel <= (MWHEAT_MAX*0.2) && doShutdown)
		{
			// If we are very efficiently cooled, powerup early
			prevticks = ticks;
			mechsounds.pushSound("Mech/Betty/SystemsCheck");
			A_PlaySound("Mech/Power",2);
			mechsounds.pushSound("Mech/StartupDone");
			doShutdown = false;
		}
		if(!doShutdown && (ticks-prevticks) > 35*5)powerup();
		if(HeatLevel > 0)HeatLevel -= HeatEfficiency*3.0;
	}
	else
	{
		if(countinv("IBTN_SHUTDOWN") && !forceshutdown)
		{
			doShutdown = false;
			mechsounds.pushSound("Mech/Betty/SystemsCheck");
			A_PlaySound("Mech/Power",2);
			mechsounds.pushSound("Mech/StartupDone");
			manualshutdown = false;
			TakeInventory("IBTN_SHUTDOWN",1);
			prevticks = ticks;
		}
	}
	ticks++;
}
void powerup()
{
	mech_shutdown = false;
	doShutdown = false;
}

// Bobbing
void Bobbing() {
	// Don't bob on voodoos!
	if(!player || !player.mo || player.mo != self) return;
	
	float tiltosc_amp =  10 + (vel.Length()/4);
	float steposc_amp =  15 + (vel.Length()/2);
	tiltosc_amp = clamp(tiltosc_amp,0,18);
	steposc_amp = clamp(steposc_amp,0,24);
	TiltOsc += tiltosc_amp;
	StepOsc += steposc_amp;
	
	CrouchMulti = 2 - Player.CrouchFactor;

	if (TiltOsc >= 360.0 || TiltOsc < 0.0)    {
		TiltOsc = 0.0;
	}
	if (StepOsc >= 360.0 || StepOsc < 0.0)    {
		StepOsc = 0.0;
	}

	int vel = vel.length();
	if(vel != 0)
	{
		TiltOffset  = sin(TiltOsc);
		TiltOffset *= clamp((vel/2) - (LegVel*0.8), 0.05, 5.0);
		TiltOffset *= 0.21;
		if(defaultmovement) TiltOffset *= 0.6;
		TiltOffset *= CrouchMulti;

		StepOffset  = sin(StepOsc);
		StepOffset *= (vel/2) + (LegVel*2);
		StepOffset *= (1.78 + ((mech_tonnage)/100));
		StepOffset *= 0.54;
		if(defaultmovement) StepOffset *= 0.7;
		StepOffset *= CrouchMulti;
	}
	
	A_SetRoll(-TiltOffset);
	//SetOrigin(Vec3Angle(TiltOffset * 0.5, angle+90, 0, false), true);
	if(!mech_models) Player.ViewZ += StepOffset;
}