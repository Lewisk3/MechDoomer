	/*************************\
	|	  Movement System     |
	\*************************/
extend class MechWarriorBase;

// Properties
bool defaultmovement;
bool uncappedtorso;
bool autopilot;
bool autopilot_finish;

double minPitch, maxPitch;
double LegSpeed;
double MoveSpeedKPH;
double MaxYaw;

// Vars
bool snd_reactor;
bool snd_accelerate;
bool Mech_HasJets;
bool doShutdown;
bool mech_shutdown;
bool mech_poweringup;
bool slient_powerup; // Used to make betty not talk during end of power sequence
bool zoomed_in;
bool canShutdown;
bool manualshutdown;
bool stepping;
bool nofirstpersonlegs;
bool reversing;

int Mech_JetCount;
int bobdir;
int shutdown_timer;

double LegAng;
double LegDelta;
double lockpitch;
double lockangle;
double MoveSpeed;
double MoveSpeed_Max;
double throttle;
double throttle_max;
double move_throttle;
double move_accel;
double mech_jetsfuel;
double LookVel;
double LegVel;
double overfactor;
double rolloffs;

// Bobbing
double boboffs;
double desiredbob;
double TiltOsc;
double StepOsc;
double TiltOffset;
double StepOffset;
double CrouchMulti;
double rolldistort;
double defviewz;
double viewzoffs;  // Bob modifier for actual viewz.

// Autopilot
void ToggleAutopilot(bool forceoff = false)
{
	// Only autopilot to target
	if(!targetenemy) return;
	
	autopilot = forceoff ? false : !autopilot;
	autopilot_finish = false;
	
	mechSounds.PushSound("Mech/Betty/Autopilot");
	if(autopilot) 
	{
		Cockpit_Alert("\c[GREEN]Autopilot: Engaged");
		mechSounds.PushSound("Mech/Betty/Engaged");
	}
	else
	{
		Cockpit_Alert("\c[GREEN]Autopilot: Disabled");
		mechSounds.PushSound("Mech/Betty/Disabled");
	}
}
void DoAutopilot()
{
	if(!targetenemy) 
	{
		ToggleAutopilot(true);
		return;
	}
	
	bool reached = Distance3D(targetenemy) <= 128;
	double adiff = MDMath.NormalizeAngle( LegAng - AngleTo(targetenemy) );
	
	FLineTraceData lt;
	LookExParams lookp;
	lookp.FOV = 180;
	lookp.maxDist = double.infinity;
	bool cansee = IsVisible(targetenemy,true,lookp);
	
	// Find colliding wall, slide against normal.
	LineTrace(LegAng,64,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,20,0,0,lt);
	if(lt.HitLine)
	{
		double wnormal = VectorAngle(lt.HitLine.delta.x, lt.HitLine.delta.y);
		int sign = wnormal > 0 ? 1 : -1;
		if( abs(wnormal) == 180 ) wnormal = 160 * sign;
		double walloffs = 180;
		adiff = MDMath.NormalizeAngle(LegAng - wnormal+walloffs);
	}
	
	if(adiff > 0) LegAng -=  LegSpeed;
	if(adiff < 0) LegAng +=  LegSpeed;
	double yaw = MDMath.NormalizeAngle(angle-LegAng);
	if(abs(yaw) >= 2)
	{
		if(!pilotlook)
		{
			if(yaw > 0)angle-=2;
			if(yaw < 0)angle+=2;
			if(pitch > 0)pitch-=2;
			if(pitch < 0)pitch+=2;
		}
		if(abs(yaw) < 2) angle = LegAng;
		// Make sure we actually slide if a wall is in our way.
		if(throttle > 0 && !lt.HitLine) throttle -= 0.02;
	}
	if( ((!reached && abs(adiff) <= LegSpeed) || lt.HitLine) && !autopilot_finish )
	{
		throttle += 0.02;
		if(snd_accelerate){ A_StartLocalSound("Mech/AccelFromStop", CHAN_WEAPON); snd_accelerate = false; }
	}
	
	if(reached && !autopilot_finish)
	{
		autopilot_finish = true;
	}
	if(autopilot_finish)
	{
		if(throttle > 0)
		{
			throttle -= 0.02;
			if(!snd_accelerate){ A_StartLocalSound("Mech/DeccelToStop", CHAN_WEAPON); snd_accelerate = true; }
		}
		if(throttle < 0 && NAVPoint(targetenemy))
		{
			let newNAV = NAVPoint.NextNAV( NAVPoint(targetenemy).SEQ );
			
			if(newNAV == targetenemy || !newNAV)
				ToggleAutopilot(true);
			else
			{
				mechsounds.PushSound("Mech/NavBlip");
				targetenemy = newNAV;
				autopilot_finish = false;
			}
		}
		else if(!NAVPoint(targetenemy))
		{
			ToggleAutopilot(true);	
		}
	}
	
	// Disable autopilot if player is trying to move.
	if( countinv("IBTN_STOP")   ||
		countinv("IBTN_CENTER") ||
		countinv("IBTN_CENTERTORSO") ) ToggleAutopilot(true);

	if(GetPlayerInput(INPUT_FORWARDMOVE) > 0) ToggleAutopilot(true);
	if(GetPlayerInput(INPUT_FORWARDMOVE) < 0) ToggleAutopilot(true);
	if(GetPlayerInput(INPUT_SIDEMOVE)    > 0) ToggleAutopilot(true);	
	if(GetPlayerInput(INPUT_SIDEMOVE)    < 0) ToggleAutopilot(true);	
}

// Main
const HOURTOSEC = 3600.;
const TICRATE = 35.;
void setupSpeedKPH(double kph)
{
	// Calculations based on physics.
	double meters = (kph*1000.)/HOURTOSEC;
	double units = meters*MWGAMEPLAY_UNITMETER;
	double unitspeed = (units/TICRATE) * MWGAMEPLAY_MECHSPEEDSCALE;
	MoveSpeedKPH = kph;
	MoveSpeed = unitspeed; 
	MoveSpeed_Max = MoveSpeed;
	
	// Pseudo speed calculations.
	//kph_default = 25000; //75000
	//kph_real = 25000/MWGAMEPLAY_MECHSPEEDSCALE;
	//MoveSpeed = ceil((MoveSpeedKPH*15000)/kph_real);
	//MoveSpeed = ((kph*(10.0/36.0))/35.0) * (34*MWGAMEPLAY_MECHSPEEDSCALE);
}

void mech_cockpitbob()
{
	// Calculate Bob
	double movebobpart = MW_VELBOBFRAC;
	double bobthrust = 0;
	double tonmod = defaultmovement ? mech_tonnage/100.0 : clamp(mech_tonnage,50,100)/100.0;
	double bobmax = MW_BOBRANGE*tonmod;
	if(defaultmovement) bobmax *= 10;
	if(!bobdir) bobdir = 1;
	if(vel.z >  0.5) bobdir = 1;
	if(vel.z < -0.5) bobdir = -1;
	if(vel.length() > 0.08 || LegVel)
	{
		// 0.12
		double realvel = vel.length()+(LegVel**2);
		bobthrust = clamp(realvel*(movebobpart*MoveSpeed), -(bobmax/3), (bobmax/3));
		if(stepping) 
		{ 
			bobthrust = abs(bobthrust)*4;
			bobdir = 1;
		}
		boboffs += bobthrust * bobdir;
	}
	if(mech_shutdown)
	{
		bobdir = 1;
		bobthrust = bobmax;
	}
	if(abs(boboffs) > bobmax) 
	{
		bobdir *= -1;	
		boboffs = clamp(boboffs,-bobmax,bobmax);
	}
	if(mech_models)
	{
		// Calculate gyroscopics
		double gfactor = GetDefaultByType("StructGyro").power;
		double gyros = countStruct("StructGyro") - countStructDamaged("StructGyro",true);
		double bfactor = 2.76-(gyros*gfactor);
		double bobmod = boboffs*clamp( (bfactor*(mech_tonnage/100.0)), 1.2, 3.15);
		if(defaultmovement) bobmod *= 0.55;
		Player.ViewZ -= bobmod;
		viewzoffs = (Player.ViewZ-pos.z)-defviewz;
	}
}

void mech_movement()
{
	if(isdead) return;
	if(!CheckCompensative() && mech_shutdown) return;
	if(autopilot) DoAutopilot();
	CVar throttle_taptoggle = CVar.GetCVar("mwd_throttletaptoggle", player);
	bool taptoaccelerate = throttle_taptoggle && throttle_taptoggle.GetBool();
	
	// Movement Quirks
	if(defaultmovement && inv_context)
	{			
		if(!inv_context.engine && !CheckCompensative()) return;
		// Roll/Sway system
		uint btns = player.cmd.buttons;
		bool strafing = (btns & BT_MOVELEFT) | (btns & BT_MOVERIGHT);
		if(btns & BT_MOVELEFT) rolloffs -= 1;
		if(btns & BT_MOVERIGHT) rolloffs += 1;
		if(!strafing) rolloffs *= 0.90;
		if(abs(rolloffs) < 0.2) rolloffs = 0;
		rolloffs = clamp(rolloffs,-2.25,2.25);
		
		if( rolloffs != 0 ) A_SetRoll(rolloffs);
	}
	// Overtonnage logic
	if(CheckCompensative())
	{
		if(!inv_context.engine) 
		{
			MoveSpeedKPH = 10;
			setupSpeedKPH(10);
		}
		else
		{
			setupSpeedKPH(clamp(EngineGetKPH(),0,200));
		}
		double truetonnage = mech_shutdown ? mech_tonnage*0.25 : mech_tonnage;
		overfactor = clamp( (truetonnage/(inv_context.weapons_tonnage))*1.8, 0.1, 1.0);
		setupSpeedKPH(EngineGetKPH()*overfactor);
		double finalspd = clamp(MoveSpeed*0.3*overfactor*throttle_max, 0.1, 1.45);
		A_SetSpeed(finalspd);
	}
	
	// Process common control logic.
	MAB_Common();
	if(!player || checkAI()) return;
	
	// Leg Movement
	if(!defaultmovement)
	{			
		if(throttle == 0) snd_accelerate = true;
		if(GetPlayerInput(INPUT_FORWARDMOVE) > 0)
		{
			bool prevaccel = GetPlayerInput(INPUT_OLDBUTTONS) & BT_FORWARD;
			throttle += 0.02;	
			if(throttle > 0 && reversing && taptoaccelerate) 
			{
				if(prevaccel) 
				{
					throttle = 0;
					snd_accelerate = false;
				}
				else
				{
					reversing = false;
				}
			}
			
			// If stop is pressed and we continue moving, we don't want the two "forces" to fight.
			TakeInventory("IBTN_STOP",1);
			if(snd_accelerate){ A_StartLocalSound("Mech/AccelFromStop", CHAN_WEAPON); snd_accelerate = false; }
		}
		else if(CVar.FindCVar("mwd_throttledecay").getInt() == 1 && throttle > 0.02 && !autopilot)
		{
			throttle -= 0.02;
			if(!snd_accelerate){ A_StartLocalSound("Mech/DeccelToStop", CHAN_WEAPON); snd_accelerate = true; }
		}
		if(GetPlayerInput(INPUT_FORWARDMOVE) < 0) 
		{
			bool prevdecel = GetPlayerInput(INPUT_OLDBUTTONS) & BT_BACK;
			throttle -= 0.02;
			if(throttle < 0 && !reversing && taptoaccelerate) 
			{
				if(prevdecel) 
				{
					throttle = 0;
					snd_accelerate = true;
				}
				else
					reversing = true;
			}	
			
			TakeInventory("IBTN_STOP",1);
			if(!snd_accelerate){ A_StartLocalSound("Mech/DeccelToStop", CHAN_WEAPON); snd_accelerate = true; }
		}
		else if(CVar.FindCVar("mwd_throttledecay").getInt() == 1 && throttle < 0)
		{
			throttle += 0.02;
			if(snd_accelerate){ A_StartLocalSound("Mech/AccelFromStop", CHAN_WEAPON); snd_accelerate = false; }
		}
		
		if(throttle > 0.5 && !snd_reactor)
		{
			A_StartLocalSound("Mech/ReactorHum",CHAN_6,CHANF_LOOPING,0.5);
			snd_reactor = true;
		}
		else if(throttle < 0.5 && snd_reactor)
		{
			A_StopSound(CHAN_6);
			snd_reactor = false;
		}
		
		throttle = clamp(throttle,-(throttle_max/2),throttle_max);
		
		if(!pilotlook)
		{
			if(GetPlayerInput(INPUT_SIDEMOVE) > 0)
			{
				TakeInventory("IBTN_CENTER",1);
				LegVel = -LegSpeed;
				LookVel = -LegSpeed;
			}
			if(GetPlayerInput(INPUT_SIDEMOVE) < 0 )
			{
				TakeInventory("IBTN_CENTER",1);
				LegVel = LegSpeed;
				LookVel = LegSpeed;
			}		
		}
		if( !floor(GetPlayerInput(INPUT_SIDEMOVE)*10) )
		{
			LookVel = 0;
			if(!countinv("IBTN_CENTER")) LegVel = 0;
		}
	}
	else
	{
		// Set leg angle to looking angle.
		LegAng = angle;
	}
	
	// Jump Jets, Zoom and Override
	bool jets = (GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) || btn_jumpjets;
	if(jets && Mech_HasJets && mech_jetsfuel > 0)
	{
		class<JumpJet> jj = "JumpJet";
		double w = CheckCompensative() ? inv_context.weapons_tonnage : mech_tonnage;
		double jthrust = GetDefaultByType(jj).thrust_power;
		double boost    = ( Mech_JetCount/(2.0+Mech_JetCount*0.2) ) + 1;
		double weight_t = (((100-w)/100) * 2.16) + 1;
		double fuel_t   = (((100 - mech_jetsfuel)**2 / 200**2) + 0.8);
		double zthrust  = fuel_t * (jthrust * boost) * weight_t;
		double finalthrust = clamp(zthrust, 0.1, 0.7) * 0.5;
		
		// Apply velocity
		double jetpitch = 40;
		vel += (
			cos(LegAng)*cos(jetpitch)*(zthrust*10), 
			sin(LegAng)*cos(jetpitch)*(zthrust*10), 
			sin(jetpitch)*finalthrust
		);
		
		mech_jetsfuel -= 0.5;
		if(mech_jetsfuel > 10) 
		{
			A_SetGravity(default.gravity*0.75);
			A_StartSound("Mech/JetLoop", CHAN_5, CHANF_LOOPING);
		}
	} 
	else if(!jets || player.onground || mech_jetsfuel <= 10)
	{
		A_StopSound(CHAN_5);
	}
	
	// Cool utilities for easier pilotability!
	if(countinv("IBTN_OVERRIDE"))
	{
		if(!doShutdown)
		{
			TakeInventory("IBTN_OVERRIDE",1);
		}
		else
		{
			Cockpit_Alert("\c[SAPPHIRE]Shutdown overridden.");
			doShutdown = false;
			shutdown_timer = ticks;
			A_StartLocalSound("Mech/Override", CHAN_BODY, CHANF_OVERLAP);
			mechsounds.pushSound("Mech/Betty/ShutdownOverride");
			TakeInventory("IBTN_OVERRIDE",1);
		}
	}
	
	if(countStruct("JumpJet") > 0 && mech_jetsfuel < 100 && 
	 !(GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) &&
	 !btn_jumpjets && player.OnGround) mech_jetsfuel += 0.5;
}

void shutdown_setup(bool critical = true, bool forced = false, bool silent = false)
{
	if(!silent)
	{
		A_StopSound(CHAN_VOICE);
		Cockpit_Alert("\c[SAPPHIRE]Shutting down...");
		A_StartLocalSound("Mech/Betty/ShuttingDown", CHAN_VOICE);
		A_StartLocalSound("Mech/Shutdown", CHAN_VOICE, CHANF_OVERLAP);
		hAlert.hud_powersequence = MechStatusBar.GetAnimFlags();
	}
	else
		hAlert.hud_powersequence = 0;
	
	doShutdown = true;
	lockangle = angle;
	lockpitch = pitch;
	mech_shutdown = true;
	
	if(critical) 
		shutdown_timer = ticks;
	else
		manualshutdown = true;
	if(forced) forceshutdown = true;
}
void powerup_setup(bool critical = true, bool forced = false, bool silent = false)
{
	prevticks = ticks;
	mech_poweringup = true;
	doShutdown = false;
	hAlert.hud_powersequence = MechStatusBar.GetAnimFlags();
	A_StartLocalSound("Mech/Power", CHAN_BODY, CHANF_OVERLAP);
	Cockpit_Alert("\c[GREEN]Powering up...", 30);	
	slient_powerup = silent;
	
	if(!critical) manualshutdown = false;
	if(forced) forceshutdown = false;
}

void process_shutdown()
{
	if(!defaultmovement && !modelcockpit)
	{	
		angle = lockangle;
		pitch = lockpitch;
	}
	radar_scale = 0;
	if(!manualshutdown)
	{	
		// Prevent powerup only to shutdown once again.
		if(countinv("IBTN_SHUTDOWN")) TakeInventory("IBTN_SHUTDOWN",1);
		
		if(throttle > 0)throttle -= 0.1;
		if(throttle < 0)throttle += 0.1;
		if( ((ticks - shutdown_timer) > 35) && HeatLevel <= (MWHEAT_MAX*0.2) && doShutdown)
		{
			// If we are very efficiently cooled, powerup early
			powerup_setup();
		}
		if(!doShutdown && (ticks-prevticks) > 35*4)
		{
			A_StartLocalSound("Mech/StartupDone", CHAN_BODY, CHANF_OVERLAP);
			if(!slient_powerup) 
				mechsounds.pushSound("Mech/Betty/SystemsCheck");
			powerup();
		} 
		if(HeatLevel > 0)HeatLevel -= HeatEfficiency*3.0;
	}
	else
	{
		if(countinv("IBTN_SHUTDOWN") && !forceshutdown)
		{
			powerup_setup(false);
			TakeInventory("IBTN_SHUTDOWN",1);
		}
	}
	ticks++;
}
void powerup()
{
	mech_shutdown = false;
	doShutdown = false;
	mech_poweringup = false;
	slient_powerup = false;
}

// Bobbing
void Bobbing() {
	// Don't bob on voodoos!
	if(!player || !player.mo || player.mo != self || checkAI()) return;
	
	double tiltosc_amp =  10 + (vel.Length()/4);
	double steposc_amp =  15 + (vel.Length()/2);
	tiltosc_amp = clamp(tiltosc_amp,0,18);
	steposc_amp = clamp(steposc_amp,0,24);
	TiltOsc += tiltosc_amp;
	StepOsc += steposc_amp;
	
	CrouchMulti = 2 - Player.CrouchFactor;

	if (TiltOsc >= 360.0 || TiltOsc < 0.0)    {
		TiltOsc = 0.0;
	}
	if (StepOsc >= 360.0 || StepOsc < 0.0)    {
		StepOsc = 0.0;
	}

	int vel = vel.length();
	if(vel != 0)
	{
		TiltOffset  = sin(TiltOsc);
		TiltOffset *= clamp((vel/2) - (LegVel*0.8), 0.05, 5.0);
		TiltOffset *= 0.25;
		if(defaultmovement) TiltOffset *= 0.6;
		//TiltOffset *= rolldistort*0.1;

		StepOffset  = sin(StepOsc);
		StepOffset *= (vel/2) + (LegVel*2);
		StepOffset *= (1.78 + ((mech_tonnage)/100));
		StepOffset *= 0.54;
		if(defaultmovement) StepOffset *= 0.7;
		StepOffset *= CrouchMulti;
	}
	
	A_SetRoll(-TiltOffset);
	//SetOrigin(Vec3Angle(TiltOffset * 0.5, angle+90, 0, false), true);
	if(!mech_models) Player.ViewZ += StepOffset;
}