
// Used for processing messages between UI elements.
// Probably Hax, if it is, I'll fix it but right now it "JustWorks".
struct HudAlert 
{	
	String mechlab_text;
	Array<String> cockpit_messages;
	
	// Used for timing messages, currently used for cockpit_messages.
	double mtimer1; 
	double mtimer2;
	
	// Used for animating HUD features when powering up.
	// This is a system of flags.
	uint hud_powersequence; // Nothing animating. 
}

class Items_ShopData
{
	int energy_min;
	int energy_max;
	int ballistics_min;
	int ballistics_max;
	int missiles_min;
	int missiles_max;
	int ammo_min;
	int ammo_max;
	int engines_min;
	int engines_max;
	Array<mw_InvStruct> items;
	Array<String> items_names;
}
class mw_InvStruct
{
	string Tag;
	Array<String> description;
	string shopdesc;
	class<Mechbase_Utility> utiltype;
	MechutilDefs utildefs;
	MechHardpoint hardpoint;
	bool broken;
	int active_cooldown; // Used for temporary cooldowns on structure items.
	int dmg_taken;
	int ammunition; // Contains ammo left in structure.
	int hardslots;
	String displayName;
	double weight;
	bool moveable;
	bool takesnodamage;
	int worth;
	int amt; // Stackable items, banzai!
}

class mw_CombatObjective : Object
{
	int priority;
	String description;
	bool completed;
	bool failed;
	int id;
}

class mw_StoredWeapon : Object
{
	String Tag;
	class<Mechbase_Weapon> baseclass;
	int group;
	int WeaponID;
	MechHardpoint hardpoint;
}
class mw_MechInvDefaults : Object
{
	Mechbase_EngineOBJ engine;
	double weapons_tonnage;
	double armor_tonnage; 
	double MoveSpeedKPH;
	double heateff;
	int weapons_count;
}
class mw_StoredMech : Object
{
	mw_MechInvDefaults inv_defs;
	mw_InvInfo inv_context;
	Array<mw_StoredWeapon> active_weapons;
	class<MechWarriorBase> baseclass;
}
class mw_InvInfo : Item_NoPickup
{
	MechHardpoints hardpoints;
	Array<mw_InvStruct> weapon_items; // Stores all mech items before they go into the inventory.
	Array<mw_InvStruct> mechstructs;  // These are equipped structs.
	Array<mw_StoredMech> mechs;
	Mechbase_EngineOBJ engine;
	int weapons_count;
	int maxgroup;
	double heateff;
	bool active;
	
	uint money_cbills;			// moneys
	double weapons_tonnage;		// How much weapons weigh.
	double armor_tonnage;		// How much armor weighs.
	
	void Init()
	{
		hardpoints = MechHardpoints.Create();
	}	
	
	Default
	{
		inventory.maxamount 1;
	}
}
class MechWarriorBase : DoomPlayer
{
	// Chassis properties
	Property heatEff  : baseHeatEfficiency;
	Property LegSpeed : LegSpeed;
	Property Acceleration : move_accel;
	Property TwistRange : MaxYaw;
	Property PitchRange : minPitch, maxPitch;
	Property Weight : mech_tonnage;
	Property HudMech : hud_mech;
	Property HudCockpit : hud_cockpit;
	Property Engine : base_engine;
	Property DefaultMovement: defaultmovement;
	Property InfiniteTorsoTwist: uncappedtorso;
	Property CockpitIsModel: modelcockpit;
	Property MechPieces : mech_models;
	Property Manufacturer : mechtype;
	Property HideLegsPerspective : nofirstpersonlegs;
	property CValue : worth;
	
	// Clearscope
	clearscope class<Mechbase_Utility> utilcast(String type)
	{
		class<Mechbase_Utility> mechutil = type;
		return mechutil;
	}
	clearscope int checkItemWorth(String item)
	{
		class<Mechbase_Utility> item_ut = item;
		class<Mechbase_Weapon> item_weap = item;
		if(item_ut)return GetDefaultByType(item_ut).worth;
		if(item_weap)return GetDefaultByType(item_weap).worth;
		
		return 0;
	}
	clearscope bool checkVoodoo() 
	{ 
		return docopy_novoodoo ? false : (!player || !player.mo || player.mo != self); 
	}
	clearscope String getChassisName()
	{
		if(!baseclass) return "???";
		return GetDefaultByType(baseclass).getClassName();
	}
}

// Mechs template
class MechWarrior : MechWarriorBase
{
	Default
	{
		Speed 0;
		MaxStepHeight 48;
		Player.AttackZOffset 52;
		Player.ForwardMove 0.7, 0.9;
		Player.SideMove 1.0, 1.0;
		Player.UseRange 128;
		Player.ViewBob 0;
		Player.JumpZ 0;
		Player.SoundClass "MechWarrior";
		Player.DisplayName "";
		
		MechWarriorBase.CValue 1000000;
		MechWarriorBase.Manufacturer MechWarriorBase.MechType_Innersphere;
		MechWarriorBase.Engine "Engine_STD_300";
		MechWarriorBase.heatEff 0.02;
		MechWarriorBase.HudCockpit "CROW";
		MechWarriorBase.HudMech "";
		MechWarriorBase.LegSpeed 1.2;
		MechWarriorBase.Acceleration 1.0;
		MechWarriorBase.TwistRange 90;
		MechWarriorBase.PitchRange 30,20;
	}
	// This may seem like a mistake, it's not.
	// This somehow makes movement a WHOLE lot smoother, idek, it WAS a mistake at first.
	override void tick()
	{
		if(!checkVoodoo() && inv_context) 
		{
			mech_movement();
			Bobbing();
		}
		super.tick();
	}
	
	States
	{
	  Spawn:
		TNT1 A -1;
		Loop;
	  See:
		TNT1 ABCD 4;
		Loop;
	  Missile:
		TNT1 E 12;
		Goto Spawn;
	  Melee:
		TNT1 F 6 BRIGHT;
		Goto Missile;
	  Pain:
		TNT1 G 4;
		TNT1 G 4 A_Pain();
		Goto Spawn;
	  Death:
	  Death1:
		TNT1 H 10;
		TNT1 I 10 A_Scream();
		TNT1 J 10 A_NoBlocking();
		TNT1 KLM 10;
		TNT1 N -1;
		Stop;
	  XDeath:
	  XDeath1:
		TNT1 O 5;
		TNT1 P 5 A_XScream();
		TNT1 Q 5 A_NoBlocking();
		TNT1 RSTUV 5;
		TNT1 W -1;
		Stop;
	  AltSkinDeath:
		TNT1 H 6;
		TNT1 I 6 A_PlayerScream();
		TNT1 JK 6;
		TNT1 L 6 A_NoBlocking();
		TNT1 MNO 6;
		TNT1 P -1;
		Stop;
	  AltSkinXDeath:
		TNT1 Q 5 A_PlayerScream();
		TNT1 R 0 A_NoBlocking();
		TNT1 R 5 A_SkullPop();
		TNT1 STUVWX 5;
		TNT1 Y -1;
		Stop;
	}
}
// 3D models (sample models)
class Jenner_3D : Actor
{
	States
	{
		Spawn:
			JENN A 1;
		loop;
	}
}
class Atlas_3D : Actor
{
	States
	{
		Spawn:
			ATLS A 1;
		loop;
	}
}
class Stormcrow_3D : Actor
{
	States
	{
		Spawn:
			MECH A 1;
		loop;
	}
}
class Timberwolf_3D : Actor
{
	States
	{
		Spawn:
			MECH A 1;
		loop;
	}
}