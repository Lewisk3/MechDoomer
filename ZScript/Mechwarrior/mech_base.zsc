struct HudAlert 
{	
	String text;
	int col;
}
class mw_InvStruct
{
	string Tag;
	MechHardpoint hardpoint;
	bool broken;
	int dmg_taken;
}
class mw_InvInfo : Inventory
{
	
	MechHardpoints hardpoints;
	Array<String> weapon_items; // Stores all mech items before they go into the inventory.
	Array<mw_InvStruct> mechstructs;  // These are equipped structs.
	Mechbase_EngineOBJ engine;
	
	int money_cbills;			// moneys
	float weapons_tonnage;		// How much weapons weigh.
	
	void Init()
	{
		hardpoints = MechHardpoints.Create();
	}	
	
	Default
	{
		inventory.maxamount 1;
	}
}
class MechWarriorBase : DoomPlayer
{
	// Chassis properties
	Property heatEff  : baseHeatEfficiency;
	Property LegSpeed : LegSpeed;
	Property TwistRange : MaxYaw;
	Property PitchRange : minPitch, maxPitch;
	Property Weight : mech_tonnage;
	Property HudMech : hud_mech;
	Property HudCockpit : hud_cockpit;
	Property Engine : base_engine;
	Property DefaultMovement: defaultmovement;
	Property InfiniteTorsoTwist: uncappedtorso;
	Property OverTonnage: overtonnage;
	Property CockpitIsModel: modelcockpit;
	Property SetCockpitHandler: cphandler;
	Property LegsModel : mech_legs;
	Property Manufacturer : mechtype;
	
	// Clearscope
	clearscope void sendHudAlert(String str, int c)
	{
		hAlert.text = str;
		hAlert.col = c;
	}
	clearscope class<Mechbase_Utility> utilcast(String type)
	{
		class<Mechbase_Utility> mechutil = type;
		return mechutil;
	}
	clearscope int checkItemWorth(String item)
	{
		class<Mechbase_Utility> item_ut = item;
		class<Mechbase_Weapon> item_weap = item;
		if(item_ut)return GetDefaultByType(item_ut).worth;
		if(item_weap)return GetDefaultByType(item_weap).worth;
		
		return 0;
	}
	clearscope bool checkVoodoo() 
	{ 
		return (!player || !player.mo || player.mo != self); 
	}
}