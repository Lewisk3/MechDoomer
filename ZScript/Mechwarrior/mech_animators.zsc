// Mech animator base
class MechAnimator : Inventory
{
	MechWarriorBase mech;
	Color FadeColor;
	double fadeto;
	double fadeinspd, fadeoutspd;
	double xshake, yshake, zshake;
	double ashake, pshake, rshake;
	int quaketimer;
	int fdelay;
	int dir;
	bool persistent;
	
	Property FadeAnimate : FadeColor, fadeto, fadeinspd;
	Property DelayFadeout : fdelay, fadeoutspd;
	Property Quake : quaketimer, ashake, pshake, rshake, xshake, yshake, zshake;
	Property Persists : persistent;
	
	Default
	{
		MechAnimator.FadeAnimate "FF FF FF", 1.0, 0.05;
		MechAnimator.DelayFadeout 35, 0.05;
		MechAnimator.Quake 70, 3,3,0, 0,0,10;
		MechAnimator.Persists false;
		inventory.maxamount 1;
	}
	
	int CountAnimators()
	{
		if(!mech) return 0;
		int cnt = 0;
		for(let i = mech.Inv; i != NULL; i = i.Inv)
		{
			if(i is "MechAnimator") cnt++;
		}
		return cnt;
	}
	
	
	override void DoEffect()
	{
		super.DoEffect();
		if(!mech) 
		{
			mech = MechWarriorBase(Owner);			
			return;
		}
		
		if(!persistent)
		{
			if(GetAge() > fdelay+(35*3))
			{
				mech.screen_fadecolor = 0;
				mech.screen_fade = 0;
				mech.RemoveInventory(self);
				GoAwayAndDie();
				return;
			}
			if(mech && CountAnimators() > 1) 
			{	
				mech.screen_fade = 0;
				mech.RemoveInventory(self);
				GoAwayAndDie();
				return;
			}
		}
		
		if(mech && mech.isdead) 
		{
			mech.screen_fadecolor = 0;
			mech.screen_fade = 0;
			mech.RemoveInventory(self);
			GoAwayAndDie();
			return;
		}
		
		if(fadeto != -1)
		{
			mech.screen_fadecolor = fadecolor;
			if(dir && fdelay) fdelay--;
			if(!dir || dir && !fdelay) 
				mech.screen_fade = MDMath.Lerp(mech.screen_fade, !dir ? fadeto : 0, !dir ? fadeinspd : fadeoutspd);
			
			if(abs(mech.screen_fade-fadeto) < 0.05) mech.screen_fade = fadeto;
			
			if(mech.screen_fade >= fadeto*0.995 && !dir) dir = 1;
			else if(mech.screen_fade <= 0.01 && dir && !quaketimer)
			{
				mech.screen_fadecolor = 0;
				mech.screen_fade = 0;
				if(!persistent)
				{
					mech.RemoveInventory(self);
					GoAwayAndDie();
				}
				return;
			}
		}
		
		if(quaketimer)
		{	
			Actor cockpit = mech;
			Actor cam = cockpit;
			if(mech.models_reference)
			{
				cockpit = mech.models_reference.cockpit;
				cam = MechCockpitModel(cockpit).cockpitcam;
			}
			if(cockpit)
			{
				cockpit.SetOrigin(
					cockpit.Vec3Offset( frandom(-xshake,xshake),
										frandom(-yshake,yshake),
										frandom(-zshake,zshake)  ), true
				);
				cockpit.A_SetAngle(cockpit.angle+frandom(-ashake, ashake), SPF_INTERPOLATE);
				cockpit.A_SetPitch(cockpit.pitch+frandom(-pshake, pshake), SPF_INTERPOLATE);
				cockpit.A_SetRoll(cockpit.roll+frandom(-rshake, rshake), SPF_INTERPOLATE);
				if(cockpit != cam)
				{
					cam.SetOrigin(
						cam.Vec3Offset( frandom(-xshake,xshake),
											frandom(-yshake,yshake),
											frandom(-zshake,zshake)  ), true
					);
					cam.A_SetAngle(cam.angle+frandom(-ashake, ashake), SPF_INTERPOLATE);
					cam.A_SetPitch(cam.pitch+frandom(-pshake, pshake), SPF_INTERPOLATE);
					cam.A_SetRoll(cam.roll+frandom(-rshake, rshake), SPF_INTERPOLATE);
				}
			}
			quaketimer--;
		}
	}
}

// Damage animators
class MechAnimate_InternalDamage : MechAnimator
{
	Default
	{
		MechAnimator.Quake 5, 2,2,2, 0,0,2;
		MechAnimator.FadeAnimate "FF 00 00", 0.3, 0.20;
		MechAnimator.DelayFadeout 4, 0.20;
	}	
}
class MechAnimate_CriticalDamage : MechAnimator
{
	Default
	{
		MechAnimator.Quake 15, 2,2,4, 0,10,8;
		MechAnimator.FadeAnimate "FF 00 00", 0.5, 0.12;
		MechAnimator.DelayFadeout 12, 0.12;
	}	
}
class MechAnimate_DamageShake : MechAnimator
{
	Default
	{
		MechAnimator.Quake 10, 1,1,0, 1,1,2;
		MechAnimator.FadeAnimate "00 00 00", -1, 0;
	}	
}

// Mech deploy fade
class MechExchange_Animator : Powerup
{
	MechWarriorBase mech;
	int mechbaynum;
	double fadeto;
	bool activate;
	bool fadeout;
	bool done;
	int clock;
	
	Default
	{
		Powerup.Duration 0x7FFFFFFD; // lasts about 2 years;
	}
	
	static MechExchange_Animator Setup(MechWarriorBase curmech, int swapmechbay)
	{
		curmech.GiveInventory("MechExchange_Animator",1);
		let mea = MechExchange_Animator(curmech.FindInventory("MechExchange_Animator"));
		if(mea) 
		{
			mea.mechbaynum = swapmechbay;
			mea.mech = curmech;
			mea.begin();
		}
		return mea;
	}
	
	void begin()
	{
		let tomech = mech.inv_context.mechs[mechbaynum];
		bool ismech = true;
		if( tomech.inv_context && tomech.inv_context.engine && 
		    tomech.inv_context.engine.model == EngineDatabase.Type_Organic )
			ismech = false;
			
		string msg;
		if(ismech) 
			msg = "\c[SAPPHIRE]Deploying new mech...";
		else
			msg = "\c[SAPPHIRE]Exiting mech...";
			
		mech.Cockpit_Alert(msg, 35);
	}

	override void DoEffect()
	{
		if(clock) clock--;
		mech.screen_fadecolor = Color(255,0,0,0);
		mech.screen_fade = fadeto/255.0;
		
		fadeto += fadeout ? -3 : 3;
		if(fadeto >= 300 && !fadeout) 
			activate = true;
		else if(fadeto <= 20 && fadeout) 
			done = true;
	
		if(mech && activate)
		{
			vector3 spawnpos;
			double spawnangle;
			[spawnpos, spawnangle] = level.PickPlayerStart(mech.PlayerNumber());
			mech.SetOrigin(spawnpos, false);
			mech.angle = spawnangle;
			mech.LegAng = mech.angle;
			mech.ChangeMech(mechbaynum);
			fadeout = true;
			activate = false;
		}
		if(done)
		{
			mech.screen_fade = 0;
			mech.RemoveInventory(self);
			mech.powerup_setup(false, true);
			GoAwayAndDie();
		}
		super.DoEffect();
	}
}

// General Animators
class FallAnimator : MechAnimator
{
	int priority;
	double force;
	int atime;
	int timer;
	Default
	{
		MechAnimator.FadeAnimate "FF FF FF", -1, 0; // Disable fade animations
		MechAnimator.DelayFadeout 0, 0;
		MechAnimator.Quake 0, 0,0,0, 0,0,0;
		MechAnimator.Persists true;
	}
	
	static FallAnimator Animate(MechwarriorBase mech, double force, int atime = 30, int priority = int.max)
	{
		mech.GiveLocalInv("FallAnimator");
		let anim = FallAnimator(mech.FindInventory("FallAnimator"));
		if(anim && priority >= anim.priority)
		{
			anim.force = force;
			anim.atime = atime;
			anim.priority = priority;
			anim.timer = 0;
		}
		return anim;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if(!mech) return;
		
		double topitch = force*sin(dir);
		Actor cockpit = mech;
		if(mech.models_reference && mech.models_reference.cockpit) 
		{
			cockpit = mech.models_reference.cockpit.cockpitcam;
			let cmodel = mech.models_reference.cockpit;
			cmodel.A_SetPitch(MDMath.Lerp(cmodel.pitch, -cmodel.pitch+topitch, 0.1), SPF_INTERPOLATE);
		}
		cockpit.A_SetPitch(MDMath.Lerp(cockpit.pitch, cockpit.pitch+topitch, 0.25), SPF_INTERPOLATE);
			
		if(timer > atime && abs(force) <= 1) 
		{
			mech.RemoveInventory(self);
			GoAwayAndDie();
		}
		
		dir += 10;
		force *= 0.92;
		timer++;
	}
}


class DropshipAnimator : MechAnimator
{ 
	double holdtime, groundtime;
	bool introplayed;
	
	Property DropTiming : holdtime, groundtime;
	Default
	{
		MechAnimator.FadeAnimate "FF FF FF", 1.0, 1.0;
		MechAnimator.DelayFadeout 35*2, 0.05;
		MechAnimator.Quake 35*6, 0.25,0.25,0.25, 0.25,0.25,0.25;
		DropShipAnimator.DropTiming 35*2, 35*8;
		MechAnimator.Persists true;
	}
	
	virtual void BettyIntro()
	{
		mech.mechsounds.pushSound("Mech/Betty/Intros/Macduff_One");
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if(!mech) return;
		if(GetAge() <= 2)
		{
			mech.SetAI_Enabled(false);
			mech.SetOrigin(mech.Vec3Offset(0,0,mech.ceilingz), false);
			mech.shutdown_setup(false, true, true);
		}

		if(GetAge() < holdtime) 
			mech.bNOGRAVITY = true;
		else
		{
			mech.bNOGRAVITY = false;
			if(!introplayed) 
			{
				BettyIntro();
				introplayed = true;
			}
			mech.A_SetGravity(mech.default.gravity*0.25);
		}
		
		if(mech.player.onground && (GetAge() > groundtime) && mech.doShutdown)
		{
			mech.powerup_setup(false, true, true);
		}
		
		if(!mech.doShutdown && !mech.mech_poweringup)
		{
			mech.SetAI_Enabled(true);
			persistent = false;
			mech.A_SetGravity(mech.default.gravity);
		}
	}
}