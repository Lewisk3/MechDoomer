
// Engine base
class EngineDatabase Abstract
{
	enum EngineType 
	{
		Type_STD,
		Type_Light,
		Type_XL,
		Type_XXL,
		Type_Compact
	}
	
	static float roundTons(float value)
	{	
		return ceil(value*2)/2;
	}
	
	static float GetTonnage(int engine, int type)
	{
		float std_index_tons[99] =
		{
			0.5,0.5,0.5,0.5,1.0,1.0,1.0,1.0,
			1.5,1.5,1.5,2.0,2.0,2.0,
			2.5,2.5,3.0,3.0,3.0,
			3.5,3.5,4.0,4.0,4.0,
			4.5,4.5,5.0,5.0,
			5.5,5.5,6.0,6.0,6.0,
			7.0,7.0,7.5,7.5,8.0,
			8.5,8.5,9.0,
			9.5,10.0,10.0,
			10.5,11.0,
			11.5,12.0,
			12.5,13.0,
			13.5,14.0,
			14.5,15.5,
			16.0,16.5,
			17.5,18.0,
			19.0,19.5,20.5,
			21.5,22.5,
			23.5,24.5,
			25.5,27.0,
			28.5,29.5,
			31.5,33.0,
			34.5,36.5,
			38.5,41.0,
			43.5,46.0,
			49.0,52.5,
			56.5,61.0,66.5,72.5,79.5,97.0,
			107.5,119.5,133.5,150.0,168.5,190.0,
			214.5,243.0,313.0,356.0,405.5,462.5
		};
		float tons = std_index_tons[floor(engine/5)-2];
		if(type == Type_STD    ) return tons;
		if(type == Type_Light  ) return roundTons(tons*0.75);
		if(type == Type_XL	   ) return roundTons(tons*0.50);
		if(type == Type_XXL    ) return roundTons(tons*0.33);
		if(type == Type_Compact) return roundTons(tons*1.50);
		return 200;
	}
}

class Mechbase_Engine : Mechbase_Utility
{
	int enginetype;
	int model;
	float baseworth;
	float heatsink_scalar;
	float dbl_heatsink_scalar;
	int ctslots;
	int ltslots;
	int rtslots;
	int gyroslots;
	int intrinsic_heatsinks;
	int intrinsic_doubleheatsinks;
	
	Property Type : enginetype;
	Property Criticals : gyroslots, ctslots, ltslots, rtslots;
	Property CValue : worth;
	Property ScalarCValue : baseworth;
	Property Heatsinks : intrinsic_heatsinks, intrinsic_doubleheatsinks;
	Property BaseHeatsinks: heatsink_scalar, dbl_heatsink_scalar;
	
	Default
	{
		Mechbase_Utility.Criticals 1; // Not actually equipped in such a way.
		Mechbase_Utility.Moveable true;
		+NOINTERACTION;
	}
	
	clearscope static string GetRealName(class<Mechbase_Engine> type)
	{
		let defs = GetDefaultByType(type);
		String cname = defs.getClassName();
		Array<String> cnametokens;
		cnametokens.Clear();
		cname.Split(cnametokens,"_");
		cname = cnametokens[2];
		string t_prefix = cnametokens[1];
		int cname_type = cname.ToInt();
		return t_prefix .. cname_type .. " ENGINE";
	}
	
	clearscope static float GetRealWorth(class<Mechbase_Engine> type)
	{
		let defs = GetDefaultByType(type);
		String cname = defs.getClassName();
		Array<String> cnametokens;
		cnametokens.Clear();
		cname.Split(cnametokens,"_");
		cname = cnametokens[2];
		int cname_type = cname.ToInt();
		int type = defs.enginetype | cname_type;
		return defs.baseworth ? defs.baseworth*type : defs.worth;
	}
	
	clearscope static string, int, int, float, float GetBasics(class<Mechbase_Engine> type)
	{
		let defs = GetDefaultByType(type);
		String cname = defs.getClassName();
		
		Array<String> cnametokens;
		cnametokens.Clear();
		cname.Split(cnametokens,"_");
		cname = cnametokens[2];
		string t_prefix = cnametokens[1];
		int cname_type = cname.ToInt();
		uint engmodel = 0;
		if(cnametokens[1] == "STD") engmodel = EngineDatabase.Type_STD;
		if(cnametokens[1] ==  "XL") engmodel = EngineDatabase.Type_XL;
		if(cnametokens[1] == "XXL") engmodel = EngineDatabase.Type_XXL;
		if(cnametokens[1] ==   "L") engmodel = EngineDatabase.Type_Light;
		if(cnametokens[1] == "COM") engmodel = EngineDatabase.Type_Compact;
		
		string displayname = t_prefix .. cname_type .. " ENGINE";
		int type = defs.enginetype | cname_type;
		float weight = EngineDatabase.GetTonnage(cname_type,engmodel);
		float worth = defs.baseworth ? defs.baseworth*type : defs.worth;
		
		int sinks = (int(defs.heatsink_scalar*type) | defs.intrinsic_heatsinks) + 
					(int(defs.dbl_heatsink_scalar*type) | defs.intrinsic_doubleheatsinks);
		
		return displayname, type, sinks, weight, worth;
	}
	
	clearscope static Mechbase_EngineOBJ Create(class<Mechbase_Engine> type)
	{
		let defs = GetDefaultByType(type);
		let engineobj = Mechbase_EngineOBJ(new("Mechbase_EngineOBJ"));
		String dName;
		int etype, sinks;
		float weight, worth;
		[dName, etype, sinks, weight, worth] = Mechbase_Engine.GetBasics(type);	
		if(engineobj)
		{
			engineobj.ClassType = defs.getClassName();
			engineobj.displayName = dName;
			engineobj.weight = weight;
			engineobj.worth = worth;
			engineobj.enginetype = etype;
			engineobj.intrinsic_heatsinks = int(defs.heatsink_scalar*engineobj.enginetype) | defs.intrinsic_heatsinks;
			engineobj.intrinsic_doubleheatsinks = int(defs.dbl_heatsink_scalar*engineobj.enginetype) | defs.intrinsic_doubleheatsinks;
			engineobj.gyroslots = defs.gyroslots;
			engineobj.ctslots = defs.ctslots;
			engineobj.ltslots = defs.ltslots;
			engineobj.rtslots = defs.rtslots;
		}
		return engineobj;
	}
	
	override void SetupItem(mw_InvStruct item) 
	{
		GetDescription(item.description);
	}
	void GetDescription(in out Array<String> desc)
	{
		let enginfo = Mechbase_Engine.Create(GetClassName());
		int xlslots = enginfo.ltslots+enginfo.rtslots;
		int stdslots = enginfo.ctslots+enginfo.gyroslots;
		string tons = enginfo.weight.."";
		tons.truncate(tons.Length()-4);
		string ctext = "Criticals: " .. stdslots;
		if(xlslots) ctext = ctext .. "(+" .. xlslots .. ") "; 
		desc.push("Name: " .. enginfo.displayName);
		desc.push("Weight: " .. tons .. " tons");
		desc.push(ctext);
		desc.push("Heatsinks: " .. enginfo.intrinsic_heatsinks+enginfo.intrinsic_doubleheatsinks);
		desc.push("CBill Value: " .. int(enginfo.worth));
	}
}

class Mechbase_EngineOBJ : Object
{
	String ClassType;
	String displayName;
	int enginetype;
	float weight;
	float worth;
	int ctslots;
	int ltslots;
	int rtslots;
	int gyroslots;
	int intrinsic_heatsinks;
	int intrinsic_doubleheatsinks;
}
