class MechLegsBase : Actor
{
	MechwarriorBase mechowner;
	
	Default
	{
		+NOGRAVITY;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			angle = mechowner.LegAng;
			SetOrigin(mechowner.pos,true);
		}
		super.tick();
	}
	
	bool isMoving()
	{
		return (mechowner && (mechowner.vel.xy.length() >= 0.08 || mechowner.LegVel) );
	}
	bool checkStepping(bool idle=false, int one=3, int two=8)
	{
		mechowner.stepping = idle ? false : (frame == one || frame == two);
		return true;
	}
	
	static MechLegsBase Create(class<MechLegsBase> legs, MechWarriorBase torso)
	{
		let mwlegs = MechLegsBase(Spawn(legs));
		if(mwlegs)
		{
			mwlegs.mechowner = torso;
			mwlegs.frame = 0;
		}
		return mwlegs;
	}
	
	States
	{
		Spawn:
			TLEG "#" 1 A_JumpIf(checkStepping(true) && isMoving(), "WalkCycle");
		loop;
		WalkCycle:
			TLEG BCDEFGHIJ 4 
			{	
				float spdrating = (mechowner.throttle * mechowner.MoveSpeedKPH)/140.;
				float wrating = float(mechowner.inv_context.weapons_tonnage)/100.;
				float stompfriction = clamp((0.77) + (wrating*(spdrating)), 0.9, 1.28);
				//console.printf("--------\nSR: %f\nWR: %f\nFR: %f", spdrating, wrating, stompfriction);
				if(checkStepping() && mechowner.stepping) mechowner.vel.xy *= stompfriction;
				if(checkStepping(0,2,7) && mechowner.stepping) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 1, 10);
				return !isMoving() ? ResolveState("Spawn") : ResolveState(Null); 
			}
		loop;
	}
}


class Legs_Timberwolf : MechLegsBase {}
class Legs_Stormcrow : MechLegsBase {}
