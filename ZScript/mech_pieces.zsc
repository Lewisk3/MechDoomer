// Camera Drone
class MechCamera : Actor
{
	MechWarriorBase mechowner;
	float followdist;
	float followdist_desired;
	vector3 followpos;
	float rotangle;
	float rotspd;
	Property FollowDistance : followdist;
	
	Default
	{
		+NOGRAVITY;
		+SOLID;
		Radius 1;
		Height 1;
		MechCamera.FollowDistance 50;
	}
		
	static MechCamera Create(MechWarriorBase torso, float dist, float rotation)
	{
		let cam = MechCamera(Spawn("MechCamera"));
		if(cam) 
		{
			cam.mechowner = torso;
			cam.followdist_desired = dist;
			cam.rotspd = rotation;
		}
		return cam;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			if(followdist < followdist_desired && mechowner.dronecam_active) 
				followdist = MDMath.Lerp(followdist,followdist_desired,0.05);
				
			if(!mechowner.dronecam_active)
			{
				if(followdist <= 20) Destroy();
				followdist = MDMath.Lerp(followdist,0,0.05);
			}
			
			float zoffs = (mechowner.viewheight);
			rotangle += rotspd;
			float trueangle = !rotangle ? mechowner.angle : rotangle;
			vector3 newfollowpos = (
				mechowner.pos.x - cos(trueangle)*followdist,
				mechowner.pos.y - sin(trueangle)*followdist,
				mechowner.pos.z + zoffs+(sin(mechowner.pitch)*followdist)
			);
			if(!followpos.length()) followpos = newfollowpos;
			followpos = MDMath.Lerp3D(followpos, newfollowpos, 0.3);
			angle = AngleTo(mechowner);
			pitch = MDMath.getPitchBetween(pos,(mechowner.pos.x,mechowner.pos.y,mechowner.pos.z+zoffs));
			SetOrigin(followpos,true);
		}
	}	
	
	States
	{
		Spawn:
			MCAM A 1;
		loop;
	}
}


// Legs
class MechLegsBase : Actor
{
	MechwarriorBase mechowner;
	
	Default
	{
		+NOGRAVITY;
	}
	
	override void tick()
	{
		if(mechowner)
		{
			angle = mechowner.LegAng;
			SetOrigin(mechowner.pos,true);
		}
		super.tick();
	}
	
	bool isMoving()
	{
		return (mechowner && !mechowner.checkVoodoo() && (mechowner.vel.xy.length() >= 0.08 || mechowner.LegVel) );
	}
	bool checkStepping(bool idle=false)
	{
		mechowner.stepping = idle ? false : (frame == 3 || frame == 8);
		return true;
	}
	
	static MechLegsBase Create(class<MechLegsBase> legs, MechWarriorBase torso)
	{
		let mwlegs = MechLegsBase(Spawn(legs));
		if(mwlegs)
		{
			mwlegs.mechowner = torso;
			mwlegs.frame = 0;
		}
		return mwlegs;
	}
	
	States
	{
		Spawn:
			TLEG "#" 1 A_JumpIf(checkStepping(true) && isMoving(), "WalkCycle");
		loop;
		WalkCycle:
			TLEG BCDEFGHIJ 4 
			{	
				float spdrating = (mechowner.throttle * mechowner.MoveSpeedKPH)/140.;
				float wrating = float(mechowner.inv_context.weapons_tonnage)/100.;
				float stompfriction = clamp((0.77) + (wrating*(spdrating)), 0.9, 1.28);
				//console.printf("--------\nSR: %f\nWR: %f\nFR: %f", spdrating, wrating, stompfriction);
				if(checkStepping() && mechowner.stepping) mechowner.vel.xy *= stompfriction;
				if(frame == 2 || frame == 7) SoundEmitter.SE_Trigger("Mech/Footstep",mechowner.pos);
				if(spdrating > 0) tics = clamp(10-(abs(spdrating)*10.), 3, 10);
				return !isMoving() ? ResolveState("Spawn") : ResolveState(Null); 
			}
		loop;
	}
}


class Legs_Timberwolf : MechLegsBase {}
class Legs_Stormcrow : MechLegsBase {}
