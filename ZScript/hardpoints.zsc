struct HardpointData play
{
	int hd, ct, lt, rt, la, ra, ll, rl;
}

class HardpointVitals : Object
{
	double armor;
	double internalhp;
	double max_armor;
	double max_internal;
}

class MechHardpoint : Object
{
	// Position
	vector2 pos;

	// Slots
	int slots;
	int maxslots;
	
	// Vitals
	double armor;
	double internalhp;
	double max_armor;
	double max_internal;
	
	double defmax_armor;
	
	clearscope int getFreeSlots()
	{
		return maxslots-slots;
	}
	
	MechHardpoint Copy()
	{
		let hp = MechHardpoint(new("MechHardpoint"));
		if(hp)
		{
			hp.pos = pos;
			hp.slots = slots;
			hp.maxslots = maxslots;
			hp.armor = armor;
			hp.internalhp = internalhp;
			hp.max_armor = max_armor;
			hp.max_internal = max_internal;
		}
		return hp;
	}
	
	void adjustHardslots(int amt)
	{
		slots += amt;
	}
}

class MechHardpoints : Object;

MechHardpoint hd;
MechHardpoint ct;
MechHardpoint lt;
MechHardpoint rt;
MechHardpoint la;
MechHardpoint ra;
MechHardpoint ll;
MechHardpoint rl;

static MechHardpoints Create()
{
	MechHardpoints hps = new("MechHardpoints");
	if(!hps) return NULL;
	hps.hd = new("MechHardpoint");
	hps.ct = new("MechHardpoint");
	hps.lt = new("MechHardpoint");
	hps.rt = new("MechHardpoint");
	hps.la = new("MechHardpoint");
	hps.ra = new("MechHardpoint");
	hps.ll = new("MechHardpoint");
	hps.rl = new("MechHardpoint");
	return hps;
}
MechHardpoints Copy()
{
	MechHardpoints hps = new("MechHardpoints");
	if(!hps) return NULL;
	hps.hd = hd.Copy();
	hps.ct = ct.Copy();
	hps.lt = lt.Copy();
	hps.rt = rt.Copy();
	hps.la = la.Copy();
	hps.ra = ra.Copy();
	hps.ll = ll.Copy();
	hps.rl = rl.Copy();
	return hps;
}
MechHardpoint FindByIndex(int ind)
{
	if(ind == 0) return hd;
	if(ind == 1) return ct;
	if(ind == 2) return lt;
	if(ind == 3) return rt;
	if(ind == 4) return la;
	if(ind == 5) return ra;
	if(ind == 6) return ll;
	if(ind == 7) return rl;
	return NULL;
}	
MechHardpoint FindByLocation(vector2 pos=(0,0))
{
	if(pos == hd.pos) return hd;
	if(pos == ct.pos) return ct;
	if(pos == lt.pos) return lt;
	if(pos == rt.pos) return rt;
	if(pos == la.pos) return la;
	if(pos == ra.pos) return ra;
	if(pos == ll.pos) return ll;
	if(pos == rl.pos) return rl;
	return NULL;
}

// Setup
void setupLocations(Vector2 hdp, Vector2 ctp, Vector2 rtp, Vector2 ltp, Vector2 lap, Vector2 rap, Vector2 llp, Vector2 rlp)
{
	// Setup weapon location hardpoints and hardpoint slots.
	hd.pos = hdp;
	ct.pos = ctp;
	lt.pos = ltp;
	rt.pos = rtp;
	la.pos = lap;
	ra.pos = rap;
	ll.pos = llp;
	rl.pos = rlp;
}
void setupVitals(int hda,int cta,int lta,int rta,int laa,int raa,int lla,int rla,int hdi,int cti,int lti,int rti,int lai,int rai,int lli,int rli)
{
	// This looks really messy but idk what else i can do.
	hd.max_armor = hda;
	ct.max_armor = cta;
	lt.max_armor = lta;
	rt.max_armor = rta;
	la.max_armor = laa;
	ra.max_armor = raa;
	ll.max_armor = lla;
	rl.max_armor = rla;
	hd.defmax_armor = hd.max_armor;
	ct.defmax_armor = ct.max_armor;
	lt.defmax_armor = lt.max_armor;
	rt.defmax_armor = rt.max_armor;
	la.defmax_armor = la.max_armor;
	ra.defmax_armor = ra.max_armor;
	rl.defmax_armor = rl.max_armor;
	ll.defmax_armor = ll.max_armor;
	hd.armor = hda;
	ct.armor = cta;
	lt.armor = lta;
	rt.armor = rta;
	la.armor = laa;
	ra.armor = raa;
	ll.armor = lla;
	rl.armor = rla;
	hd.max_internal = hdi;
	ct.max_internal = cti;
	lt.max_internal = lti;
	rt.max_internal = rti;
	la.max_internal = lai;
	ra.max_internal = rai;
	ll.max_internal = lli;
	rl.max_internal = rli;
	hd.internalhp = hdi;
	ct.internalhp = cti;
	lt.internalhp = lti;
	rt.internalhp = rti;
	la.internalhp = lai;
	ra.internalhp = rai;
	ll.internalhp = lli;
	rl.internalhp = rli;
}
void setupSlots(int hds=10,int cts=12,int rts=12, int lts=12, int las=12,int ras=12, int lls=2,int rls=2)
{
	hd.maxslots = hds;
	hd.slots = 0;
	ct.maxslots = cts;
	ct.slots = 0;
	rt.maxslots = rts;
	rt.slots = 0;
	lt.maxslots = lts;
	lt.slots = 0;
	la.maxslots= las;
	la.slots = 0;
	ra.maxslots = ras;
	ra.slots = 0;
	ll.maxslots = lls;
	ll.slots = 0;
	rl.maxslots = rls;
	rl.slots = 0;
}

// Get
clearscope int getTotalFreeSlots()
{
	int slots = 0;
	slots += (hd.maxslots-hd.slots);
	slots += (ct.maxslots-ct.slots);
	slots += (lt.maxslots-lt.slots);
	slots += (rt.maxslots-rt.slots);
	slots += (la.maxslots-la.slots);
	slots += (ra.maxslots-ra.slots);
	slots += (ll.maxslots-ll.slots);
	slots += (rl.maxslots-rl.slots);
	return slots;
}