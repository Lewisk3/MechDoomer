// Credits: https://gist.github.com/itsmrpeck/be41d72e9d4c72d2236de687f6f53974
class MDMath Abstract
{	
	static float Lerp(float a, float b, float lerpFactor)
	{
		float result = ((1.f - lerpFactor) * a) + (lerpFactor * b);
		return result;
	}
	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static float LerpDegrees(float a, float b, float lerpFactor) 
	{
		float result;
		float diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}

		return result;
	}
	static float getPitchBetween(Vector3 one, Vector3 two)
	{	
		vector3 delta = ( one.x - two.x, one.y - two.y, one.z - two.z );
		double pitchto = VectorAngle( sqrt(delta.y * delta.y + delta.x * delta.x), delta.z );
		return pitchto;
	}
	static float Distance3D(vector3 one, vector3 two)
	{
		return sqrt( (two.x - one.x)**2 + (two.y - one.y)**2 + (two.z - one.z)**2 );
	}
	static Vector2 VRotate(Vector2 pos, double angle, bool invert=false)
	{
		if(invert)
		{
			double oldx = pos.x;
			pos.x = pos.y;
			pos.y = oldx;
		}
		return ( pos.y * cos(angle) - pos.x * sin(angle), 
		         pos.y * sin(angle) + pos.x * cos(angle) );
	}
}