class TextElement ui
{
	Font text_font;
	String txt;
	vector2 pos;
	vector2 scale;
	uint font_color;
	
	static TextElement Create(Font fnt, string text, vector2 pos, vector2 scale=(1.0,1.0), uint translation=0)
	{
		let txt = new("TextElement");
		if(txt)
		{
			txt.txt = text;
			txt.pos = pos;
			txt.scale = scale;
			txt.text_font = fnt;
			txt.font_color = translation;
		}
		return txt;
	}
	
	void Draw(float alpha=1.0, Color tint=Color(0,0,0,0), int linespace=20)
	{
		MD_SBS.DrawString(text_font,txt,pos,0,font_color,alpha, scale, tint, linespace);
	}
}


class Button ui
{
	bool pressed;
	bool clicked;
	bool hovered;
	TextureID off_tex;
	TextureID on_tex;
	TextureID cur_tex;
	MenuRect collider;
	MenuRect btnrect;
	TextElement btntext;
	vector2 texsize;
	
	static Button Create(String offtex, String ontex, 
						 float x, float y, float sw, float sh, TextElement txt=NULL)
	{
		let btn = new("Button");
		if(btn)
		{
			btn.off_tex = TexMan.CheckForTexture(offtex,TexMan.Type_Any);
			btn.on_tex  = TexMan.CheckForTexture(ontex,TexMan.Type_Any);
			btn.btnrect = MenuRect.Create(x,y,sw,sh,true);
			btn.cur_tex = btn.off_tex;
			btn.btntext = txt;		
			
			// Default collider mask
			btn.texsize = MD_SBS.GetImageSize(offtex);
			btn.texsize.x *= sw;
			btn.texsize.y *= sh;
			btn.SetupCollider(x - btn.texsize.x/2,y - btn.texsize.y/2, btn.texsize.x,btn.texsize.y);
		}
		return btn;
	}
	
	void SetupCollider(float x, float y, float w, float h)
	{
		collider = MenuRect.Create(x,y,w,h,true);
	}
	
	void ScaleCollider(float wpart, float hpart)
	{
		vector2 ntexsize = texsize;
		ntexsize.x *= wpart;
		ntexsize.y *= hpart;
		SetupCollider( 
				btnrect.pos.x - ntexsize.x/2, 
			    btnrect.pos.y - ntexsize.y/2, 
				ntexsize.x, ntexsize.y
		);
	}
	
	void SetText(String txt)
	{
		if(btntext) btntext.txt = txt;
	}

	void DrawDebug()
	{
		 MD_SBS.DrawString("SmallFont","Hovered: " .. int(hovered), (50,50));
		 MD_SBS.DrawString("SmallFont","Pressed: " .. int(pressed), (50,100));
		 MD_SBS.DrawString("SmallFont","Clicked: " .. int(clicked), (50,150));
	}
	
	void Draw(float alpha=1.0, Color tint=Color(0,0,0,0))
	{
		MD_SBS.DrawTexture(cur_tex,btnrect.pos,0,alpha,btnrect.size,tint);
		if(btntext)
		{
			vector2 tscale = btntext.scale;
			float xoffs = (btnrect.pos.x*tscale.x)+10; 
			float yoffs = (btnrect.pos.y*tscale.y)+(btnrect.size.y*200);
			MD_SBS.DrawString(btntext.text_font, btntext.txt,(xoffs,yoffs),0,btntext.font_color,alpha,tscale,tint);
		}
	}
	void DrawCollider()
	{
		MD_SBS.DrawRect(collider,Color(255,0,127,127));
	}
	
	void Update(Mouse mcheck)
	{
		hovered = collider.checkCollision(mcheck.collider);
		if(mcheck.left_pressed) pressed = hovered;
		if(pressed && !hovered) pressed = false;
		
		if(mcheck.left_clicked && pressed)
		{
			mcheck.left_clicked = false;
			pressed = false;
			if(hovered) clicked = true;
		}
		
		cur_tex = pressed ? on_tex : off_tex;
	}
}


class Mouse ui
{
	MenuRect collider;
	TextureID tex;
	bool left_pressed;
	bool right_pressed;
	bool left_clicked;
	bool right_clicked;
	int scroll;
	
	static Mouse Create(String tex, float x, float y, float w, float h)
	{
		let ms = new("Mouse");
		if(ms) 
		{
			ms.tex = TexMan.CheckForTexture(tex,TexMan.Type_Any);
			
			// Mouse does not use relative res pos
			ms.collider = MenuRect.Create(x,y,w,h, false);
		}
		return ms;
	}
	
	void SetPos(vector2 pos)
	{
		vector2 rpos = MD_SBS.GetRelativePos(pos);
		collider.pos.x = rpos.x;
		collider.pos.y = rpos.y;
	}
	
	void DrawDebug()
	{
		 MD_SBS.DrawString("SmallFont","LPressed: " .. int(left_pressed), (50,300));
		 MD_SBS.DrawString("SmallFont","LClicked: " .. int(left_clicked), (50,350));
		 MD_SBS.DrawString("SmallFont","RPressed: " .. int(right_pressed), (50,450));
		 MD_SBS.DrawString("SmallFont","RClicked: " .. int(right_clicked), (50,500));
	}
	
	void Draw(float alpha=1.0, Color tint=Color(0,0,0,0))
	{
		if(tex) MD_SBS.DrawTexture(tex,collider.pos,0,alpha,(1.0,1.0),tint);
	}
	
	void Update(UIEvent ev)
	{
		if(ev.Type == UIEvent.Type_MouseMove)
		{
			collider.pos.x = ev.MouseX-5;
			collider.pos.y = ev.MouseY-5;
		}
		if(ev.Type == UIEvent.Type_RButtonDown) 
		{
			right_pressed = true;
			right_clicked = false;
		}
		if(ev.Type == UIEvent.Type_RButtonUp  ) 
		{
			if(right_pressed) right_clicked = true;
			right_pressed = false;
		}
		if(ev.Type == UIEvent.Type_LButtonDown) 
		{
			left_pressed = true;
			left_clicked = false;
		}
		if(ev.Type == UIEvent.Type_LButtonUp  ) 
		{
			if(left_pressed) left_clicked  = true;
			left_pressed = false;
		}
		if(ev.Type == UIEvent.Type_WheelUp  ) scroll = -1;
		if(ev.Type == UIEvent.Type_WheelDown) scroll = 1;
	}
}


class MenuRect ui
{
	vector2 pos;
	vector2 size;
	bool relativepos;
	
	static MenuRect Create(float x, float y, float w, float h, bool relative=true)
	{
		let nr = new("MenuRect");
		if(nr)
		{
			nr.pos.x = x;
			nr.pos.y = y;
			nr.size.x = w;
			nr.size.y = h;
			nr.relativepos = relative;
		}
		return nr;
	}
	
	vector2, vector2 GetRelativeCollider()
	{
		vector2 retpos = pos;
		vector2 retsize = (pos.x+size.x,pos.y+size.y);
		if(relativepos)
		{
			retpos = MD_SBS.GetRelativePos(retpos);
			retsize = MD_SBS.GetRelativePos(retsize);
		}
		return retpos, retsize;
	}
	
	bool CheckCollision(MenuRect r)
	{
		vector2 onepos, onesize;
		[onepos, onesize] = GetRelativeCollider();
		vector2 twopos, twosize;
		[twopos, twosize] = r.GetRelativeCollider();
		
		bool collision = ( onepos.x < twosize.x && onesize.x > twopos.x && 
		                   onepos.y < twosize.y && onesize.y > twopos.y    );
		return collision;
	}
	void Move(vector2 npos, bool relative=false)
	{
		if(relative)
			pos += npos;
		else
			pos = npos;
	}
}

class MenuTexture ui
{
	TextureID tex;
	vector2 scale;
	vector2 pos;
	
	static MenuTexture Create(String tex, vector2 pos, vector2 scale=(1,1))
	{
		let mtex = new("MenuTexture");
		if(mtex)
		{
			mtex.tex = TexMan.CheckForTexture(tex,TexMan.Type_Any);
			mtex.scale = scale;
			mtex.pos = pos;
		}
		return mtex;
	}
	
	void Draw(float alpha=1.0, Color tint=Color(0,0,0,0))
	{
		MD_SBS.DrawTexture(tex,pos,MD_SBS.SS_SCREEN_CENTER,alpha,scale,tint);
	}
	void DrawEx(vector2 rpos, vector2 rscale, float alpha, Color tint=Color(0,0,0,0))
	{
		MD_SBS.DrawTexture(tex,rpos,0,alpha, rscale, tint);
	}
	void Move(float xoffs, float yoffs, bool relative=true)
	{
		xoffs = relative ? pos.x+xoffs : xoffs;
		xoffs = relative ? pos.y+yoffs : yoffs;
		pos.x = xoffs;
		pos.y = yoffs;
	}
	void SetScale(float xscale, float yscale)
	{
		scale.x = xscale;
		scale.y = yscale;
	}
}

// Graphics Drawer
extend class MD_SBS
{
	static TextureID FindGraphic(String graphic)
	{
		return TexMan.CheckForTexture(graphic, TexMan.Type_Any);
	}

	static void DrawRect(MenuRect r, Color c, bool scaled=true)
	{	
		vector2 p, s;
		p = r.pos;
		s = r.size;
		if(scaled)
		{
			DrawLine(p.x,     	   p.y,    	     p.x+s.x, p.y+s.y, c);  //: \
			DrawLine(p.x,     	   p.y,     	 p.x+s.x, p.y,     c);  //: -
			DrawLine(p.x,     	   p.y+s.y, 	 p.x+s.x, p.y+s.y, c);  //: _
			DrawLine(p.x,     	   p.y,     	 p.x,     p.y+s.y, c);  //: |
			DrawLine(p.x+s.x, 	   p.y,     	 p.x+s.x, p.y+s.y, c);  //:  |
		}
		else
		{
			Screen.DrawLine(p.x,     	   p.y,    	     p.x+s.x, p.y+s.y, c);  //: \
			Screen.DrawLine(p.x,     	   p.y,     	 p.x+s.x, p.y,     c);  //: -
			Screen.DrawLine(p.x,     	   p.y+s.y, 	 p.x+s.x, p.y+s.y, c);  //: _
			Screen.DrawLine(p.x,     	   p.y,     	 p.x,     p.y+s.y, c);  //: |
			Screen.DrawLine(p.x+s.x,  	   p.y,     	 p.x+s.x, p.y+s.y, c);  //:  |
		}
	}
	
	static void Dim(Color c, float alpha)
	{
		Screen.Dim(c,alpha,0,0,Screen.GetWidth(),Screen.GetHeight());
	}
}